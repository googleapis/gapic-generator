@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(apiFile)
  {@renderFileHeader(apiFile.fileHeader)}

  @@Generated("by GAPIC")
  @@BetaApi
  {@requestClassDef(apiFile.request)}
@end

@private requestClassDef(request)
  public final class {@request.typeName} {
    {@members(request)}

    {@constructors(request)}

    {@getters(request)}

    {@newBuilder(request)}

    {@builder(request)}

    {@toString(request)}

    {@equalsMethod(request)}

    {@hashCode(request)}
  }

@end

@private members(request)
  private static final {@request.typeName} DEFAULT_INSTANCE = new {@request.typeName}();

  @if request.hasRequestObject
    private {@request.requestObject.typeName} {@request.requestObject.name};
  @end

  {@paramMembers(request.queryParams, "queryParams", "Query")}

  {@paramMembers(request.pathParams, "pathParams", "Path")}
@end

@private paramMembers(params, paramsVariableName, paramsName)
  private final ImmutableListMultimap<String, String> {@paramsVariableName};

  @if params
    // {@paramsName} parameters.
    @join param : params
      private {@param.typeName} {@param.name};
    @end
  @end
@end

@private toString(request)
  @@Override
  public String toString() {
    return "{@request.typeName}{"
    @join param : request.queryParams on " + \", \"".add(BREAK)
        + "{@param.name}=" + {@param.name}
    @end
    @if request.pathParams
      " + \", \""
      @join param : request.pathParams on " + \", \"".add(BREAK)
          + "{@param.name}=" + {@param.name}
      @end
    @end
    @if request.hasRequestObject
      " + \", \"{@request.requestObject.name}=" + {@request.requestObject.name}
    @end
        + "}";
  }
@end

@private equalsMethod(request)
  @@Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof {@request.typeName}) {
      {@request.typeName} that = ({@request.typeName}) o;
      return
      @join param : request.queryParams on "&&".add(BREAK)
        this.{@param.name}.equals(that.{@param.getterFunction}())
      @end
      ;
    }
    return false;
  }
@end

@private hashCode(request)
  @@Override
  public int hashCode() {
    int h = 1;
    @join param : request.queryParams
      h *= 1000003;
      h ^= this.{@param.name}.hashCode();
    @end
    return h;
  }
@end

@private newBuilder(request)
  public static Builder newBuilder() {
    return new {@request.typeName}.Builder();
  }
@end

@private getters(request)
  // A list of key-value pairs, where each key is a query parameter and the value is the value
  // of the parameter. A key may appear multiple times, in the case of repeatable parameters.
  public ImmutableListMultimap<String, String> getQueryParams() {
    return queryParams;
  }

  // A list of key-value pairs, where each key is a path parameter and the value is the value
  // of the parameter. A key may appear multiple times, in the case of repeatable parameters
  public ImmutableListMultimap<String, String> getPathParams() {
    return pathParams;
  }

  @if request.hasRequestObject
   public {@request.requestObject.typeName} {@request.requestObject.getterFunction}() {
      return {@request.requestObject.name};
    }
  @end

  @join param : request.queryParams
    public {@param.typeName} {@param.getterFunction} () {
      return {@param.name};
    }
  @end

  @join param : request.pathParams
    public {@param.typeName} {@param.getterFunction} () {
      return {@param.name};
    }
  @end
@end

@private constructors(request)
  private {@request.typeName}(
      @join param : request.queryParams on ",".add(BREAK)
        {@param.typeName} {@param.name}
      @end
      @if request.pathParams
      ,
      @join param : request.pathParams on ",".add(BREAK)
        {@param.typeName} {@param.name}
      @end
      @end
      @if request.hasRequestObject
        , {@request.requestObject.typeName} {@request.requestObject.name}
      @end
      ) {
    @join param : request.queryParams
      this.{@param.name} = {@param.name};
    @end
    @join param : request.pathParams
      this.{@param.name} = {@param.name};
    @end
    @if request.hasRequestObject
      this.{@request.requestObject.name} = {@request.requestObject.name};
    @end

    ImmutableListMultimap.Builder pathParams = ImmutableListMultimap.builder();
    ImmutableListMultimap.Builder queryParams = ImmutableListMultimap.builder();

    @join param : request.pathParams
      if ({@param.name} != null) {
        @if {@param.canRepeat}
          for (String s : foo) {
            pathParams.put("{@param.name}", {@param.name}.toString());
          }
        @else
          pathParams.put("{@param.name}", {@param.name}.toString());
        @end
      }
    @end

    @join param : request.queryParams
      if ({@param.name} != null) {
        @if {@param.canRepeat}
          for (String s : foo) {
            queryParams.put("{@param.name}", {@param.name}.toString());
          }
        @else
          queryParams.put("{@param.name}", {@param.name}.toString());
        @end
      }
    @end

    this.pathParams = pathParams.build();
    this.queryParams = queryParams.build();
  }

  private {@request.typeName}() {
     this.queryParams = (new ImmutableListMultimap.Builder()).build();
     this.pathParams = (new ImmutableListMultimap.Builder()).build();
  }
@end

@private builder(request)
  public static class Builder {
    @join param : request.queryParams
      private {@param.typeName} {@param.name};
    @end
    @if request.hasRequestObject
      private {@request.requestObject.typeName} {@request.requestObject.name}
    @end

    Builder() {}

    Builder({@request.typeName} source) {
      @join param : request.queryParams
        this.{@param.name} = source.{@param.name};
      @end
    }

    @join param : request.queryParams
      public {@param.typeName} {@param.getterFunction}() {
        return {@param.name};
      }

      public Builder {@param.setterFunction}({@param.typeName} {@param.name}) {
        @if @param.isRequired
          if ({@param.name} == null) {
            throw new IllegalArgumentException("\"{@param.name}\" is a required parameter.");
          }
        @end
        @if param.canRepeat
          this.{@param.name} = new LinkedList<>();
          this.{@param.name}.addAll({@param.name});
        @else
          this.{@param.name} = {@param.name};
        @end
        return this;
      }

    @end

    public {@request.typeName} build() {
      return new {@request.typeName}(
        @join param : request.queryParams on ", "

          {@param.name}
        @end
      );
    }
  }
@end

@private operateOnTwo(function, first, second)
  {@function(first)}
  {@function(second)}
@end

@private builderMembers(request)
  @join param : request.queryParams
    public abstract {@request.typeName}.Builder {@param.name}({@param.typeName} val);
    {@""}
  @end
@end
