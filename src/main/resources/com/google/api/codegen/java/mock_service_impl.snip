@extends "java/common.snip"

@snippet generate(mockServiceImplFile)
  {@renderFileHeader(mockServiceImplFile.fileHeader)}

  @@javax.annotation.Generated("by GAPIC")
  @@BetaApi
  public class {@mockServiceImplFile.serviceImpl.name} extends {@mockServiceImplFile.serviceImpl.mockGrpcClassName} {
    private List<AbstractMessage> requests;
    private Queue<Object> responses;

    public {@mockServiceImplFile.serviceImpl.name}() {
      requests = new ArrayList<>();
      responses = new LinkedList<>();
    }

    public List<AbstractMessage> getRequests() {
      return requests;
    }

    public void addResponse(AbstractMessage response) {
      responses.add(response);
    }

    public void setResponses(List<AbstractMessage> responses) {
      this.responses = new LinkedList<Object>(responses);
    }

    public void addException(Exception exception) {
      responses.add(exception);
    }

    public void reset() {
      requests = new ArrayList<>();
      responses = new LinkedList<>();
    }

    @join method : mockServiceImplFile.serviceImpl.grpcMethods
     {@grpcMethod(method)}

    @end
  }
@end

@private grpcMethod(method)
  @switch method.grpcStreamingType
  @case "NonStreaming"
    {@simpleGrpcMethod(method)}
  @case "ServerStreaming"
    {@simpleGrpcMethod(method)}
  @case "ClientStreaming"
    {@streamingGrpcMethod(method)}
  @case "BidiStreaming"
    {@streamingGrpcMethod(method)}
  @default
    $unhandledCase: {@method.streamingType.toString}$
  @end
@end

@private simpleGrpcMethod(method)
  @@Override
  public void {@method.name}({@method.requestTypeName} request,
    StreamObserver<{@method.responseTypeName}> responseObserver) {
    Object response = responses.remove();
    if (response instanceof {@method.responseTypeName}) {
      requests.add(request);
      responseObserver.onNext(({@method.responseTypeName}) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }
@end

@private streamingGrpcMethod(method)
  @@Override
  public StreamObserver<{@method.requestTypeName}> {@method.name}(
      final StreamObserver<{@method.responseTypeName}> responseObserver) {
    StreamObserver<{@method.requestTypeName}> requestObserver =
        new StreamObserver<{@method.requestTypeName}>() {
      @@Override
      public void onNext({@method.requestTypeName} value) {
        requests.add(value);
        final Object response = responses.remove();
        if (response instanceof {@method.responseTypeName}) {
          responseObserver.onNext(({@method.responseTypeName}) response);
        } else if (response instanceof Exception) {
          responseObserver.onError((Exception) response);
        } else {
          responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
        }
      }

      @@Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @@Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }
@end
