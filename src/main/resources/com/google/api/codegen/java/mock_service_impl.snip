@extends "java/common.snip"

@snippet generate(mockServiceImpl)
  {@renderFileHeader(mockServiceImpl.fileHeader)}

  @@javax.annotation.Generated("by GAPIC")
  public class {@mockServiceImpl.name} extends {@mockServiceImpl.grpcClassName}  {
    private ArrayList<GeneratedMessageV3> requests;
    private Queue<GeneratedMessageV3> responses;

    public {@mockServiceImpl.name}() {
      requests = new ArrayList<>();
      responses = new LinkedList<>();
    }

    public List<GeneratedMessageV3> getRequests() {
      return requests;
    }

    public void setResponses(List<GeneratedMessageV3> responses) {
      this.responses = Lists.newLinkedList(responses);
    }

    public void reset() {
      requests = new ArrayList<>();
      responses = new LinkedList<>();
    }

    @join method : mockServiceImpl.grpcMethods
     {@grpcMethod(method)}

    @end
  }
@end

@private grpcMethod(method)
  @switch method.grpcStreamingType
  @case "NonStreaming"
    {@simpleGrpcMethod(method)}
  @case "ServerStreaming"
    {@simpleGrpcMethod(method)}
  @case "ClientStreaming"
    {@streamingGrpcMethod(method)}
  @case "BidiStreaming"
    {@streamingGrpcMethod(method)}
  @default
    $unhandledCase: {@method.streamingType.toString}$
  @end
@end

@private simpleGrpcMethod(method)
  @@Override
  public void {@method.name}({@method.requestTypeName} request,
    StreamObserver<{@method.responseTypeName}> responseObserver) {
    {@method.responseTypeName} response = ({@method.responseTypeName}) responses.remove();
    requests.add(request);
    responseObserver.onNext(response);
    responseObserver.onCompleted();
  }
@end

@private streamingGrpcMethod(method)
  @@Override
  public StreamObserver<{@method.requestTypeName}> {@method.name}(
      final StreamObserver<{@method.responseTypeName}> responseObserver) {
    final {@method.responseTypeName} response = ({@method.responseTypeName}) responses.remove();
    StreamObserver<{@method.requestTypeName}> requestObserver =
        new StreamObserver<{@method.requestTypeName}>() {
      @@Override
      public void onNext({@method.requestTypeName} value) {
        responseObserver.onNext(response);
      }

      @@Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @@Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }
@end
