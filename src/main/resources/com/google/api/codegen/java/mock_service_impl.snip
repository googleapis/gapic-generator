@extends "java/common.snip"

@snippet generate(mockServiceImpl)
  {@license()}

  package {@mockServiceImpl.packageName};

  @join import : mockServiceImpl.imports
    import {@import.fullName};
  @end

  @@javax.annotation.Generated("by GAPIC")
  public class {@mockServiceImpl.name} extends {@mockServiceImpl.grpcClassName}  {
    private ArrayList<GeneratedMessageV3> requests;
    private Queue<GeneratedMessageV3> responses;

    public {@mockServiceImpl.name}() {
      requests = new ArrayList<>();
      responses = new LinkedList<>();
    }

    public List<GeneratedMessageV3> getRequests() {
      return requests;
    }

    public void setResponses(List<GeneratedMessageV3> responses) {
      this.responses = Lists.newLinkedList(responses);
    }

    public void reset() {
      requests = new ArrayList<>();
      responses = new LinkedList<>();
    }

    @join method : mockServiceImpl.grpcMethods
     {@grpcMethod(method)}

    @end
  }
@end

@private grpcMethod(method)
  @@Override
  @if method.isStreaming
    public StreamObserver<{@method.requestTypeName}> {@method.name}(
        StreamObserver<{@method.responseTypeName}> responseObserver) {
      System.err.println("Streaming method is not supported.");
      return null;
    }
  @else
    public void {@method.name}({@method.requestTypeName} request,
      StreamObserver<{@method.responseTypeName}> responseObserver) {
      {@method.responseTypeName} response = ({@method.responseTypeName}) responses.remove();
      requests.add(request);
      responseObserver.onNext(response);
      responseObserver.onCompleted();
    }
  @end
@end
