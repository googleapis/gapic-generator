@snippet generate(sampleClass)
  /*
   * BEFORE RUNNING:
   * ---------------
   * 1. If not already done, enable the {@sampleClass.apiTitle}
   *    and check the quota for your project at
   *    https://console.developers.google.com/apis/api/{@sampleClass.apiName}
   @switch sampleClass.body.authType
   @case "APPLICATION_DEFAULT_CREDENTIALS"
     * 2. This sample uses Application Default Credentials for authentication.
     *    If not already done, install the gcloud CLI from
     *    https://cloud.google.com/sdk and run
     *    `gcloud beta auth application-default login`
     * 3. Install the Java client library on Maven or Gradle. Check installation
     *    instructions at https://github.com/google/google-api-java-client.
     *    On other build systems, you can add the jar files to your project from
     *    https://developers.google.com/resources/api-libraries/download/{@sampleClass.apiName}/{@sampleClass.apiVersion}/java
   @default
     * 2. Install the Java client library on Maven or Gradle. Check installation
     *    instructions at https://github.com/google/google-api-java-client.
     *    On other build systems, you can add the jar files to your project from
     *    https://developers.google.com/resources/api-libraries/download/{@sampleClass.apiName}/{@sampleClass.apiVersion}/java
   @end
   */
  @join import : sampleClass.imports
    import {@import};
  @end

  public class {@sampleClass.className} {
    {@runFunc(sampleClass.body)}

    {@createServiceFunc(sampleClass.body)}

    {@mainFunc(sampleClass)}
  }
@end

@private runFunc(sampleBody)
  public void run() throws IOException, GeneralSecurityException {
    @join field : sampleBody.fields if sampleBody.fields
      @if field.description
        @join line : util.getDocLines(field.description, 100)
          // {@line}
        @end


      @end
      {@field.typeName} {@field.name} = {@field.defaultValue}; {@placeholderTodo(field.isPlaceholderSingular)}

    @end
    @if sampleBody.hasInputRequest
      // TODO: Assign values to desired fields of `{@sampleBody.requestBodyVarName}`.
      @if sampleBody.methodVerb == "PATCH"
        // Only assigned fields will be changed.
      @end
      {@sampleBody.requestBodyTypeName} {@sampleBody.requestBodyVarName} = new {@sampleBody.requestBodyTypeName}();

    @end
    @if sampleBody.hasMediaUpload
      // TODO: Add desired media content for upload. For more information, see:
      // https://developers.google.com/api-client-library/java/google-api-java-client/media-upload

    @end
    {@sampleBody.serviceTypeName} {@sampleBody.serviceVarName} = createService();
    {@sampleBody.requestTypeName} {@sampleBody.requestVarName} = {@sampleBody.serviceVarName}.{@callChain(sampleBody.methodNameComponents)}({@paramList(sampleBody.fieldVarNames)});

    @if sampleBody.isPageStreaming
      {@sampleBody.responseTypeName} {@sampleBody.responseVarName};
      do {
        {@sampleBody.responseVarName} = {@sampleBody.requestVarName}.execute();
        if ({@sampleBody.responseVarName}.{@sampleBody.resourceGetterName}() == null) {
          continue;
        }
        @if sampleBody.isResourceMap
          for ({@sampleBody.resourceTypeName} {@sampleBody.resourceVarName} : response.{@sampleBody.resourceGetterName}().entrySet()) {
            // TODO: Change code below to process each `{@sampleBody.resourceVarName}` entry:
            System.out.println({@sampleBody.resourceVarName}.getKey() + ": " + {@sampleBody.resourceVarName}.getValue());
          }
        @else
          for ({@sampleBody.resourceTypeName} {@sampleBody.resourceVarName} : response.{@sampleBody.resourceGetterName}()) {
            // TODO: Change code below to process each `{@sampleBody.resourceVarName}` resource:
            System.out.println({@sampleBody.resourceVarName});
          }
        @end
      } while ({@sampleBody.responseVarName}.getNextPageToken() != null);
    @else
      @if sampleBody.hasOutput
        {@sampleBody.responseTypeName} {@sampleBody.responseVarName} = {@sampleBody.requestVarName}.execute();
        System.out.println({@sampleBody.responseVarName});
      @else
        {@sampleBody.requestVarName}.execute();
      @end
    @end
  }
@end

@private createServiceFunc(sampleBody)
  public {@sampleBody.serviceTypeName} createService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    @switch sampleBody.authType
    @case "OAUTH_3L"
      // TODO: Change placeholder below to generate authentication credentials.
      // See: {@sampleBody.authInstructionsUrl}
      //
      @if sampleBody.isAuthScopesSingular
        // Authorize using the following scope:
      @else
        // Authorize using one of the following scopes:
      @end
      @join scope : sampleBody.authScopes
        //    {@scope}
      @end
      GoogleCredential credential = null;
    @case "API_KEY"
      // TODO: Change placeholder below to generate authentication credentials.
      // See: {@sampleBody.authInstructionsUrl}
      GoogleCredential credential = null;
    @default
      GoogleCredential credential = GoogleCredential.getApplicationDefault();

      if (credential.createScopedRequired()) {
        credential =
            credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
      }
    @end

    return new {@sampleBody.serviceTypeName}.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
@end

@private mainFunc(sampleClass)
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new {@sampleClass.className}().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "()."
    {@resource}
  @end
@end

@private paramList(fieldVarNames)
  @join fieldVarName : fieldVarNames on ", "
    {@fieldVarName}
  @end
@end

@private placeholderTodo(isSingular)
  @if isSingular
    // TODO: Update placeholder value.
  @else
    // TODO: Update placeholder values.
  @end
@end