@snippet generate(class)
  /**
   * BEFORE RUNNING:
   * ---------------
   * 1. If not already done, enable the {@class.apiTitle}
   *    and check the quota for your project at
   *    https://console.developers.google.com/apis/api/{@class.apiName}
   @switch class.auth.type
   @case "APPLICATION_DEFAULT_CREDENTIALS"
     * 2. This sample uses Application Default Credentials for authentication.
     *    If not already done, install the gcloud CLI from
     *    https://cloud.google.com/sdk and run
     *    `gcloud beta auth application-default login`
     * 3. Install the Java client library on Maven or Gradle. Check installation
     *    instructions at https://github.com/google/google-api-java-client.
     *    On other build systems, you can add the jar files to your project from
     *    https://developers.google.com/resources/api-libraries/download/{@class.apiName}/{@class.apiVersion}/java
   @default
     * 2. Install the Java client library on Maven or Gradle. Check installation
     *    instructions at https://github.com/google/google-api-java-client.
     *    On other build systems, you can add the jar files to your project from
     *    https://developers.google.com/resources/api-libraries/download/{@class.apiName}/{@class.apiVersion}/java
   @end
   */
  @join import : class.imports
    import {@import};
  @end

  public class {@class.className} {
    {@mainFunc(class)}

    {@createServiceFunc(class)}
  }
@end

@private mainFunc(class)
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    @join field : class.fields if class.fields
      @if field.description
        @join line : util.getDocLines(field.description, 100)
          // {@line}
        @end


      @end
      {@field.typeName} {@field.name} = {@field.defaultValue};  // TODO: Update placeholder value.
      @if field.example
        // {@field.example}
      @end

    @end
    @if class.hasRequestBody
      @if class.methodVerb == "PATCH"
        // TODO: Assign values to desired fields of `{@class.requestBodyVarName}`. Only assigned
        // fields will be changed:
      @else
        // TODO: Assign values to desired fields of `{@class.requestBodyVarName}`:
      @end

      {@class.requestBodyTypeName} {@class.requestBodyVarName} = new {@class.requestBodyTypeName}();

    @end
    @if class.hasMediaUpload
      // TODO: Add desired media content for upload. See:
      // https://developers.google.com/api-client-library/java/google-api-java-client/media-upload

    @end
    {@class.serviceTypeName} {@class.serviceVarName} = {@class.createServiceFuncName}();
    {@class.requestTypeName} {@class.requestVarName} = {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@paramList(class.fieldVarNames)});
    @if {@class.hasMediaDownload()}

      // TODO: Download media content if desired. See:
      // https://developers.google.com/api-client-library/java/google-api-java-client/media-download
    @end

    @if class.isPageStreaming
      {@class.responseTypeName} {@class.responseVarName};
      do {
        {@class.responseVarName} = {@class.requestVarName}.execute();
        if ({@class.responseVarName}.{@class.pageStreaming.resourceGetterName}() == null) {
          continue;
        }
        @if class.pageStreaming.isResourceMap
          for ({@class.pageStreaming.resourceElementTypeName} {@class.pageStreaming.resourceVarName} : response.{@class.pageStreaming.resourceGetterName}().entrySet()) {
            // TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` entry:
            System.out.println({@class.pageStreaming.resourceVarName}.getKey() + ": " + {@class.pageStreaming.resourceVarName}.getValue());
          }
        @else
          for ({@class.pageStreaming.resourceElementTypeName} {@class.pageStreaming.resourceVarName} : response.{@class.pageStreaming.resourceGetterName}()) {
            // TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` resource:
            System.out.println({@class.pageStreaming.resourceVarName});
          }
        @end
        @if class.pageStreaming.isResourceSetterInRequestBody
          {@class.requestBodyVarName}.setPageToken({@class.responseVarName()}.getNextPageToken());
        @else
          {@class.requestVarName}.setPageToken({@class.responseVarName()}.getNextPageToken());
        @end
      } while ({@class.responseVarName}.getNextPageToken() != null);
    @else
      @if class.hasResponse
        {@class.responseTypeName} {@class.responseVarName} = {@class.requestVarName}.execute();

        // TODO: Change code below to process the `response` object:
        System.out.println({@class.responseVarName});
      @else
        {@class.requestVarName}.execute();
      @end
    @end
  }
@end

@private createServiceFunc(class)
  public static {@class.serviceTypeName} {@class.createServiceFuncName}() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    @switch class.auth.type
    @case "OAUTH_3L"
      // TODO: Change placeholder below to generate authentication credentials. See:
      // {@class.auth.instructionsUrl}
      //
      @if class.auth.isScopesSingular
        // Authorize using the following scope:
      @else
        // Authorize using one of the following scopes:
      @end
      @join scope : class.auth.scopes
        //    {@scope}
      @end
      GoogleCredential credential = null;
    @case "API_KEY"
      // TODO: Change placeholder below to generate authentication credentials. See:
      // {@class.auth.instructionsUrl}
      GoogleCredential credential = null;
    @default
      GoogleCredential credential = GoogleCredential.getApplicationDefault();
      if (credential.createScopedRequired()) {
        credential =
            credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
      }
    @end

    return new {@class.serviceTypeName}.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();
  }
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "()."
    {@resource}
  @end
@end

@private paramList(fieldVarNames)
  @join fieldVarName : fieldVarNames on ", "
    {@fieldVarName}
  @end
@end
