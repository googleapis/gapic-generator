@extends "java/common.snip"
@extends "java/streaming_common.snip"

@snippet generate(pagedResponseFile)
  {@renderFileHeader(pagedResponseFile.fileHeader)}

  // AUTO-GENERATED DOCUMENTATION AND CLASS
  /**
   * Wrapper class to contain paged response types for page streaming methods.
   * Each static class inside this wrapper class is used as the return type of
   * one of an API method that implements the page streaming pattern.
   */
  @@Generated("by GAPIC")
  @if pagedResponseFile.releaseLevelAnnotation
    {@pagedResponseFile.releaseLevelAnnotation}
  @end
  @let pagedResponseClass = pagedResponseFile.pagedResponseClass
    public class {@pagedResponseClass.pageTypeName} extends AbstractPage<
        {@pagedResponseClass.requestTypeName},
        {@pagedResponseClass.responseTypeName},
        {@pagedResponseClass.resourceTypeName},
        {@pagedResponseClass.pageTypeName}> {

      private {@pagedResponseClass.pageTypeName}(
          PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
          {@pagedResponseClass.responseTypeName} response) {
        super(context, response);
      }

      static {@pagedResponseClass.pageTypeName} createEmptyPage() {
        return new {@pagedResponseClass.pageTypeName}(null, null);
      }

      @@Override
      protected {@pagedResponseClass.pageTypeName} createPage(
          PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
          {@pagedResponseClass.responseTypeName} response) {
        return new {@pagedResponseClass.pageTypeName}(context, response);
      }

      @@Override
      public ApiFuture<{@pagedResponseClass.pageTypeName}> createPageAsync(
          PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
          ApiFuture<{@pagedResponseClass.responseTypeName}> futureResponse) {
        return super.createPageAsync(context, futureResponse);
      }
      {@iterateAllResourceMethods(pagedResponseClass)}
      {@getValuesResourceMethods(pagedResponseClass)}
    }
  @end
@end
