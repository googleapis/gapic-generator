@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(apiFile)
  {@renderFileHeader(apiFile.fileHeader)}

  @@Generated("by GAPIC")
  @@BetaApi
  public final class {@apiFile.schema.typeName} implements Serializable {
    {@members(apiFile.schema)}
    {@constructor(apiFile.schema)}
    {@getters(apiFile.schema)}
    {@newBuilder(apiFile.schema)}
    {@builder(apiFile.schema)}
    {@toString(apiFile.schema)}
    {@equalsMethod(apiFile.schema)}
    {@hashCode(apiFile.schema)}
  }
@end

@private toString(schema)
  @@Override
  public String toString() {
    return "{@schema.typeName}{"
    @join property : schema.properties on " + \", \""

        + "{@property.name}=" + {@property.name}
    @end
        + "}";
  }

@end

@private equalsMethod(schema)
  @@Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof {@schema.typeName}) {
      {@schema.typeName} that = ({@schema.typeName}) o;
      return
      @join property : schema.properties on "&&"

        this.{@property.name}.equals(that.{@property.fieldGetFunction}())
      @end
      ;
    }
    return false;
  }

@end

@private hashCode(schema)
  @@Override
  public int hashCode() {
    int h = 1;
    @join property : schema.properties
      h *= 1000003;
      h ^= this.{@property.name}.hashCode();
    @end
    return h;
  }

@end

@private newBuilder(schema)
  public static Builder newBuilder() {
    return new {@schema.typeName}.Builder();
  }

@end

@private getters(schema)
  @join property : schema.properties
    public {@property.typeName} {@property.fieldGetFunction}() {
      return {@property.name};
    }
    {@""}
  @end
@end

@private constructor(schema)
  private {@schema.typeName}(
    @join property : schema.properties on ", "

      {@property.typeName} {@property.name}
    @end
    ) {
    @join property : schema.properties
      this.{@property.name} = {@property.name};
    @end
  }

@end

@private members(schema)
  @join property : schema.properties
    private final {@property.typeName} {@property.name};
  @end
@end

@private builder(schema)
  public static class Builder {
    @join property : schema.properties
      private {@property.typeName} {@property.name};
    @end

    Builder() {}

    Builder({@schema.typeName} source) {
      @join property : schema.properties
        this.{@property.name} = source.{@property.name};
      @end
    }

    @join property : schema.properties
      public {@property.typeName} {@property.fieldGetFunction}() {
        return {@property.name};
      }

      public Builder {@property.fieldSetFunction}({@property.typeName} {@property.name}) {
        this.{@property.name} = {@property.name};
        return this;
      }

    @end

    public {@schema.typeName} build() {
      return new {@schema.typeName}(
        @join property : schema.properties on ", "

          {@property.name}
        @end
      );
    }
  }

@end

@private builderMembers(schema)
  @join property : schema.properties
    public abstract {@schema.typeName}.Builder {@property.name}({@property.typeName} val);
    {@""}
  @end
@end
