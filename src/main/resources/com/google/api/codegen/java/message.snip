@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(apiFile)
  {@renderFileHeader(apiFile.fileHeader)}

  @@Generated("by GAPIC")
  @@BetaApi
  {@schemaClassDef(apiFile.schema)}
@end

@private schemaClassDef(schema)
  public final class {@schema.innerTypeName} implements ApiMessage {
    {@members(schema)}

    {@constructors(schema)}

    {@interfaceMethods(schema)}

    {@getters(schema)}

    {@newBuilder(schema)}

    {@builder(schema)}

    {@toString(schema)}

    {@equalsMethod(schema)}

    {@hashCode(schema)}
  }

@end

@private interfaceMethods(schema)
  @@Override
  public Object getFieldValue(String fieldName) {
    @join param : schema.properties
      if ("{@param.name}".equals(fieldName)) {
        return {@param.name};
      }
    @end
    return null;
  }

  @@Nullable
  @@Override
  @if schema.hasRequestBody()
    public {@schema.requestBodyType.innerTypeName} getApiMessageRequestBody() {
      return {@schema.requestBodyType.name};
    }
  @else
    public ApiMessage getApiMessageRequestBody() {
      return null;
    }
  @end

  @if schema.hasFieldMask
  @else
    @@Nullable
    @@Override
    public List<String> getFieldMask() {
      return null;
    }
  @end
@end

@private members(schema)
  @join property : schema.properties
    @if schema.isSerializable
      @if property.serializedNameDifferent
        @@SerializedName("{@property.rawName}")
        {@""}
      @end
      private final {@property.typeName} {@property.name};
    @else
      private final transient {@property.typeName} {@property.name};
    @end
  @end
  {@""}
@end

@private toString(schema)
  @@Override
  public String toString() {
    return "{@schema.innerTypeName}{"
        @join property : schema.properties on " + \", \"".add(BREAK)
          + "{@property.name}=" + {@property.name}
        @end
        + "}";
  }
@end

@private equalsMethod(schema)
  @@Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof {@schema.innerTypeName}) {
      {@schema.innerTypeName} that = ({@schema.innerTypeName}) o;
      return
          @join param : schema.properties on " &&".add(BREAK)
            Objects.equals(this.{@param.name}, that.{@param.fieldGetFunction}())
          @end
          ;
    }
    return false;
  }
@end

@private hashCode(schema)
  @@Override
  public int hashCode() {
    return Objects.hash(
      @join properties : schema.properties on ", ".add(BREAK)
        {@properties.name}
      @end
    );
  }
@end

@private newBuilder(schema)
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder({@schema.innerTypeName} prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
  }

  public static {@schema.innerTypeName} getDefaultInstance() {
      return DEFAULT_INSTANCE;
  }
  private static final {@schema.innerTypeName} DEFAULT_INSTANCE;
  static {
      DEFAULT_INSTANCE = new {@schema.innerTypeName}();
  }
@end

@private getters(schema)
  @join param : schema.properties
    @if param.isSerializable
      public {@param.typeName} {@param.fieldGetFunction}() {
        return {@param.name};
      }

    @end
  @end
@end

@private constructors(schema)
  private {@schema.innerTypeName}() {
    @join param : schema.properties
      this.{@param.name} = null;
    @end
  }


  private {@schema.innerTypeName}(
      @join param : schema.properties on ",".add(BREAK)
        {@param.typeName} {@param.name}
      @end
      ) {
    @join param : schema.properties
      this.{@param.name} = {@param.name};
    @end
  }
@end

@private builder(schema)
  public static class Builder {
    @join param : schema.properties
      private {@param.typeName} {@param.name};
    @end

    Builder() {}

    public Builder mergeFrom({@schema.innerTypeName} other) {
      if (other == {@schema.innerTypeName}.getDefaultInstance()) return this;
      @join property : schema.properties
        if (other.{@property.fieldGetFunction}() != null) {
          this.{@property.name} = other.{@property.name};
        }
      @end
      return this;
    }

    Builder({@schema.innerTypeName} source) {
      @join property : schema.properties
        this.{@property.name} = source.{@property.name};
      @end
    }

    @join property : schema.properties
      public {@property.typeName} {@property.fieldGetFunction}() {
        return {@property.name};
      }

      @if property.canRepeat
        public Builder {@property.fieldSetFunction}({@property.typeName} {@property.name}) {
          if (this.{@property.name} == null) {
            this.{@property.name} = new LinkedList<>();
          }
          this.{@property.name}.addAll({@property.name});
          return this;
        }

        public Builder {@property.fieldAddFunction}({@property.innerTypeName} {@property.name}) {
          if (this.{@property.name} == null) {
            this.{@property.name} = new LinkedList<>();
          }
          this.{@property.name}.add({@property.name});
          return this;
        }
      @else
        public Builder {@property.fieldSetFunction}({@property.innerTypeName} {@property.name}) {
          this.{@property.name} = {@property.name};
          return this;
        }
      @end

    @end

    public {@schema.innerTypeName} build() {
      @if schema.hasRequiredProperties
        String missing = "";
      @end
      @join param : schema.properties
        @if param.isRequired
          if ({@param.name} == null) {
            missing += " {@param.name}";
          }
        @end
      @end
      @if schema.hasRequiredProperties
        if (!missing.isEmpty()) {
          throw new IllegalStateException("Missing required properties:" + missing);
        }
      @end
      return new {@schema.innerTypeName}(
        @join param : schema.properties on ", ".add(BREAK)
          {@param.name}
        @end
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      @join param : schema.properties
        newBuilder.{@param.fieldSetFunction}(this.{@param.name});
      @end
      return newBuilder;
    }
  }
@end
