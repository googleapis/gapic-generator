@extends "java/common.snip"

@snippet initCode(initCodeSpec)
  @if initCodeSpec.argDefaultLines
    @join line : util.pretty(argDefaultLines(initCodeSpec.argDefaultLines))
      // {@line}
    @end


  @end
  {@initCodeLinesWithDescriptions(initCodeSpec.lines)}
@end

@private initCodeLines(lines)
  @join line : lines
    {@initCodeLine(TRUE, line)}
  @end
@end

@private argDefaultLines(lines)
  @join line : lines
    {@initCodeLine(FALSE, line)}
  @end
@end


@private initCodeLinesWithDescriptions(lines)
  @join line : lines
    @if line.descriptions

      {@toComments(line.descriptions)}

    @end
    {@initCodeLine(TRUE, line)}
  @end
@end

@private initCodeLine(isNewVariable, line)
  @switch line.lineType.toString
  @case "StructureInitLine"
    {@initLineStructure(isNewVariable, line)}
  @case "ListInitLine"
    {@initLineList(isNewVariable, line)}
  @case "MapInitLine"
    {@initLineMap(isNewVariable, line)}
  @case "SimpleInitLine"
    {@initLineSimple(isNewVariable, line)}
  @case "ReadFileInitLine"
    {@initLineReadFile(isNewVariable, line)}
  @default
    $unhandledCase: {@line.lineType.toString}$
  @end
@end

@private initLineStructure(isNewVariable, line)
  @if isNewVariable
    {@line.typeName} {@line.identifier} = {@line.typeName}.newBuilder()
  @else
    {@line.identifier} = {@line.typeName}.newBuilder()
  @end

  @join fieldSetting : line.fieldSettings
    {@EMPTY}  .{@fieldSetting.fieldSetFunction}({@renderFieldSettingValue(fieldSetting)})
  @end
  {@EMPTY}  .build();
@end

@private initLineList(isNewVariable, line)
  @if isNewVariable
    List<{@line.elementTypeName}> {@line.identifier} = \
        Arrays.asList({@argList(line.elementIdentifiers)});
  @else
    {@line.identifier} = Arrays.asList({@argList(line.elementIdentifiers)});
  @end
@end

@private initLineMap(isNewVariable, line)
  @if isNewVariable
    Map<{@line.keyTypeName}, {@line.valueTypeName}> {@line.identifier} = new HashMap<>();
  @else
    {@line.identifier} = new HashMap<>();
  @end

  @join mapEntry : line.initEntries vertical
    {@line.identifier}.put({@mapEntry.key}, {@mapEntry.valueString});
  @end
@end

@private initLineSimple(isNewVariable, line)
  @if isNewVariable
    {@line.typeName} {@line.identifier} = {@renderInitValue(line.initValue)};
  @else
    {@line.identifier} = {@renderInitValue(line.initValue)};
  @end
@end

@private initLineReadFile(isNewVariable, line)
  @if line.isFirstReadFileView
    Path path = Paths.get({@renderInitValue(line.fileName)});
    byte[] data = Files.readAllBytes(path);
  @else
    path = Paths.get({@renderInitValue(line.fileName)});
    data = Files.readAllBytes(path);
  @end

  @if @isNewVariable
    ByteString {@line.identifier} = ByteString.copyFrom(data);
  @else
    {@line.identifier} = ByteString.copyFrom(data);
  @end
@end

@snippet renderInitValue(initValue)
  @switch initValue.type
  @case "SimpleInitValueView"
    {@initValue.initialValue}
  @case "FormattedInitValueView"
    {@initValue.apiWrapperName}.{@initValue.formatFunctionName}({@argList(initValue.formatArgs)})
  @case "ResourceNameInitValueView"
    {@renderResourceName(initValue)}
  @case "ResourceNameOneofInitValueView"
    {@renderResourceName(initValue.specificResourceNameView)}
  @case "RepeatedResourceNameInitValueView"
    new ArrayList<>()
  @default
    $unhandledCase: {@initValue.type}$
  @end
@end

@private renderResourceName(initValue)
  @if {@initValue.convertToString}
    {@initValue.resourceTypeName}.format({@argList(initValue.formatArgs)})
  @else
    {@initValue.resourceTypeName}.of({@argList(initValue.formatArgs)})
  @end
@end

@snippet renderFieldSettingValue(fieldSetting)
  @if fieldSetting.transformParamFunctionName
    {@fieldSetting.transformParamFunctionName}({@fieldSetting.identifier})
  @else
    {@fieldSetting.identifier}
  @end
  @if fieldSetting.formatMethodName
    .{@fieldSetting.formatMethodName}()
  @end
@end
