@extends "java/common.snip"
@extends "java/initcode.snip"

@snippet decorateSampleCode(apiMethod, coreSampleCode)
  try ({@apiMethod.apiClassName} {@apiMethod.apiVariableName} = \
      {@apiMethod.apiClassName}.create()) {
    {@coreSampleCode}
  }
@end

@snippet pagedIterableMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  for ({@apiMethod.listMethod.resourceTypeName} element : {@sampleSyncMethodCall(apiMethod)}.iterateAllElements()) {
    // doThingsWith(element);
  }
@end

@snippet pagedCallableMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  ListenableFuture<{@apiMethod.responseTypeName}> future = {@sampleFutureMethodCall(apiMethod)};
  // Do something
  for ({@apiMethod.listMethod.resourceTypeName} element : future.get().iterateAllElements()) {
    // doThingsWith(element);
  }
@end

@snippet unpagedListCallableMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  while (true) {
    {@apiMethod.responseTypeName} response = \
        {@apiMethod.apiVariableName}.{@apiMethod.name}().call(\
        {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
    for ({@apiMethod.listMethod.resourceTypeName} element : \
        response.{@apiMethod.unpagedListCallableMethod.resourceListGetFunction}()) {
      // doThingsWith(element);
    }
    String nextPageToken = response.getNextPageToken();
    if (!Strings.isNullOrEmpty(nextPageToken)) {
      request = request.toBuilder().setPageToken(nextPageToken).build();
    } else {
      break;
    }
  }
@end

@snippet syncMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = {@sampleSyncMethodCall(apiMethod)};
  @else
    {@sampleSyncMethodCall(apiMethod)};
  @end
@end

@snippet callableMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  ListenableFuture<{@apiMethod.callableMethod.genericAwareResponseType}> future = {@sampleFutureMethodCall(apiMethod)};
  // Do something
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = future.get();
  @else
    future.get();
  @end
@end

@private sampleFutureMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}().futureCall(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private sampleSyncMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end
