@extends "java/common.snip"
@extends "java/initcode.snip"

@snippet decorateSampleCode(apiMethod, coreSampleCode)
  try ({@apiMethod.apiClassName} {@apiMethod.apiVariableName} = \
      {@apiMethod.apiClassName}.create()) {
    {@coreSampleCode}
  }
@end

@snippet pagedIterableMethodSampleCode(apiMethod, initCode)
  {@initCode(initCode)}
  for ({@apiMethod.listMethod.resourceTypeName} element : {@sampleSyncMethodCall(apiMethod)}.{@apiMethod.listMethod.iterateMethodName}()) {
    // doThingsWith(element);
  }
@end

@snippet pagedCallableMethodSampleCode(apiMethod, initCode)
  {@initCode(initCode)}
  ApiFuture<{@apiMethod.responseTypeName}> future = {@sampleFutureMethodCall(apiMethod)};
  // Do something
  for ({@apiMethod.listMethod.resourceTypeName} element : future.get().{@apiMethod.listMethod.iterateMethodName}()) {
    // doThingsWith(element);
  }
@end

@snippet unpagedListCallableMethodSampleCode(apiMethod, initCode)
  {@initCode(initCode)}
  while (true) {
    {@apiMethod.responseTypeName} response = \
        {@apiMethod.apiVariableName}.{@apiMethod.name}().call(\
        {@sampleMethodCallArgList(initCode.fieldSettings)});
    for ({@apiMethod.listMethod.resourceTypeName} element : \
        {@resourceListGetCall(apiMethod)}) {
      // doThingsWith(element);
    }
    String nextPageToken = response.getNextPageToken();
    if (!Strings.isNullOrEmpty(nextPageToken)) {
      request = request.toBuilder().setPageToken(nextPageToken).build();
    } else {
      break;
    }
  }
@end

@private resourceListGetCall(apiMethod)
  @if apiMethod.unpagedListCallableMethod.resourceListParseFunction
    {@apiMethod.unpagedListCallableMethod.resourceListParseFunction}(\
      response.{@apiMethod.unpagedListCallableMethod.resourceListGetFunction}())
  @else
    response.{@apiMethod.unpagedListCallableMethod.resourceListGetFunction}()
  @end
@end

@snippet syncMethodSampleCode(apiMethod, initCode)
  {@initCode(initCode)}
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = {@sampleSyncMethodCall(apiMethod)};
  @else
    {@sampleSyncMethodCall(apiMethod)};
  @end
@end

@snippet asyncOperationMethodSampleCode(apiMethod, initCode)
  {@initCode(initCode)}
  {@apiMethod.responseTypeName} response = {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@sampleMethodCallArgList(initCode.fieldSettings)}).get();
@end

@snippet callableMethodSampleCode(apiMethod, initCode)
  {@initCode(initCode)}
  ApiFuture<{@apiMethod.callableMethod.genericAwareResponseType}> future = {@sampleFutureMethodCall(apiMethod)};
  // Do something
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = future.get();
  @else
    future.get();
  @end
@end

@snippet asyncOperationCallableMethodSampleCode(apiMethod, initCode)
  {@initCode(initCode)}
  OperationFuture<{@apiMethod.callableMethod.genericAwareResponseType}> future = {@sampleFutureMethodCall(apiMethod)};
  // Do something
  {@apiMethod.responseTypeName} response = future.get();
@end

@snippet streamingCallableMethodSampleCode(apiMethod, initCode)
  @switch apiMethod.grpcStreamingType
  @case "BidiStreaming"
    {@bidiStreamingCallableSampleCode(apiMethod, initCode)}
  @case "ServerStreaming"
    {@serverStreamingCallableSampleCode(apiMethod, initCode)}
  @case "ClientStreaming"
    {@clientStreamingCallableSampleCode(apiMethod, initCode)}
  @default
    $unhandledCase: {@apiMethod.grpcStreamingType}$
  @end
@end

@private bidiStreamingCallableSampleCode(apiMethod, initCode)
  BidiStream<{@apiMethod.callableMethod.requestType}, {@apiMethod.callableMethod.genericAwareResponseType}> bidiStream =
      {@apiMethod.apiVariableName}.{@apiMethod.name}().call();

  {@initCode(initCode)}
  bidiStream.send(request);
  for ({@apiMethod.callableMethod.genericAwareResponseType} response : bidiStream) {
    // Do something when receive a response
  }
@end

@private serverStreamingCallableSampleCode(apiMethod, initCode)
  {@initCode(initCode)}

  ServerStream<{@apiMethod.callableMethod.genericAwareResponseType}> stream = {@apiMethod.apiVariableName}.{@apiMethod.name}().call(\
      {@sampleMethodCallArgList(initCode.fieldSettings)});
  for ({@apiMethod.callableMethod.genericAwareResponseType} response : stream) {
    // Do something when receive a response
  }
@end

@private clientStreamingCallableSampleCode(apiMethod, initCode)
  {@responseObserver(apiMethod)}
  ApiStreamObserver<{@apiMethod.callableMethod.requestType}> requestObserver =
      {@apiMethod.apiVariableName}.{@apiMethod.name}().clientStreamingCall(responseObserver);

  {@initCode(initCode)}
  requestObserver.onNext(request);
@end

@private responseObserver(apiMethod)
  ApiStreamObserver<{@apiMethod.callableMethod.genericAwareResponseType}> responseObserver =
      new ApiStreamObserver<{@apiMethod.callableMethod.genericAwareResponseType}>() {
        @@Override
        public void onNext({@apiMethod.callableMethod.genericAwareResponseType} response) {
          // Do something when receive a response
        }

        @@Override
        public void onError(Throwable t) {
          // Add error-handling
        }

        @@Override
        public void onCompleted() {
          // Do something when complete.
        }
      };
@end

@private sampleFutureMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}().futureCall(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private sampleSyncMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@snippet sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@renderFieldSettingValue(fieldSetting)}
  @end
@end
