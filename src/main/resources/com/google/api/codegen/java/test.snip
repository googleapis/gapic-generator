@extends "java/common.snip"
@extends "java/initcode.snip"

@snippet generate(xapiTest)
  {@renderFileHeader(xapiTest.fileHeader)}

  @@javax.annotation.Generated("by GAPIC")
  public class {@xapiTest.testClass.name} {
    @if xapiTest.testClass.transportProtocol == "HTTP"
      {@httpTestInitialization(xapiTest.testClass)}
    @else
      {@grpcTestInitialization(xapiTest.testClass)}
    @end

    @join test : xapiTest.testClass.testCases
      {@testCase(test)}

    @end
  }
@end

@private grpcTestInitialization(testClass)
    @join mockService : testClass.mockServices
      private static {@mockService.className} {@mockService.varName};
    @end

    private static MockServiceHelper serviceHelper;
    private {@testClass.apiClassName} client;
    private LocalChannelProvider channelProvider;

    @@BeforeClass
    public static void startStaticServer() {
      @join mockService : testClass.mockServices
        {@mockService.varName} = new {@mockService.className}();
      @end
      serviceHelper = new MockServiceHelper(UUID.randomUUID().toString(), Arrays.<MockGrpcService>asList({@mockServiceArgs(testClass.mockServices)}));
      serviceHelper.start();
    }

    @@AfterClass
    public static void stopServer() {
      serviceHelper.stop();
    }

    @@Before
    public void setUp() throws IOException {
      serviceHelper.reset();
      channelProvider = serviceHelper.createChannelProvider();
      {@testClass.apiSettingsClassName} settings = {@testClass.apiSettingsClassName}.newBuilder()
          .setTransportChannelProvider(channelProvider)
          .setCredentialsProvider(NoCredentialsProvider.create())
          .build();
      client = {@testClass.apiClassName}.create(settings);
    }

    @@After
    public void tearDown() throws Exception {
      client.close();
    }
@end

@private httpTestInitialization(testClass)
    private static final List<ApiMethodDescriptor> METHOD_DESCRIPTORS = ImmutableList.copyOf(
          Lists.<ApiMethodDescriptor>newArrayList(
            @join test : testClass.testCases on ", ".add(BREAK)
              {@test.methodDescriptor}
            @end
          ));
    private static final MockHttpService mockService
        = new MockHttpService(METHOD_DESCRIPTORS, {@testClass.apiStubSettingsClassName}.getDefaultEndpoint());

    private static {@testClass.apiClassName} client;
    private static {@testClass.apiSettingsClassName} clientSettings;

    @@BeforeClass
    public static void setUp() throws IOException {
      clientSettings =
          {@testClass.apiSettingsClassName}.newBuilder()
             .setTransportChannelProvider(
                 {@testClass.apiSettingsClassName}.defaultHttpJsonTransportProviderBuilder()
                     .setHttpTransport(mockService).build())
             .setCredentialsProvider(NoCredentialsProvider.create())
             .build();
      client =
         {@testClass.apiClassName}.create(clientSettings);
    }

    @@After
    public void cleanUp() {
      mockService.reset();
    }

    @@AfterClass
    public static void tearDown() throws Exception {
      client.close();
    }
@end

@private mockServiceArgs(mockServices)
  @join mockService : mockServices on ", "
    {@mockService.varName}
  @end
@end

@private testCase(test)
  @switch test.grpcStreamingType
  @case "BidiStreaming"
      {@grpcStreamingTestCase(test)}
  @case "ServerStreaming"
      {@grpcStreamingTestCase(test)}
  @case "ClientStreaming"
      {@grpcStreamingTestCase(test)}
  @case "NonStreaming"
      @switch test.clientMethodType
      @case "FlattenedMethod"
          {@unaryTestCase(test)}
      @case "PagedFlattenedMethod"
          {@unaryTestCase(test)}
      @case "AsyncOperationFlattenedMethod"
          {@longRunningMethodTestCase(test)}
      @case "RequestObjectMethod"
          {@unaryTestCase(test)}
      @case "PagedRequestObjectMethod"
          {@unaryTestCase(test)}
      @case "AsyncOperationRequestObjectMethod"
          {@longRunningMethodTestCase(test)}
      @end
  @end
@end

@private unaryTestCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() {
    {@addResponse(test)}

    @if test.testCaseInitCode.lines
      {@initCode(test.testCaseInitCode)}

    @end
    @switch test.clientMethodType
    @case "PagedFlattenedMethod"
      {@pagedMethodCall(test)}
    @case "PagedRequestObjectMethod"
      {@pagedMethodCall(test)}
    @case "FlattenedMethod"
      {@methodCall(test)}
    @case "RequestObjectMethod"
      {@methodCall(test)}
    @default
      $unhandledCase: {@test.clientMethodType}
    @end

    {@unarySuccessAsserts(test)}
  }

  @@Test
  @@SuppressWarnings("all")
  public void {@test.nameWithException}() throws Exception {
    {@addException(test)}

    try {
      @if test.testCaseInitCode.lines
        {@initCode(test.testCaseInitCode)}

      @end
      client.{@test.clientMethodName}(\
          {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }
@end

@private grpcStreamingTestCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() throws Exception {
    {@addResponse(test)}
    @if test.testCaseInitCode.lines
      {@initCode(test.testCaseInitCode)}

    @end
    {@streamingMethodCall(test)}

    List<{@test.responseTypeName}> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @@Test
  @@SuppressWarnings("all")
  public void {@test.nameWithException}() throws Exception {
    {@addException(test)}
    @if test.testCaseInitCode.lines
      {@initCode(test.testCaseInitCode)}

    @end
    {@streamingMethodCallWithException(test)}

    try {
      List<{@test.responseTypeName}> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }
@end

@private longRunningMethodTestCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() throws Exception {
    {@initCode(test.mockResponse.rpcResponseInitCode)}
    Operation resultOperation =
        Operation.newBuilder()
            .setName("{@test.name}")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    {@test.mockServiceVarName}.addResponse(resultOperation);

    @if test.testCaseInitCode.lines
      {@initCode(test.testCaseInitCode)}

    @end
    {@longRunningMethodCall(test)}

    {@unarySuccessAsserts(test)}
  }

  @@Test
  @@SuppressWarnings("all")
  public void {@test.nameWithException}() throws Exception {
    {@addException(test)}

    try {
      @if test.testCaseInitCode.lines
        {@initCode(test.testCaseInitCode)}

      @end
      client.{@test.clientMethodName}(\
          {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)}).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

@end

@private streamingMethodCall(test)
  @switch test.grpcStreamingType
  @case "BidiStreaming"
    {@bidiStreamingCall(test)}
    requestObserver.onCompleted();
  @case "ServerStreaming"
    {@serverStreamingCall(test)}
  @default
    $unhandled case: {@test.grpcStreamingType.toString}$
  @end
@end

@private streamingMethodCallWithException(test)
  @switch test.grpcStreamingType
  @case "BidiStreaming"
    {@bidiStreamingCall(test)}
  @case "ServerStreaming"
    {@serverStreamingCall(test)}
  @default
    $unhandled case: {@test.grpcStreamingType.toString}$
  @end
@end

@private bidiStreamingCall(test)
  MockStreamObserver<{@test.responseTypeName}> responseObserver = new MockStreamObserver<>();

  BidiStreamingCallable<{@test.requestTypeName}, {@test.responseTypeName}> callable =
      client.{@test.clientMethodName}();
  ApiStreamObserver<{@test.requestTypeName}> requestObserver =
      callable.bidiStreamingCall(responseObserver);

  requestObserver.onNext(request);
@end

@private serverStreamingCall(test)
  MockStreamObserver<{@test.responseTypeName}> responseObserver = new MockStreamObserver<>();

  ServerStreamingCallable<{@test.requestTypeName}, {@test.responseTypeName}> callable =
      client.{@test.clientMethodName}();
  callable.serverStreamingCall(request, responseObserver);
@end

@private addResponse(test)
  {@initCode(test.mockResponse.rpcResponseInitCode)}
  @if test.transportProtocol == "HTTP"
    mockService.addResponse(expectedResponse);
  @else
    {@test.mockServiceVarName}.addResponse(expectedResponse);
  @end
@end

@private addException(test)
  @if test.transportProtocol == "HTTP"
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);
  @else
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    {@test.mockServiceVarName}.addException(exception);
  @end
@end

@private pagedMethodCall(test)
  {@test.responseTypeName} pagedListResponse = client.{@test.clientMethodName}(\
    {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});

  @join pageStreamingResponseView : test.pageStreamingResponseViews
    List<{@pageStreamingResponseView.resourceTypeName}> {@pageStreamingResponseView.resourcesVarName} = Lists.newArrayList(pagedListResponse.{@pageStreamingResponseView.resourcesIterateMethod}());
    Assert.assertEquals(1, {@pageStreamingResponseView.resourcesVarName}.size());
    @if pageStreamingResponseView.hasExpectedValueTransformFunction
      Assert.assertEquals({@pageStreamingResponseView.expectedValueTransformFunction}(\
          expectedResponse.{@pageStreamingResponseView.resourcesFieldGetterName}().get(0)),
          {@pageStreamingResponseView.resourcesVarName}.get(0));
    @else
      Assert.assertEquals(expectedResponse.{@pageStreamingResponseView.resourcesFieldGetterName}().get(0), {@pageStreamingResponseView.resourcesVarName}.get(0));
    @end
  @end
@end

@private methodCall(test)
  @if test.hasReturnValue
    {@test.responseTypeName} actualResponse =
        client.{@test.clientMethodName}(\
        {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});
    Assert.assertEquals(expectedResponse, actualResponse);
  @else
    client.{@test.clientMethodName}(\
          {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});
  @end
@end

@private longRunningMethodCall(test)
  {@test.responseTypeName} actualResponse =
      client.{@test.clientMethodName}(\
          {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)}).get();
  Assert.assertEquals(expectedResponse, actualResponse);
@end

@private unarySuccessAsserts(test)
  @if test.transportProtocol == "HTTP"
    {@httpUnarySuccessAsserts(test)}
  @else
    {@grpcUnarySuccessAsserts(test)}
  @end
@end

@private grpcUnarySuccessAsserts(test)
  List<AbstractMessage> actualRequests = {@test.mockServiceVarName}.getRequests();
  Assert.assertEquals(1, actualRequests.size());
  {@test.requestTypeName} actualRequest = ({@test.requestTypeName})actualRequests.get(0);

  @join assert : test.asserts
    @if and(assert.isFloatingPointNumber, not(assert.isArray))
      Assert.assertEquals({@assertExpectedParam(assert)}, {@assertActualParam(assert)}, 0.001);
    @else
      Assert.assertEquals({@assertExpectedParam(assert)}, {@assertActualParam(assert)});
    @end
  @end
  @if test.clientHasDefaultInstance
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  @end
@end

@private httpUnarySuccessAsserts(test)
  List<String> actualRequests = mockService.getRequestPaths();
  Assert.assertEquals(1, actualRequests.size());

  String apiClientHeaderKey = mockService.getRequestHeaders()
      .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
  Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
      .matcher(apiClientHeaderKey).matches());
@end

@private assertExpectedParam(assert)
  @if assert.hasExpectedValueTransformFunction
    {@assert.expectedValueTransformFunction}({@assert.expectedValueIdentifier})
  @else
    {@assert.expectedValueIdentifier}
  @end
@end

@private assertActualParam(assert)
  @if assert.hasActualValueTransformFunction
    {@assert.actualValueTransformFunction}(actualRequest.{@assert.actualValueGetter}())
  @else
    actualRequest.{@assert.actualValueGetter}()
  @end
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end
