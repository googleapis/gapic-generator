@extends "java/common.snip"
@extends "java/initcode.snip"

@snippet generate(xapiTest)
  {@license()}

  package {@xapiTest.packageName};

  @join import : xapiTest.imports
    import {@import};
  @end

  @@javax.annotation.Generated("by GAPIC")
  public class {@xapiTest.name} {
    private static MockServiceHelper serviceHelper;
    private {@xapiTest.apiClassName} api;

    @@BeforeClass
    public static void startStaticServer() {
      {@xapiTest.mockServiceClassName} mockService = new {@xapiTest.mockServiceClassName}();
      serviceHelper = new MockServiceHelper("in-process-1", mockService);
      serviceHelper.start();
    }

    @@AfterClass
    public static void stopServer() {
      serviceHelper.stop();
    }

    @@Before
    public void setUp() throws IOException {
      serviceHelper.reset();
      {@xapiTest.apiSettingsClassName} settings = {@xapiTest.apiSettingsClassName}.defaultBuilder()
          .provideChannelWith(serviceHelper.createChannel(), true)
          .build();
      api = {@xapiTest.apiClassName}.create(settings);
    }

    @@After
    public void tearDown() throws Exception {
      api.close();
    }

    @join test : xapiTest.testCases
      {@testCase(test)}

    @end
  }
@end

@private testCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() {
    {@setResponse(test.mockResponse)}

    {@initCode(test.initCode)}

    {@methodCall(test)}

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    {@test.requestTypeName} actualRequest = ({@test.requestTypeName})actualRequests.get(0);

    @join assert : test.asserts
      Assert.assertEquals({@assert.expectedValueIdentifier}, \
        actualRequest.{@assert.actualValueGetter}());
    @end
  }
@end

@private setResponse(response)
  {@initCode(response.initCode)}
  List<GeneratedMessage> expectedResponses = new ArrayList<>();
  expectedResponses.add(expectedResponse);
  serviceHelper.getService().setResponses(expectedResponses);
@end

@private methodCall(test)
  @switch test.methodType
  @case "PagedFlattenedMethod"
    PageAccessor<{@test.resourceTypeName}> pageAccessor = api.{@test.surfaceMethodName}(\
      {@sampleMethodCallArgList(test.initCode.fieldSettings)});

    // PageAccessor will not make actual request until it is being used.
    // Add all the pages here in order to make grpc requests.
    List<{@test.resourceTypeName}> resources = Lists.newArrayList(pageAccessor.getPageValues());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.{@test.resourcesFieldGetterName}().get(0), resources.get(0));
  @case "FlattenedMethod"
    @if test.hasReturnValue
      {@test.responseTypeName} actualResponse =
          api.{@test.surfaceMethodName}(\
          {@sampleMethodCallArgList(test.initCode.fieldSettings)});
      Assert.assertEquals(expectedResponse, actualResponse);
    @else
      api.{@test.surfaceMethodName}(\
            {@sampleMethodCallArgList(test.initCode.fieldSettings)});
    @end
  @default
    $unhandledCase: {@test.type}$
  @end
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end
