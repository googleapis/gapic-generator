@extends "java/common.snip"
@extends "java/mvvm_common.snip"

@snippet generate(xapiTest)
  {@license()}

  package {@xapiTest.packageName};

  @join import : xapiTest.imports
    import {@import};
  @end

  @@javax.annotation.Generated("by GAPIC")
  public class {@xapiTest.name} {
    private static LocalServiceHelper serviceHelper;
    private {@xapiTest.apiClassName} api;
    private ValueGenerator valueGenerator;

    @@BeforeClass
    public static void startStaticServer() {
      {@xapiTest.mockServiceClassName} mockService = new {@xapiTest.mockServiceClassName}();
      serviceHelper = new LocalServiceHelper("in-process-1", mockService);
      serviceHelper.start();
    }

    @@AfterClass
    public static void stopServer() {
      serviceHelper.stop();
    }

    @@Before
    public void setUp() throws IOException {
      serviceHelper.reset();
      {@xapiTest.apiSettingsClassName} settings = {@xapiTest.apiSettingsClassName}.defaultBuilder()
          .provideChannelWith(serviceHelper.createChannel(), true)
          .build();
      api = {@xapiTest.apiClassName}.create(settings);
      valueGenerator = new ValueGenerator();
    }

    @@After
    public void tearDown() throws Exception {
      api.close();
    }

    @join test : xapiTest.testCases
      {@testCase(test)}

    @end
  }
@end

@private testCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() {
    {@initCode(test.initCode)}
    {@methodCall(test)}

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    {@test.requestTypeName} request = ({@test.requestTypeName})requests[0];

    @join assert : test.asserts
      Assert.assertEquals(request.{@assert.actualValueIdentifier}(), {@assert.expectedValueIdentifier});
    @end
  }
@end

@private methodCall(test)
  @if {@test.isPageStreaming}
    PageAccessor<{@test.resourceTypeName}> response = api.{@test.methodName}(\
      {@sampleMethodCallArgList(test.initCode.fieldSettings)});
    for ({@test.resourceTypeName} element : response) {
      // DO NOTHING
    }
  @else
    api.{@test.methodName}(\
      {@sampleMethodCallArgList(test.initCode.fieldSettings)});
  @end
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end
