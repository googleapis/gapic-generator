@extends "common.snip"

@snippet generateFilename(service)
  {@context.getApiWrapperName(service)}.java
@end

@snippet generateClass(service, body, imports)
  {@fileHeader(service)}
  package {@context.getApiConfig.getPackageName};

  @join import : imports
    import {@import};
  @end

  // Manually-added imports: add custom (non-generated) imports after this point.

  {@body}
@end

@snippet generateBody(service)
  {@alwaysImport()}

  {@serviceJavaDoc(service)}
  @@javax.annotation.Generated("by GAPIC")
  public class {@context.getApiWrapperName(service)} implements AutoCloseable {
    {@members(service)}

    {@resourceUtils(service)}

    {@constructors(service)}

    {@callables(service)}

    {@cleanupSection()}

    {@manualSection()}
  }
@end

@private alwaysImport() fill
  {@context.addImport("com.google.api.gax.grpc.ApiCallable")}
  {@context.addImport("com.google.api.gax.protobuf.PathTemplate")}
  {@context.addImport("io.grpc.ManagedChannel")}
  {@context.addImport("java.io.Closeable")}
  {@context.addImport("java.io.IOException")}
  {@context.addImport("java.util.ArrayList")}
  {@context.addImport("java.util.List")}
  {@context.addImport("java.util.concurrent.ScheduledExecutorService")}
@end

@private resourceUtils(service)
  {@resourceConstants(service)}
  {@resourceFunctions(service)}
@end

@private resourceConstants(service)
  {@pathTemplateConstants(service)}
@end

@private pathTemplateConstants(service)
  @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    {@pathTemplateConstant(collectionConfig)}

  @end
@end

@private pathTemplateConstant(collectionConfig)
  private static final PathTemplate {@pathTemplateConstantName(collectionConfig)} =
      PathTemplate.createWithoutUrlEncoding("{@collectionConfig.getNamePattern}");
@end

@private pathTemplateConstantName(collectionConfig)
  {@context.lowerUnderscoreToUpperUnderscore(collectionConfig.getEntityName)}_PATH_TEMPLATE
@end

@private resourceFunctions(service)
  @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    {@formatResourceFunctions(collectionConfig)}
  @end

  @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    {@parseResourceFunctions(collectionConfig)}
  @end
@end

@private formatResourceFunctions(collectionConfig)
  /**
   * Formats a string containing the fully-qualified path to represent
   * a {@collectionConfig.getEntityName} resource.
   *
  {@javaDocManualEdit()}
   */
  public static final String {@formatResourceFunctionName(collectionConfig)}(\
      {@formatResourceFunctionParams(collectionConfig)}) {
    return {@pathTemplateConstantName(collectionConfig)}.instantiate(
        {@pathTemplateArgs(collectionConfig)});
  }

@end

@private formatResourceFunctionName(collectionConfig)
  format{@resourceName(collectionConfig)}
@end

@private formatResourceFunctionParams(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() on ", "
    String {@context.lowerUnderscoreToLowerCamel(param)}
  @end
@end

@private pathTemplateArgs(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() vertical on ","
    "{@param}", {@context.lowerUnderscoreToLowerCamel(param)}
  @end
@end

@private parseResourceFunctions(collectionConfig)
  @join subField : collectionConfig.getNameTemplate.vars()
    @let fieldPath = context.upperCamelToLowerCamel(resourceName(collectionConfig))
      /**
       * Parses the {@subField} from the given fully-qualified path which
       * represents a {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)} resource.
       *
      {@javaDocManualEdit()}
       */
      public static final String \
          parse{@context.lowerUnderscoreToUpperCamel(subField)}From{@resourceName(collectionConfig)}(\
          String {@fieldPath}) {
        return {@pathTemplateConstantName(collectionConfig)}.parse({@fieldPath}).get("{@subField}");
      }

    @end
  @end
@end

@private resourceName(collectionConfig)
  {@context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName)}Name
@end

@private members(service)
  private final {@settingsClassName(service)} settings;
  private final ManagedChannel channel;
  private final ScheduledExecutorService executor;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  @join method : service.getMethods
    @let methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
         methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
         inTypeName = context.typeName(method.getInputType), \
         outTypeName = context.typeName(method.getOutputType), \
         isPageStreaming = methodConfig.isPageStreaming
      private final ApiCallable<{@inTypeName}, {@outTypeName}> {@methodName}Callable;
      @if {@isPageStreaming}
        @let pageStreaming = methodConfig.getPageStreaming(), \
             resourceTypeName = context.basicTypeNameBoxed(pageStreaming.getResourcesField().getType()), \
             dummy = context.addImport("com.google.api.gax.core.PageAccessor")
          private final ApiCallable<{@inTypeName}, PageAccessor<{@resourceTypeName}>>
              {@methodName}PagedCallable;
        @end
      @end
    @end
  @end

  public final {@settingsClassName(service)} getSettings() {
    return settings;
  }
@end

@private constructors(service)
  @let className = context.getApiWrapperName(service)
    /**
     * Constructs an instance of {@className} with default settings.
     *
    {@javaDocManualEdit()}
     */
    public static final {@className} createWithDefaults() throws IOException {
      return create({@settingsClassName(service)}.defaultBuilder().build());
    }

    /**
     * Constructs an instance of {@className}, using the given settings.
     * The channels are created based on the settings passed in, or defaults for any
     * settings that are not set.
     *
    {@javaDocManualEdit()}
     */
    public static final {@className} create({@settingsClassName(service)} settings) throws IOException {
      return new {@className}(settings);
    }

    /**
     * Constructs an instance of {@className}, using the given settings.
     * This is protected so that it easy to make a subclass, but otherwise, the static
     * factory methods should be preferred.
     *
    {@javaDocManualEdit()}
     */
    protected {@className}({@settingsClassName(service)} settings) throws IOException {
      this.settings = settings;
      this.executor = settings.getExecutorProvider().getOrBuildExecutor();
      this.channel = settings.getChannelProvider().getOrBuildChannel(this.executor);

      @join method : service.getMethods
        @let methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             isPageStreaming = methodConfig.isPageStreaming, \
             isBundling = methodConfig.isBundling
          this.{@methodName}Callable = ApiCallable.create(settings.{@methodName}Settings(), this.channel, this.executor);
          @if {@isPageStreaming}
            this.{@methodName}PagedCallable =
                ApiCallable.createPagedVariant(settings.{@methodName}Settings(), this.channel, this.executor);
          @end
          @if {@isBundling}
            if (settings.{@methodName}Settings().getBundlerFactory() != null) {
              closeables.add(settings.{@methodName}Settings().getBundlerFactory());
            }
          @end
        @end
      @end

      if (settings.getChannelProvider().shouldAutoClose()) {
        closeables.add(
          new Closeable() {
            @@Override
            public void close() throws IOException {
              channel.shutdown();
            }
          });
      }
      if (settings.getExecutorProvider().shouldAutoClose()) {
        closeables.add(
          new Closeable() {
            @@Override
            public void close() throws IOException {
              executor.shutdown();
            }
          });
      }
    }
  @end
@end

@private callables(service)
  @join method : service.getMethods
    @let methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
         inTypeName = context.typeName(method.getInputType), \
         outTypeName = context.typeName(method.getOutputType), \
         methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
         isPageStreaming = methodConfig.isPageStreaming, \
         isFlattening = methodConfig.isFlattening, \
         requestObjectMethodAccessStr = requestObjectMethodAccess(methodConfig), \
         fieldNamePatterns = methodConfig.getFieldNamePatterns(), \
         requiredFields = methodConfig.getRequiredFields()
      // ----- {@methodName} -----

      # TODO (garrettjones) put some kind of limit on number of flattened parameters, and
      # don't generated a flattened method if there are too many.
      @if {@isPageStreaming}
        @if {@isFlattening}
          @join flatteningGroup: \
              methodConfig.getFlattening().getFlatteningGroups()
            {@pagedFlattenedMethod(service, method, methodName, flatteningGroup, fieldNamePatterns)}
          @end
          {@BREAK}
        @end
        {@pagedMethodWithRequestParam(service, method, methodName, inTypeName, outTypeName, requestObjectMethodAccessStr, requiredFields, fieldNamePatterns)}
        {@methodReturningPagedCallable(service, method, methodName, inTypeName, outTypeName, requiredFields, fieldNamePatterns)}
        {@methodReturningUnpagedListCallable(service, method, methodName, inTypeName, outTypeName, requiredFields, fieldNamePatterns)}
      @else
        @if {@isFlattening}
          @join flatteningGroup : \
              methodConfig.getFlattening().getFlatteningGroups()
            {@flattenedMethod(service, method, methodName, flatteningGroup, fieldNamePatterns)}
          @end
          {@BREAK}
        @end
        {@methodWithRequestParam(service, method, methodName, inTypeName, outTypeName, requestObjectMethodAccessStr, requiredFields, fieldNamePatterns)}
        {@methodReturningCallable(service, method, methodName, inTypeName, outTypeName, requiredFields, fieldNamePatterns)}
      @end
    @end
  @end
@end

@private requestObjectMethodAccess(methodConfig)
  @if {@methodConfig.hasRequestObjectMethod}
    public
  @else
    private
  @end
@end

@private cleanupSection()
  /**
   * Initiates an orderly shutdown in which preexisting calls continue but new calls are immediately
   * cancelled.
   *
  {@javaDocManualEdit()}
   */
  @@Override
  public final void close() throws Exception {
    for (AutoCloseable closeable : closeables) {
      closeable.close();
    }
  }

@end

@private manualSection()
  // ========
  // Manually-added methods: add custom (non-generated) methods after this point.
  // ========

@end

@private pagedFlattenedMethod(service, method, methodName, fields, fieldNamePatterns)
  @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       pageStreaming = methodConfig.getPageStreaming(), \
       resourceTypeName = elementTypeName(pageStreaming.getResourcesField()), \
       requestTypeName = context.typeName(method.getInputType)
    {@iterableFlattenedMethodJavaDoc(service, method, methodName, resourceTypeName, fields, fieldNamePatterns)}
    public final PageAccessor<{@resourceTypeName}> \
        {@methodName}({@paramListFormatted(fields, fieldNamePatterns)}) {
      @join field : fields
        @if fieldNamePatterns.containsKey(field.getSimpleName)
          @let entityName = fieldNamePatterns.get(field.getSimpleName), \
              collectionConfig = context.getCollectionConfig(service, entityName)
            {@pathTemplateCheck(formattedParamName(field), collectionConfig)}
          @end
        @end
      @end
      {@context.typeName(method.getInputType)} request =
          {@requestTypeName}.newBuilder()
          {@builderSetCallsFormatted(fields, fieldNamePatterns)}
          .build();
      return {@methodName}(request);
    }

  @end
@end

@private pagedMethodWithRequestParam(service, method, methodName, inTypeName, outTypeName, accessModifier, requiredFields, fieldNamePatterns)
  @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       pageStreaming = methodConfig.getPageStreaming(), \
       resourceTypeName = elementTypeName(pageStreaming.getResourcesField())
    {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(resourceTypeName) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setRequiredParamsWithFormatting(context, service, requiredFields, fieldNamePatterns) \
      .setPagedVariant({@TRUE}) \
      .setCallableVariant({@FALSE}) \
      .build)}
    {@accessModifier} final PageAccessor<{@resourceTypeName}> {@methodName}({@inTypeName} request) {
      return {@methodName}PagedCallable()
          .call(request);
    }

  @end
@end

@private methodReturningPagedCallable(service, method, methodName, inTypeName, outTypeName, requiredFields, fieldNamePatterns)
  @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       pageStreaming = methodConfig.getPageStreaming(), \
       dummy = context.addImport("com.google.api.gax.core.PageAccessor"), \
       resourceTypeName = elementTypeName(pageStreaming.getResourcesField())
    {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(resourceTypeName) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setRequiredParamsWithFormatting(context, service, requiredFields, fieldNamePatterns) \
      .setPagedVariant({@TRUE}) \
      .setCallableVariant({@TRUE}) \
      .build)}
    public final ApiCallable<{@inTypeName}, PageAccessor<{@resourceTypeName}>> {@methodName}PagedCallable() {
      return {@methodName}PagedCallable;
    }

  @end
@end

@private methodReturningUnpagedListCallable(service, method, methodName, inTypeName, outTypeName, requiredFields, fieldNamePatterns)
  @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       pageStreaming = methodConfig.getPageStreaming(), \
       dummy = context.addImport("com.google.api.gax.core.PageAccessor"), \
       resourcesField = pageStreaming.getResourcesField()
    {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setRequiredParamsWithFormatting(context, service, requiredFields, fieldNamePatterns) \
      .setPagedVariant({@FALSE}) \
      .setCallableVariant({@TRUE}) \
      .setResourcesFieldForUnpagedListCallable(resourcesField) \
      .build)}
    public final ApiCallable<{@inTypeName}, {@outTypeName}> {@methodName}Callable() {
      return {@methodName}Callable;
    }

  @end
@end

@private flattenedMethod(service, method, methodName, fields, fieldNamePatterns)
  {@flattenedMethodJavaDoc(service, method, methodName, fields, fieldNamePatterns)}
  @let returnType = context.methodReturnTypeName(method.getOutputType), \
       returnStatement = context.methodReturnStatement(method.getOutputType), \
       requestTypeName = context.typeName(method.getInputType)
    public final {@returnType} {@methodName}({@paramListFormatted(fields, fieldNamePatterns)}) {
      @join field : fields
        @if fieldNamePatterns.containsKey(field.getSimpleName)
          @let entityName = fieldNamePatterns.get(field.getSimpleName), \
              collectionConfig = context.getCollectionConfig(service, entityName)
            {@pathTemplateCheck(formattedParamName(field), collectionConfig)}
          @end
        @end
      @end
      {@context.typeName(method.getInputType)} request =
          {@requestTypeName}.newBuilder()
          {@builderSetCallsFormatted(fields, fieldNamePatterns)}
          .build();
      {@returnStatement}{@methodName}(request);
    }

  @end
@end

@private methodWithRequestParam(service, method, methodName, inTypeName, outTypeName, accessModifier, requiredFields, fieldNamePatterns)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(context.upperCamelToLowerCamel(method.getSimpleName)) \
      .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setRequiredParamsWithFormatting(context, service, requiredFields, fieldNamePatterns) \
      .setPagedVariant({@FALSE}) \
      .setCallableVariant({@FALSE}) \
      .build)}
  @let returnType = context.methodReturnTypeName(method.getOutputType), \
       returnStatement = context.methodReturnStatement(method.getOutputType)
    {@accessModifier} {@returnType} {@methodName}({@inTypeName} request) {
      {@returnStatement}{@methodName}Callable().call(request);
    }

  @end
@end

@private methodReturningCallable(service, method, methodName, inTypeName, outTypeName, requiredFields, fieldNamePatterns)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setRequiredParamsWithFormatting(context, service, requiredFields, fieldNamePatterns) \
      .setPagedVariant({@FALSE}) \
      .setCallableVariant({@TRUE}) \
      .build)}
  public final ApiCallable<{@inTypeName}, {@outTypeName}> {@methodName}Callable() {
    return {@methodName}Callable;
  }

@end

@private serviceJavaDoc(service)
  {@autoGenServiceWarning()}
  @let serviceApiVariable = context.upperCamelToLowerCamel(context.getApiWrapperName(service)), \
       settingsVariable = context.upperCamelToLowerCamel(settingsClassName(service)), \
       # TODO: support the case where the API has no flattened methods.
       firstFlattenedMethod = context.getFirstFlattenedMethod(service), \
       firstFlattenedMethodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(firstFlattenedMethod), \
       fields = firstFlattenedMethodConfig.getFlattening().getFlatteningGroups().get(0), \
       fieldNamePatterns = firstFlattenedMethodConfig.getFieldNamePatterns()
    /**
    {@javaDocLinesFromStr(serviceDocString(service))}
     *
     * <p>This class provides the ability to make remote calls to the backing service through method
     * calls that map to API methods. Sample code to get started:
     *
     * <pre>
     * <code>
    @join commentLine : context.java.getJavaDocLines(context.generateMethodSampleCode(context.java.newJavaDocConfigBuilder \
                               .setApiName(context.getApiWrapperName(service)) \
                               .setMethodName(context.upperCamelToLowerCamel(firstFlattenedMethod.getSimpleName)) \
                               .setReturnType(context.returnTypeOrEmpty(firstFlattenedMethod.getOutputType)) \
                               .setParamsWithFormatting(context, service, fields, fieldNamePatterns) \
                               .setRequiredParamsEmpty() \
                               .setPagedVariant({@FALSE}) \
                               .setCallableVariant({@FALSE}) \
                               .build))
      {@commentLine}
    @end
     * </code>
     * </pre>
     *
     * <p>Note: close() needs to be called on the {@serviceApiVariable} object to clean up resources such
     * as threads. In the example above, try-with-resources is used, which automatically calls
     * close().
     *
     * <p>The surface of this class includes several types of Java methods for each of the API's methods:
     *
     * <ol>
     * <li> A "flattened" method. With this type of method, the fields of the request type have been
     * converted into function parameters. It may be the case that not all fields are available
     * as parameters, and not every API method will have a flattened method entry point.
     * <li> A "request object" method. This type of method only takes one parameter, a request
     * object, which must be constructed before the call. Not every API method will have a request
     * object method.
     * <li> A "callable" method. This type of method takes no parameters and returns an immutable
     * ApiCallable object, which can be used to initiate calls to the service.
     * </ol>
     *
     * <p>See the individual methods for example code.
     *
     * <p>Many parameters require resource names to be formatted in a particular way. To assist
     * with these names, this class includes a format method for each type of name, and additionally
     * a parse method to extract the individual identifiers contained within names that are
     * returned.
     *
     * <p>This class can be customized by passing in a custom instance of {@settingsClassName(service)} to
     * create(). For example:
     *
     * <pre>
     * <code>
     * {@settingsClassName(service)} {@settingsVariable} = {@settingsClassName(service)}.defaultBuilder()
     *     .provideChannelWith(myCredentials)
     *     .build();
     * {@context.getApiWrapperName(service)} {@serviceApiVariable} = \
         {@context.getApiWrapperName(service)}.create({@settingsVariable});
     * </code>
     * </pre>
     *
     * <!-- manual edit -->
     * <!-- end manual edit -->
     */
  @end
@end

@private serviceDocString(protoElement)
  Service Description: {@getDoc(protoElement)}
@end

@private flattenedMethodJavaDoc(service, method, methodName, fields, fieldNamePatterns)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
      .setParamsWithFormatting(context, service, fields, fieldNamePatterns) \
      .setRequiredParamsEmpty() \
      .setPagedVariant({@FALSE}) \
      .setCallableVariant({@FALSE}) \
      .build)}
@end

@private iterableFlattenedMethodJavaDoc(service, method, methodName, resourceName, fields, fieldNamePatterns)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(resourceName) \
      .setParamsWithFormatting(context, service, fields, fieldNamePatterns) \
      .setRequiredParamsEmpty() \
      .setPagedVariant({@TRUE}) \
      .setCallableVariant({@FALSE}) \
      .build)}
@end

@private methodJavaDoc(method, docConfig)
  {@autoGenMethodWarning()}
  {@javaDocStart()}
  {@javaDocLines(method)}
  @if context.getApiConfig.generateSamples
    {@javaDocEmptyLine()}
    {@javaDocEmptyLine()} Sample code:
    {@javaDocEmptyLine()} <pre><code>
    @join commentLine : context.java.getJavaDocLines(context.generateMethodSampleCode(docConfig))
      {@commentLine}
    @end
    {@javaDocEmptyLine()} </code></pre>
  @end
  {@javaDocEmptyLine()}
  {@javaDocManualEdit()}
  @if docConfig.isCallableVariant
  @else
    {@javaDocEmptyLine()}
    @join param : docConfig.getParams
      @join commentLine : context.java.getJavaDocLinesWithPrefix(param.getDescription, paramDocLinePrefix(param))
        {@commentLine}
      @end
    @end
    {@javaDocThrows()}
  @end
  {@javaDocEnd()}
@end

@private paramDocLinePrefix(param)
  @@param {@param.getName} {@""}
@end

@private paramList(fields)
  @join field : fields on ", "
    @let paramName = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
      {@context.typeName(field.getType)} {@paramName}
    @end
  @end
@end

@private paramListFormatted(fields, fieldNamePatterns)
  @join field : fields on ", "
    @if fieldNamePatterns.containsKey(field.getSimpleName)
      {@context.typeName(field.getType)} {@formattedParamName(field)}
    @else
      @let paramName = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
        {@context.typeName(field.getType)} {@paramName}
      @end
    @end
  @end
@end

@private formattedParamName(field)
  @let paramName = context.lowerUnderscoreToUpperCamel(field.getSimpleName)
    formatted{@paramName}
  @end
@end

@private builderSetCalls(fields)
  @join field : fields
    @let paramName = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
      .{@setCallName(field)}({@paramName})
    @end
  @end
@end

@private builderSetCallsFormatted(fields, fieldNamePatterns)
  @join field : fields
    @if fieldNamePatterns.containsKey(field.getSimpleName)
      .{@setCallName(field)}({@formattedParamName(field)})
    @else
      @let paramName = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
        .{@setCallName(field)}({@paramName})
      @end
    @end
  @end
@end

@snippet generateMethodSampleCode(docConfig)
  @let ApiName = docConfig.getApiName, \
      apiName = context.upperCamelToLowerCamel(ApiName)
    try ({@ApiName} {@apiName} = {@ApiName}.createWithDefaults()) {
      @join param : docConfig.getParams
        {@initLine(param, docConfig)};
      @end
      @if docConfig.isUnpagedListCallableVariant
        @let resourcesField = docConfig.getResourcesFieldForUnpagedListCallable
          while (true) {
            {@callResultSampleCode(docConfig.getReturnType)}{@methodCallSampleCode(docConfig, apiName)};
            for ({@elementTypeName(resourcesField)} elements : response.{@getResourcesListCall(resourcesField)}) {
              // doThingsWith(elements);
            }
            String nextPageToken = response.getNextPageToken();
            if (!Strings.isNullOrEmpty(nextPageToken)) {
              request = request.toBuilder().setPageToken(nextPageToken).build();
            } else {
              break;
            }
          }
        @end
      @else
        @if docConfig.isCallableVariant
          ListenableFuture<{@getGenericAwareReturnType(docConfig)}> future = {@methodFutureCall(docConfig, apiName)};
          // Do something{@BREAK}
        @end
        @if docConfig.isPagedVariant
          for ({@docConfig.getReturnType} elements : {@methodCallSampleCode(docConfig, apiName)}) {
            // doThingsWith(elements);
          }
        @else
          {@callResultSampleCode(docConfig.getReturnType)}{@methodCallSampleCode(docConfig, apiName)};
        @end
      @end
    }
  @end
@end

@private getGenericAwareReturnType(docConfig)
  @if docConfig.isPagedVariant
    PageAccessor<{@docConfig.getGenericAwareReturnType}>
  @else
    {@docConfig.getGenericAwareReturnType}
  @end
@end

@private getResourcesListCall(resourcesField)
  get{@context.lowerUnderscoreToUpperCamel(resourcesField.getSimpleName)}List()
@end

@private elementTypeName(resourcesField)
  {@context.basicTypeNameBoxed(resourcesField.getType())}
@end

@private initLine(param, docConfig)
  @let paramType = param.getType()
    @if paramType.isMessage()
      @if docConfig.getRequiredParams.isEmpty
        {@initLineSimple(param, docConfig)}
      @else
        {@initLineMessage(param, docConfig)}
      @end
    @else
      {@initLineSimple(param, docConfig)}
    @end
  @end
@end

@private initLineMessage(param, docConfig)
  @join requiredParam : docConfig.getRequiredParams()
    {@initLineSimple(requiredParam, docConfig)};
  @end

  {@context.typeName(param.getType)} {@param.getName} = {@context.typeName(param.getType)}.newBuilder()
  @join requiredParam : docConfig.getRequiredParams
    {@EMPTY}  .{@setCallNameFromParam(requiredParam)}({@requiredParam.getName})
  @end
  {@EMPTY}  .build()
@end

@private initLineSimple(param, docConfig)
  {@context.typeName(param.getType)} {@param.getName} = {@initValue(param, docConfig.getApiName)}
@end

@private initValue(param, ApiName)
  @if param.hasFormattingConfig()
    {@ApiName}.{@formatResourceFunctionName(param.getFormattingConfig())}({@formatResourceFunctionArgs(param.getFormattingConfig())})
  @else
    {@context.zeroValue(param.getType)}
  @end
@end

@snippet setCallNameFromParam(param)
  {@setCallName(param.getType, context.lowerCamelToUpperCamel(param.getUnformattedName))}
@end

@private formatResourceFunctionArgs(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() on ", "
    "[{@context.lowerUnderscoreToUpperUnderscore(param)}]"
  @end
@end

@private callResultSampleCode(returnType)
  @if returnType.isEmpty
  @else
    {@returnType} response = {@""}
  @end
@end

@private methodFutureCall(docConfig, apiName)
  {@apiName}.{@methodCallName(docConfig)}().futureCall({@argList(docConfig.getParams)})
@end

@private methodCallSampleCode(docConfig, apiName)
  @if docConfig.isUnpagedListCallableVariant
    {@apiName}.{@methodCallName(docConfig)}().call({@argList(docConfig.getParams)})
  @else
    @if docConfig.isCallableVariant
      future.get()
    @else
      {@apiName}.{@methodCallName(docConfig)}({@argList(docConfig.getParams)})
    @end
  @end
@end

@private methodCallName(docConfig)
  @if docConfig.isCallableVariant
    {@methodCallNameIter(docConfig)}Callable
  @else
    {@docConfig.getMethodName}
  @end
@end

@private methodCallNameIter(docConfig)
  @if docConfig.isPagedVariant
    {@docConfig.getMethodName}Paged
  @else
    {@docConfig.getMethodName}
  @end
@end

@private argList(params)
  @join param : params on ", "
    {@param.getName}
  @end
@end

@snippet pathTemplateCheck(paramName, collectionConfig)
  {@pathTemplateConstantName(collectionConfig)}.validate({@paramName});
@end
