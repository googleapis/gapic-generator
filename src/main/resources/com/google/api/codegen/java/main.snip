@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(apiFile)
  {@renderFileHeader(apiFile.fileHeader)}

  {@serviceDoc(apiFile.api)}
  @@Generated("by GAPIC")
  @if apiFile.api.releaseLevelAnnotation
    {@apiFile.api.releaseLevelAnnotation}
  @end
  public class {@apiFile.api.name} implements AutoCloseable {
    {@members(apiFile.api)}
    {@statics(apiFile.api)}
    {@staticFunctions(apiFile.api)}
    {@constructors(apiFile.api)}
    {@memberMethods(apiFile.api)}
    {@apiMethods(apiFile.api)}
    {@cleanupSection()}
  }
@end

@private serviceDoc(xapiClass)
  @switch xapiClass.doc.exampleApiMethod.type
  @case "FlattenedMethod"
    @let coreSampleCode = syncMethodSampleCode(xapiClass.doc.exampleApiMethod), \
         decoratedSampleCode = decorateSampleCode(xapiClass.doc.exampleApiMethod, coreSampleCode)
      {@renderServiceDoc(xapiClass.doc, decoratedSampleCode)}
    @end
  @case "PagedFlattenedMethod"
    @let coreSampleCode = pagedIterableMethodSampleCode(xapiClass.doc.exampleApiMethod), \
         decoratedSampleCode = decorateSampleCode(xapiClass.doc.exampleApiMethod, coreSampleCode)
      {@renderServiceDoc(xapiClass.doc, decoratedSampleCode)}
    @end
  @case "RequestObjectMethod"
    @let coreSampleCode = syncMethodSampleCode(xapiClass.doc.exampleApiMethod), \
         decoratedSampleCode = decorateSampleCode(xapiClass.doc.exampleApiMethod, coreSampleCode)
      {@renderServiceDoc(xapiClass.doc, decoratedSampleCode)}
    @end
  @default
    $unhandledCase: {@xapiClass.doc.exampleApiMethod.type}$
  @end
@end

@private renderServiceDoc(xapiClassDoc, exampleMethodSampleCode)
  // AUTO-GENERATED DOCUMENTATION AND SERVICE
  /**
  @if xapiClassDoc.lines
    {@""} * Service Description: {@xapiClassDoc.firstLine}
    @if xapiClassDoc.remainingLines
      @join commentLine : xapiClassDoc.remainingLines
        {@""} * {@commentLine}
      @end
    @end
  @else
    {@""} * Service Description:
  @end
   *
   * <p>This class provides the ability to make remote calls to the backing service through method
   * calls that map to API methods. Sample code to get started:
   *
   * <pre>
   * <code>
  @join sampleLine : util.getDocLines(exampleMethodSampleCode)
    {@""} * {@sampleLine}
  @end
   * </code>
   * </pre>
   *
   * <p>Note: close() needs to be called on the {@xapiClassDoc.apiVarName} object to clean up resources such
   * as threads. In the example above, try-with-resources is used, which automatically calls
   * close().
   *
   * <p>The surface of this class includes several types of Java methods for each of the API's methods:
   *
   * <ol>
   * <li> A "flattened" method. With this type of method, the fields of the request type have been
   * converted into function parameters. It may be the case that not all fields are available
   * as parameters, and not every API method will have a flattened method entry point.
   * <li> A "request object" method. This type of method only takes one parameter, a request
   * object, which must be constructed before the call. Not every API method will have a request
   * object method.
   * <li> A "callable" method. This type of method takes no parameters and returns an immutable
   * API callable object, which can be used to initiate calls to the service.
   * </ol>
   *
   * <p>See the individual methods for example code.
   *
   * <p>Many parameters require resource names to be formatted in a particular way. To assist
   * with these names, this class includes a format method for each type of name, and additionally
   * a parse method to extract the individual identifiers contained within names that are
   * returned.
   *
   * <p>This class can be customized by passing in a custom instance of {@xapiClassDoc.settingsClassName} to
   * create(). For example:
   *
   * <pre>
   * <code>
   * InstantiatingChannelProvider channelProvider =
   *     {@xapiClassDoc.settingsClassName}.defaultChannelProviderBuilder()
   *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
   *         .build();
   * {@xapiClassDoc.settingsClassName} {@xapiClassDoc.settingsVarName} =
   *     {@xapiClassDoc.settingsClassName}.defaultBuilder().setChannelProvider(channelProvider).build();
   * {@xapiClassDoc.apiClassName} {@xapiClassDoc.apiVarName} =
   *     {@xapiClassDoc.apiClassName}.create({@xapiClassDoc.settingsVarName});
   * </code>
   * </pre>
   */
@end

@private statics(xapiClass)
  @join pathTemplate : xapiClass.pathTemplates
    private static final PathTemplate {@pathTemplate.name} =
        PathTemplate.createWithoutUrlEncoding("{@pathTemplate.pattern}");
    {@""}
  @end
@end

@private staticFunctions(xapiClass)
  @join function : xapiClass.formatResourceFunctions
    {@formatResourceFunction(function)}
  @end
  {@""}
  @join function : xapiClass.parseResourceFunctions
    {@parseResourceFunction(function)}
  @end
@end

@private formatResourceFunction(function)
  /**
   * Formats a string containing the fully-qualified path to represent
   * a {@function.entityName} resource.
   */
  public static final String {@function.name}(\
      {@formatResourceFunctionParams(function.resourceIdParams)}) {
    return {@function.pathTemplateName}.instantiate(
        {@pathTemplateArgs(function.resourceIdParams)});
  }
  {@""}
@end

@private formatResourceFunctionParams(resourceIdParams)
  @join param : resourceIdParams on ", "
    String {@param.name}
  @end
@end

@private pathTemplateArgs(resourceIdParams)
  @join param : resourceIdParams on ",".add(BREAK)
    "{@param.templateKey}", {@param.name}
  @end
@end

@private parseResourceFunction(function)
  /**
   * Parses the {@function.outputResourceId} from the given fully-qualified path which
   * represents a {@function.entityName} resource.
   */
  public static final String {@function.name}(String {@function.entityNameParamName}) {
    return {@function.pathTemplateName}.parse({@function.entityNameParamName})\
      .get("{@function.outputResourceId}");
  }
  {@""}
@end

@private members(xapiClass)
  private final {@xapiClass.settingsClassName} settings;
  private final ScheduledExecutorService executor;
  private final ManagedChannel channel;
  @if xapiClass.hasLongRunningOperations
    private final OperationsClient operationsClient;
  @end
  private final List<AutoCloseable> closeables = new ArrayList<>();

  @join apiCallable : xapiClass.apiCallableMembers
    {@apiCallableMember(apiCallable)}
  @end
  {@""}
@end

@private apiCallableMember(apiCallable)
  private final {@apiCallable.interfaceTypeName}<{@apiCallable.requestTypeName}, \
    {@apiCallable.responseTypeName}> {@apiCallable.name};
@end

@private constructors(xapiClass)
  @if xapiClass.hasDefaultInstance
    /**
     * Constructs an instance of {@xapiClass.name} with default settings.
     */
    public static final {@xapiClass.name} create() throws IOException {
      return create({@xapiClass.settingsClassName}.defaultBuilder().build());
    }
    {@""}
  @end

  /**
   * Constructs an instance of {@xapiClass.name}, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final {@xapiClass.name} create({@xapiClass.settingsClassName} settings) throws IOException {
    return new {@xapiClass.name}(settings);
  }

  /**
   * Constructs an instance of {@xapiClass.name}, using the given settings.
   * This is protected so that it easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected {@xapiClass.name}({@xapiClass.settingsClassName} settings) throws IOException {
    this.settings = settings;
    ChannelAndExecutor channelAndExecutor = settings.getChannelAndExecutor();
    this.executor = channelAndExecutor.getExecutor();
    this.channel = channelAndExecutor.getChannel();

    @if xapiClass.hasLongRunningOperations
      FixedExecutorProvider executorProvider = FixedExecutorProvider.create(this.executor);
      FixedChannelProvider channelProvider = FixedChannelProvider.create(this.channel);
      OperationsSettings operationsSettings =
          OperationsSettings.defaultBuilder()
              .setExecutorProvider(executorProvider)
              .setChannelProvider(channelProvider)
              .build();
      this.operationsClient = OperationsClient.create(operationsSettings);
    @end

    @join apiCallable : xapiClass.apiCallableMembers
      @switch apiCallable.type
      @case "SimpleApiCallable"
        this.{@apiCallable.name} = UnaryCallable.create(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
      @case "PagedApiCallable"
        this.{@apiCallable.name} =
            UnaryCallable.createPagedVariant(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
      @case "BatchingApiCallable"
        this.{@apiCallable.name} = UnaryCallable.create(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
      @case "StreamingApiCallable"
        this.{@apiCallable.name} = StreamingCallable.create(settings.{@apiCallable.settingsFunctionName}(), this.channel);
      @case "InitialOperationApiCallable"
        this.{@apiCallable.name} = UnaryCallable.create(settings.{@apiCallable.settingsFunctionName}().getInitialCallSettings(), this.channel, this.executor);
      @case "OperationApiCallable"
        this.{@apiCallable.name} = OperationCallable.create(settings.{@apiCallable.settingsFunctionName}(),\
            this.channel, this.executor, this.operationsClient);
      @default
        $unhandledCase: {@apiCallable.type}$
      @end
    @end

    if (settings.getChannelProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @@Override
          public void close() throws IOException {
            channel.shutdown();
          }
        });
    }
    if (settings.getExecutorProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @@Override
          public void close() throws IOException {
            executor.shutdown();
          }
        });
    }
  }
  {@""}
@end

@private memberMethods(xapiClass)
  public final {@xapiClass.settingsClassName} getSettings() {
    return settings;
  }

  @if xapiClass.hasLongRunningOperations
    /**
     * Returns the OperationsClient that can be used to query the status of a long-running
     * operation returned by another API method call.
     */
    public final OperationsClient getOperationsClient() {
      return operationsClient;
    }
  @end
  {@""}
@end

@private apiMethods(xapiClass)
  @join apiMethod : xapiClass.apiMethods
    @switch apiMethod.type
    @case "PagedFlattenedMethod"
      {@pagedFlattenedMethod(apiMethod)}
    @case "PagedRequestObjectMethod"
      {@pagedRequestObjectMethod(apiMethod)}
    @case "PagedCallableMethod"
      {@pagedCallableMethod(apiMethod)}
    @case "UnpagedListCallableMethod"
      {@unpagedListCallableMethod(apiMethod)}
    @case "FlattenedMethod"
      {@flattenedMethod(apiMethod)}
    @case "RequestObjectMethod"
      {@requestObjectMethod(apiMethod)}
    @case "CallableMethod"
    # TODO create a GrpcStreaming ApiMethodType
      @if apiMethod.isStreaming
        {@streamingCallableMethod(apiMethod)}
      @else
        {@callableMethod(apiMethod)}
      @end
    @case "AsyncOperationFlattenedMethod"
      {@asyncOperationFlattenedMethod(apiMethod)}
    @case "AsyncOperationRequestObjectMethod"
      {@asyncOperationRequestObjectMethod(apiMethod)}
    @case "OperationCallableMethod"
      {@operationCallableMethod(apiMethod)}
    @default
      $unhandledCase: {@apiMethod.getClass.getSimpleName}$
    @end
    {@BREAK}
  @end
@end

@private cleanupSection()
  /**
   * Initiates an orderly shutdown in which preexisting calls continue but new calls are immediately
   * cancelled.
   */
  @@Override
  public final void close() throws Exception {
    for (AutoCloseable closeable : closeables) {
      closeable.close();
    }
  }

@end

@private pagedFlattenedMethod(apiMethod)
  @let coreSampleCode = pagedIterableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.visibility} final {@apiMethod.responseTypeName} {@apiMethod.name}({@paramList(apiMethod.methodParams)}) {
    @join pathTemplateCheck : apiMethod.pathTemplateChecks
      {@pathTemplateCheckLine(pathTemplateCheck)}
    @end
    {@apiMethod.serviceRequestTypeName} request =
        {@apiMethod.serviceRequestTypeName}.newBuilder()
        {@builderSetCalls(apiMethod.requestObjectParams)}
        .build();
    return {@apiMethod.name}(request);
  }
@end

@private pagedRequestObjectMethod(apiMethod)
  @let coreSampleCode = pagedIterableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.requestObjectMethod.accessModifier} final {@apiMethod.responseTypeName} \
      {@apiMethod.name}({@apiMethod.serviceRequestTypeName} request) {
    return {@apiMethod.requestObjectMethod.callableMethodName}()
        .call(request);
  }
@end

@private pagedCallableMethod(apiMethod)
  @let coreSampleCode = pagedCallableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  {@callableMethodImpl(apiMethod)}
@end

@private unpagedListCallableMethod(apiMethod)
  @let coreSampleCode = unpagedListCallableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  {@callableMethodImpl(apiMethod)}
@end

@private flattenedMethod(apiMethod)
  @let coreSampleCode = syncMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.visibility} final {@apiMethod.responseTypeName} {@apiMethod.name}(\
       {@paramList(apiMethod.methodParams)}) {
    {@flattenedRequestBuildingCode(apiMethod)}
    @if apiMethod.hasReturnValue
      return {@apiMethod.name}(request);
    @else
      {@apiMethod.name}(request);
    @end
  }
@end

@private requestObjectMethod(apiMethod)
  @let coreSampleCode = syncMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.requestObjectMethod.accessModifier} final {@apiMethod.responseTypeName} \
      {@apiMethod.name}({@apiMethod.serviceRequestTypeName} request) {
    @if apiMethod.hasReturnValue
      return {@apiMethod.requestObjectMethod.callableMethodName}().call(request);
    @else
      {@apiMethod.requestObjectMethod.callableMethodName}().call(request);
    @end
  }
@end

@private callableMethod(apiMethod)
  @let coreSampleCode = callableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  {@callableMethodImpl(apiMethod)}
@end

@private callableMethodImpl(apiMethod)
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.visibility} final UnaryCallable<{@apiMethod.serviceRequestTypeName}, \
      {@apiMethod.responseTypeName}> {@apiMethod.name}() {
    return {@apiMethod.callableMethod.callableName};
  }
@end

@private streamingCallableMethod(apiMethod)
  @let coreSampleCode = streamingCallableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.visibility} final StreamingCallable<{@apiMethod.serviceRequestTypeName}, \
      {@apiMethod.responseTypeName}> {@apiMethod.name}() {
    return {@apiMethod.callableMethod.callableName};
  }
@end

@private asyncOperationFlattenedMethod(apiMethod)
  @let coreSampleCode = asyncOperationMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.visibility} final OperationFuture<{@apiMethod.responseTypeName}> {@apiMethod.name}(\
       {@paramList(apiMethod.methodParams)}) {
    {@flattenedRequestBuildingCode(apiMethod)}
    return {@apiMethod.name}(request);
  }
@end

@private asyncOperationRequestObjectMethod(apiMethod)
  @let coreSampleCode = asyncOperationMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.requestObjectMethod.accessModifier} final OperationFuture<{@apiMethod.responseTypeName}> \
      {@apiMethod.name}({@apiMethod.serviceRequestTypeName} request) {
    return {@apiMethod.requestObjectMethod.callableMethodName}().futureCall(request);
  }
@end

@private operationCallableMethod(apiMethod)
  @let coreSampleCode = asyncOperationCallableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
  @end
  @if apiMethod.releaseLevelAnnotation
    {@apiMethod.releaseLevelAnnotation}

  @end
  {@apiMethod.visibility} final OperationCallable<{@apiMethod.serviceRequestTypeName}, \
      {@apiMethod.responseTypeName}> {@apiMethod.name}() {
    return {@apiMethod.callableMethod.callableName};
  }
@end

@private flattenedRequestBuildingCode(apiMethod)
  @join pathTemplateCheck : apiMethod.pathTemplateChecks
    {@pathTemplateCheckLine(pathTemplateCheck)}
  @end

  {@apiMethod.serviceRequestTypeName} request =
      {@apiMethod.serviceRequestTypeName}.newBuilder()
      {@builderSetCalls(apiMethod.requestObjectParams)}
      .build();
@end

@private methodDoc(apiMethodDoc, methodSampleCode)
  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
  @if apiMethodDoc.mainDocLines
    @join commentLine : apiMethodDoc.mainDocLines
      {@""} * {@commentLine}
    @end
  @else
    {@""} *
  @end
   *
   * Sample code:
   * <pre><code>
  @join sampleLine : util.getDocLines(methodSampleCode)
    {@""} * {@sampleLine}
  @end
   * </code></pre>
  @if apiMethodDoc.paramDocs
    {@""} *
    @join doc : apiMethodDoc.paramDocs
      {@paramDoc(doc)}
    @end
  @end
  @if apiMethodDoc.throwsDocLines
    @join commentLine : apiMethodDoc.throwsDocLines
      {@""} * {@commentLine}
    @end
  @end
   */
  {@EMPTY}
@end

@private paramDoc(doc)
  @switch doc.type
  @case "SimpleParamDocView"
    {@simpleParamDoc(doc)}
  @default
    $unhandledCase: {@doc.type}$
  @end
@end

@private simpleParamDoc(doc)
  @if doc.lines
    {@""} * @@param {@doc.paramName} {@doc.firstLine}
    @if doc.remainingLines
      @join commentLine : doc.remainingLines
        {@""} * {@commentLine}
      @end
    @end
  @else
    {@""} * @@param {@doc.paramName}
  @end
@end

@private builderSetCalls(requestObjectParams)
  @join requestObjectParam : requestObjectParams
    @if requestObjectParam.hasTransformParamFunction
      .{@requestObjectParam.setCallName}(\
        {@requestObjectParam.name} == null ? null : \
        {@requestObjectParam.transformParamFunctionName}({@requestObjectParam.name}))
    @else
      .{@requestObjectParam.setCallName}({@requestObjectParam.name})
    @end
  @end
@end

@private pathTemplateCheckLine(pathTemplateCheck)
  @if pathTemplateCheck.allowEmptyString
    if (!{@pathTemplateCheck.paramName}.isEmpty()) {
      {@pathTemplateCheck.pathTemplateName}.validate({@pathTemplateCheck.paramName}, \
        "{@pathTemplateCheck.validationMessageContext}");
    }
  @else
    {@pathTemplateCheck.pathTemplateName}.validate({@pathTemplateCheck.paramName}, \
      "{@pathTemplateCheck.validationMessageContext}");
  @end
@end
