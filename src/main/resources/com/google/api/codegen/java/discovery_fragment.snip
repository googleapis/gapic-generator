@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.java
@end

@snippet generateClass(method, body, imports)
  @let api = context.getApi, \
       apiName = api.getName, \
       apiVersion = api.getVersion, \
       serviceTitle = context.getService.getTitle
    /*
     * PRE-REQUISITES:
     * ---------------
     * 1. If not already done, enable the {@serviceTitle}
     *    and check the quota for your project at
     *    https://console.developers.google.com/apis/api/{@apiName}
     * 2. To install the client library on Maven or Gradle, check installation instructions at
     *    https://github.com/google/google-api-java-client.
     *    On other build systems, you can add the jar files to your project from
     *    https://developers.google.com/resources/api-libraries/download/{@apiName}/{@apiVersion}/java
     * 3. This sample uses Application Default Credentials for Auth.
     *    If not already done, install the gcloud CLI from
     *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
     */

    @join import : imports
      import {@import};
    @end

    {@body}
  @end
@end

@snippet generateBody(method)
  {@alwaysImport()}

  @let ApiName = context.getApiPackage, \
       apiaryConfig = context.getApiaryConfig, \
       params = apiaryConfig.getMethodParams(method.getName)
    public class {@ApiName}Example {
      public static void main(String[] args) throws IOException, GeneralSecurityException {
        // Authentication is provided by the 'gcloud' tool when running locally
        // and by built-in service accounts when running on GAE, GCE, or GKE.
        GoogleCredential credential = GoogleCredential.getApplicationDefault();

        // The createScopedRequired method returns true when running on GAE or a local developer
        // machine. In that case, the desired scopes must be passed in manually. When the code is
        // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
        // For more information, see
        // https://developers.google.com/identity/protocols/application-default-credentials
        if (credential.createScopedRequired()) {
          credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
        }

        HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
        JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
        {@ApiName} {@serviceName()} = new {@ApiName}.Builder(httpTransport, jsonFactory, credential)
          .setApplicationName("Google Cloud Platform Sample")
          .build();
        {@initialize(method, params)}

        {@request(method)}
        @if context.isPageStreaming(method)
          {@iterableCall(method)}
        @else
          {@compactCall(method)}
        @end
      }
    }
  @end
@end

# TODO(tcoffee): check if resource field is always first repeated field of response type
@private iterableCall(method)
  @let responseType = context.getTypeUrl(method.getResponseTypeUrl), \
       responseTypeRef = context.getApiaryConfig.getType(responseType), \
       resourceField = context.getFirstRepeatedField(responseTypeRef), \
       resources = context.lowerCamelToUpperCamel(resourceField.getName), \
       resourceType = context.elementTypeName(responseTypeRef, resourceField)
    {@responseType} response;
    do {
      response = request.execute();
      if (response.get{@resources}() == null)
        continue;

      # TODO(tcoffee): add sample processing code to show visible results
      @if context.isMapField(responseTypeRef, resourceField.getName)
        for ({@resourceType} item : response.get{@resources}().entrySet()) {
          // {@TODO()} Add code here to process each 'item' entry
        }
      @else
        @let resourceName = context.getSampleVarName(resourceType)
          for ({@resourceType} {@resourceName} : response.get{@resources}()) {
            // {@TODO()} Add code here to process each '{@resourceName}' resource
          }
        @end
      @end

      # used to handle inconsistency in log entries list method for Logging API
      # remove exceptional case if inconsistency is resolved
      @if context.isLogEntriesListMethod(method)
        {@requestName()}.setPageToken(response.getNextPageToken());
      @else
        request.setPageToken(response.getNextPageToken());
      @end
    } while (response.getNextPageToken() != null);
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    request.execute();
  @else
    @let responseType = context.getTypeUrl(method.getResponseTypeUrl)
      {@responseType} response = request.execute();

      // {@TODO()} Add code here to process the 'response' object
    @end
  @end
@end

@private request(method)
  @let methodName = context.getMethodName(method), \
       clientRequestType = context.getClientRequestType(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)
    @if context.hasRequestField(method)
      {@initializeRequest(method)}
    @end
    {@clientRequestType} request = \
        {@serviceName()}.{@elementPath(resourcesPath)}.{@methodName}({@arguments(method)});
  @end
@end

# TODO(tcoffee): configure snippet grouping to handle long argument lists
@private arguments(method)
  @if context.hasRequestField(method)
    @let requestType = context.getTypeUrl(context.getRequestField(method)), \
         params = context.getFlatMethodParams(method)
      @if params
        {@argumentList(params)}, {@requestName()}
      @else
        {@requestName()}
      @end
    @end
  @else
    {@argumentList(context.getMethodParams(method))}
  @end
@end

# TODO(tcoffee): generate appropriately typed default values for params
@private initialize(method, params)
  @let methodName = context.getMethodName(method), \
       apiaryConfig = context.getApiaryConfig, \
       signatureType = apiaryConfig.getType(method.getRequestTypeUrl), \
       params = context.getFlatMethodParams(method)
    @if params

      // {@TODO()} Change placeholders below to appropriate parameter values for the '{@methodName}' method:

    @end
    @join param : params
      @let paramField = context.getField(signatureType, param), \
           paramType = context.typeName(signatureType, paramField), \
           paramValue = context.typeDefaultValue(signatureType, paramField), \
           paramDescription = apiaryConfig.getDescription(signatureType.getName, param)

        {@description(paramDescription)}
        {@paramType} {@param} = {@paramValue}
      @end
    @end
  @end
@end

# TODO(tcoffee): add additional commented code for individual fields of request objects?
@private initializeRequest(method)
  @let requestType = context.getTypeUrl(context.getRequestField(method))
    {@requestType} {@requestName()} = new {@requestType}();
    @if context.isPatch(method)
      // {@TODO()} Add code here to assign values to desired fields of the '{@requestName()}' object to be changed


    @else
      // {@TODO()} Add code here to assign values to desired fields of the '{@requestName()}' object


    @end
  @end
@end

@private serviceName()
  @let apiName = context.getApi.getName
    {@apiName}Service
  @end
@end

# name "content" used for request body as in API Explorer to avoid collisions
@private requestName()
  content
@end

@private typePath(types)
  @join type : types on "."
    @let Type = context.lowerCamelToUpperCamel(type)
      {@Type}
    @end
  @end
@end

@private elementPath(elements)
  @join element : elements on "."
    {@element}()
  @end
@end

@private argumentList(arguments)
  @join argument : arguments on ", "
    {@argument}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description, 100)
    // {@line}
  @end
@end

@private alwaysImport() fill
  {@context.addImport("java.io.IOException")}
  {@context.addImport("java.security.GeneralSecurityException")}
  {@context.addImport("java.util.Collections")}
  {@context.addImport("com.google.api.client.googleapis.auth.oauth2.GoogleCredential")}
  {@context.addImport("com.google.api.client.googleapis.javanet.GoogleNetHttpTransport")}
  {@context.addImport("com.google.api.client.http.HttpTransport")}
  {@context.addImport("com.google.api.client.json.JsonFactory")}
  {@context.addImport("com.google.api.client.json.jackson2.JacksonFactory")}
@end

@snippet generateMethodSampleCode(docConfig)
@end
