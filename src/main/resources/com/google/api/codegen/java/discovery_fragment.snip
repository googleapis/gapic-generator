@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.java
@end

@snippet generateClass(method, body, imports)
  @let api = context.getApi, \
       apiName = api.getName, \
       apiVersion = api.getVersion, \
       serviceTitle = context.getService.getTitle, \
       authType = context.getApiaryConfig.getAuthType
    /**
     * BEFORE RUNNING:
     * ---------------
     * 1. If not already done, enable the {@serviceTitle}
     *    and check the quota for your project at
     *    https://console.developers.google.com/apis/api/{@apiName}
     @if authType == "APPLICATION_DEFAULT_CREDENTIALS"
       * 2. This sample uses Application Default Credentials for authentication.
       *    If not already done, install the gcloud CLI from
       *    https://cloud.google.com/sdk/ and run
       *    `gcloud beta auth application-default login`
       * 3. Install the Java client library on Maven or Gradle. Check installation
       *    instructions at https://github.com/google/google-api-java-client.
       *    On other build systems, you can add the jar files to your project from
       *    https://developers.google.com/resources/api-libraries/download/{@apiName}/{@apiVersion}/java
     @else
       * 2. Install the Java client library on Maven or Gradle. Check installation
       *    instructions at https://github.com/google/google-api-java-client.
       *    On other build systems, you can add the jar files to your project from
       *    https://developers.google.com/resources/api-libraries/download/{@apiName}/{@apiVersion}/java
     @end
     */

    @join import : imports
      import {@import};
    @end

    {@body}
  @end
@end

@snippet generateBody(method)
  {@alwaysImport()}
  @let apiName = context.getApi.getName, \
       ApiName = context.getApiPackage, \
       appName = context.getSampleApplicationName, \
       apiaryConfig = context.getApiaryConfig, \
       authType = apiaryConfig.getAuthType
    public class {@ApiName}Example {
      public static void main(String[] args) throws IOException, GeneralSecurityException {
        @switch authType
        @case "APPLICATION_DEFAULT_CREDENTIALS"
          // Use Application Default Credentials for authentication when running locally.
          // For more information, see:
          // https://developers.google.com/identity/protocols/application-default-credentials
          {@importGoogleCredential()}GoogleCredential credential = GoogleCredential.getApplicationDefault();
          if (credential.createScopedRequired()) {
            credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
          }
        @default
          {@importCredential()}Credential credential = getAuth();
        @end

        HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
        JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

        {@ApiName} {@serviceName()} = new {@ApiName}.Builder(httpTransport, jsonFactory, credential)
            .setApplicationName("{@appName}")
            .build();

        {@initialize(method)}
        {@methodCall(method)}
        @if context.hasMediaDownload(method)

          // {@TODO()} Download media content if desired. For more information, see:
          // https://developers.google.com/api-client-library/java/google-api-java-client/media-download


        @end
        @if context.isPageStreaming(method)
          {@iterableCall(method)}
        @else
          {@compactCall(method)}
        @end
      }
      @if apiaryConfig.getAuthType != "APPLICATION_DEFAULT_CREDENTIALS"

        public static Credential getAuth() {
          // {@TODO()} Change placeholder below to get authentication credentials.
          @let authInstructionsUrl = apiaryConfig.getAuthInstructionsUrl
            @if authInstructionsUrl
              // See: {@authInstructionsUrl}
            @end
          @end
          @if context.hasAuthScopes(method)
            @let methodName = context.getMethodName(method)
              //
              // To use the `{@methodName}` method, authorize using one of the following scopes:
              @join scope : context.getAuthScopes(method)
                //   {@scope}
              @end
            @end
          @end
          return null;
        }
      @end
    }
  @end
@end

# TODO(tcoffee): check if resource field is always first repeated field of response type
# TODO(tcoffee): customize placeholder printing based on element type
@private iterableCall(method)
  @let responseType = context.objectTypeName(method.getResponseTypeUrl), \
       responseTypeRef = context.getApiaryConfig.getType(responseType), \
       resourceField = context.getFirstRepeatedField(responseTypeRef), \
       resources = context.lowerCamelToUpperCamel(resourceField.getName)
    {@responseType} {@responseName()};
    do {
      {@responseName()} = {@requestName()}.execute();
      if ({@responseName()}.get{@resources}() == null)
        continue;

      @if context.isMapField(responseTypeRef, resourceField.getName)
        @let resourceType = context.entryTypeName(resourceField)
          for ({@resourceType} {@itemName()} : {@responseName()}.get{@resources}().entrySet()) {
            // {@TODO()} Change code below to process each `{@itemName()}` entry:
            {@printEntry(itemName())}
          }
        @end
      @else
        @let resourceType = context.elementTypeName(resourceField), \
             resourceName = context.getSampleVarName(resourceType)
          for ({@resourceType} {@resourceName} : {@responseName()}.get{@resources}()) {
            // {@TODO()} Change code below to process each `{@resourceName}` resource:
            {@print(resourceName)}
          }
        @end
      @end

      # Used to handle inconsistency in Logging API and CloudResourceManager API.
      # Remove exceptional case if inconsistency is resolved.
      @if context.isPageTokenInRequestBody(method)
        {@requestBodyName()}.setPageToken({@responseName()}.getNextPageToken());
      @else
        {@requestName()}.setPageToken({@responseName()}.getNextPageToken());
      @end
    } while ({@responseName()}.getNextPageToken() != null);
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    {@requestName()}.execute();
  @else
    @let responseType = context.objectTypeName(method.getResponseTypeUrl)
      {@responseType} {@responseName()} = {@requestName()}.execute();

      // {@TODO()} Change code below to process the `{@responseName()}` object:
      {@print(responseName())}
    @end
  @end
@end

@private methodCall(method)
  @let methodName = context.getMethodName(method), \
       requestType = context.getClientRequestType(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)
    {@requestType} {@requestName()} = \
        {@serviceName()}.{@elementPath(resourcesPath)}.{@methodName}({@arguments(method)});
  @end
@end

# TODO(tcoffee): configure snippet grouping to handle long argument lists
@private arguments(method)
  @let params = context.getFlatMethodParams(method)
    @if context.hasRequestField(method)
      @if params
        {@argumentList(params)}, {@requestBodyName()}
      @else
        {@requestBodyName()}
      @end
    @else
      {@argumentList(params)}
    @end
  @end
@end

@private initialize(method)
  @let methodName = context.getMethodName(method), \
       signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
       params = context.getFlatMethodParams(method)
    @if params

      @if context.isSingleton(params)
        // {@TODO()} Change placeholder below to desired parameter value for the `{@methodName}` method:
      @else
        // {@TODO()} Change placeholders below to desired parameter values for the `{@methodName}` method:
      @end

      @join param : params
        @let paramField = context.getField(signatureType, param), \
             paramType = context.typeName(signatureType, paramField), \
             paramValue = context.typeDefaultValue(signatureType, paramField), \
             paramSample = context.getDefaultSample(signatureType, paramField), \
             paramDescription = context.getDescription(signatureType.getName, param)
          {@description(paramDescription)}
          @if paramSample
            {@paramType} {@param} = {@paramValue};  // {@paramSample}
          @else
            {@paramType} {@param} = {@paramValue};
          @end

        @end
      @end

    @end
  @end
  @if context.hasRequestField(method)

    @let requestBodyType = context.objectTypeName(context.getRequestField(method))
      {@requestBodyType} {@requestBodyName()} = new {@requestBodyType}();
      @if context.isPatch(method)
        // {@TODO()} Assign values to desired fields of the `{@requestBodyName()}` object to be changed.
      @else
        // {@TODO()} Assign values to desired fields of the `{@requestBodyName()}` object.
      @end
    @end


  @end
  @if context.hasMediaUpload(method)

    // {@TODO()} Add desired media content for upload. For more information, see:
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-upload


  @end
@end

@private serviceName()
  @let apiName = context.getApi.getName
    {@apiName}Service
  @end
@end

@private itemName()
  item
@end

@private requestName()
  request
@end

@private requestBodyName()
  requestBody
@end

@private responseName()
  response
@end

@private typePath(types)
  @join type : types on "."
    @let Type = context.lowerCamelToUpperCamel(type)
      {@Type}
    @end
  @end
@end

@private elementPath(elements)
  @join element : elements on "."
    {@element}()
  @end
@end

@private argumentList(arguments)
  @join argument : arguments on ", "
    {@argument}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description)
    // {@line}
  @end
@end

@private print(element)
  System.out.println({@element});
@end

@private printEntry(entry)
  System.out.println({@entry}.getKey() + ": " + {@entry}.getValue());
@end

@private importCredential()
  {@context.addImport("com.google.api.client.auth.oauth2.Credential")}
@end

@private importGoogleCredential()
  {@context.addImport("com.google.api.client.googleapis.auth.oauth2.GoogleCredential")}
@end

@private alwaysImport() fill
  {@context.addImport("java.io.IOException")}
  {@context.addImport("java.security.GeneralSecurityException")}
  {@context.addImport("java.util.Collections")}
  {@context.addImport("com.google.api.client.googleapis.javanet.GoogleNetHttpTransport")}
  {@context.addImport("com.google.api.client.http.HttpTransport")}
  {@context.addImport("com.google.api.client.json.JsonFactory")}
  {@context.addImport("com.google.api.client.json.jackson2.JacksonFactory")}
@end

@snippet generateMethodSampleCode(docConfig)
@end
