@snippet generate(sampleClass)
  /**
   * BEFORE RUNNING:
   * ---------------
   * 1. If not already done, enable the {@sampleClass.apiTitle}
   *    and check the quota for your project at
   *    https://console.developers.google.com/apis/api/{@sampleClass.apiName}
   * 2. Install the Java client library on Maven or Gradle. Check installation
   *    instructions at https://github.com/google/google-api-java-client.
   *    On other build systems, you can add the jar files to your project from
   *    https://developers.google.com/resources/api-libraries/download/{@sampleClass.apiName}/{@sampleClass.apiVersion}/java
   */

  @join import : sampleClass.imports
    import {@import};
  @end

  class Main {
    {@body(sampleClass.body)}
  }
@end

@private body(sampleBody)
  public {@sampleBody.serviceTypeName} createService() {
    // TODO: This sample uses ADC...
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // TODO: ...
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new {@sampleBody.serviceTypeName}.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
    
  public void run() throws IOException, GeneralSecurityException {
    @if sampleBody.hasInputRequest
      // TODO: ...
      {@sampleBody.inputRequestTypeName} {@sampleBody.inputRequestVarName} = new {@sampleBody.inputRequestTypeName}();

    @end
    @join field : sampleBody.fields if sampleBody.fields
      @join line : util.getDocLines(field.description, 100)
        // {@line}
      @end

      {@field.typeName} {@field.name} = {@field.defaultValue};

    @end
    {@sampleBody.inputTypeName} {@sampleBody.inputVarName} = {@sampleBody.serviceVarName}.{@callChain(sampleBody.resources)}({@paramList(sampleBody.fields)});
    @if {@sampleBody.isPageStreaming}
      {@sampleBody.outputTypeName} {@sampleBody.outputVarName};
      do {
        {@sampleBody.outputVarName} = {@sampleBody.inputVarName}.execute();
        if ({@sampleBody.outputVarName}.{@sampleBody.resourceGetterName}() == null) {
          continue;
        }
        @if {@sampleBody.isResourceMap}
          for ({@sampleBody.resourceTypeName} item : response.{@sampleBody.resourceGetterName}().entrySet()) {
            System.out.println(item.getKey() + ": " + item.getValue());
          }
        @else
          for ({@sampleBody.resourceTypeName} item : response.{@sampleBody.resourceGetterName}()) {
            System.out.println(item);
          }
        @end
      } while ({@sampleBody.outputVarName}.getNextPageToken() != null);
    @else
      @if {@sampleBody.hasOutput}
        {@sampleBody.outputTypeName} {@sampleBody.outputVarName} = {@sampleBody.inputVarName}.execute();
        System.out.println({@sampleBody.outputVarName});
      @else
        {@sampleBody.inputVarName}.execute();
      @end
    @end
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
@end

@private callChain(resources)
  @join resource : resources on "()."
    {@resource}
  @end
@end

@private paramList(fields)
  @join field : fields on ", "
    {@field.name}
  @end
@end