@extends "go/header.snip"

@snippet generate(class)
  package main

  // BEFORE RUNNING:
  // ---------------
  // 1. If not already done, enable the {@class.apiTitle}
  //    and check the quota for your project at
  //    https://console.developers.google.com/apis/api/{@class.apiName}
  @switch class.auth.type
  @case "APPLICATION_DEFAULT_CREDENTIALS"
    // 2. This sample uses Application Default Credentials for authentication.
    //    If not already done, install the gcloud CLI from
    //    https://cloud.google.com/sdk/ and run
    //    `gcloud beta auth application-default login`
    // 3. Install and update the Go dependencies by running `go get -u` in the
    //    project directory.
  @default
    // 2. Install and update the Go dependencies by running `go get -u` in the
    //    project directory.
  @end

  import (
    {@imports(class.imports)}
  )

  {@mainFunc(class)}
  @if class.auth.type != "APPLICATION_DEFAULT_CREDENTIALS"

    {@getClientFunc(class)}
  @end
@end

@private mainFunc(class)
  func main() {
    {@class.contextVarName} := context.Background()

    @switch class.auth.type
    @case "APPLICATION_DEFAULT_CREDENTIALS"
      {@class.clientVarName}, err := google.DefaultClient({@class.contextVarName}, {@class.servicePackageName}.CloudPlatformScope)
    @default
      {@class.clientVarName}, err := {@class.getClientFuncName}({@class.contextVarName})
    @end
    if err != nil {
      log.Fatal(err)
    }

    {@class.serviceVarName}, err := {@class.servicePackageName}.New({@class.clientVarName})
    if err != nil {
      log.Fatal(err)
    }

    @join field : class.fields if class.fields
      @if field.description
        @join line : util.getDocLines(field.description, 100)
          // {@line}
        @end


      @end
      {@field.name} := {@field.defaultValue}  // TODO: Update placeholder value.
      @if field.example
        // {@field.example}
      @end

    @end
    @if class.hasRequestBody
      {@class.requestBodyVarName} := &{@class.servicePackageName}.{@class.requestBodyTypeName}{
        @if class.methodVerb == "PATCH"
          // TODO: Add desired fields of the request body to be changed. Only assigned
          // fields will be changed.
        @else
          // TODO: Add desired fields of the request body.
        @end
      }

    @end
    @if class.hasMediaUpload
      // TODO: Add desired media content for upload. For more information, see:
      // https://godoc.org/google.golang.org/api/{@class.apiName}/{@class.apiVersion}

    @end
    @if class.isPageStreaming
      {@class.requestVarName} := {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@paramList(class.fieldVarNames)})
      if err := {@class.requestVarName}.Pages({@class.contextVarName}, func({@class.pageStreaming.pageVarName} *{@class.servicePackageName}.{@class.responseTypeName}) error {
        @if class.pageStreaming.isResourceRepeated
          @if class.pageStreaming.isResourceMap
            for {@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.resourceValueVarName} := range {@class.pageStreaming.pageVarName}.{@class.pageStreaming.resourceFieldName} {
              // TODO: Change code below to process each ({@class.pageStreaming.resourceKeyVarName}: {@class.pageStreaming.resourceValueVarName}) element:
              fmt.Printf("%v: %#v\n", {@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.resourceValueVarName})
            }
            return nil
          @else
            for _, {@class.pageStreaming.resourceVarName} := range page.{@class.pageStreaming.resourceFieldName} {
              // TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` resource:
              fmt.Printf("%#v\n", {@class.pageStreaming.resourceVarName})
            }
            return nil
          @end
        @else
          // TODO: Change code below to process each `page.{@class.pageStreaming.resourceFieldName}` resource:
          fmt.Printf("%#v\n", page.{@class.pageStreaming.resourceFieldName})

          return nil
        @end
      }); err != nil {
        log.Fatal(err)
      }
    @else
      @if class.hasMediaDownload
        // TODO: Use `Download` in place of `Do` below to download media content. For more information, see:
        // https://godoc.org/google.golang.org/api/{@class.apiName}/{@class.apiVersion}#{@class.requestTypeName}.Download

      @end
      @if class.hasResponse
        {@class.responseVarName}, err := {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@paramList(class.fieldVarNames)}).Context({@class.contextVarName}).Do()
        if err != nil {
          log.Fatal(err)
        }

        // TODO: Change code below to process the `{@class.responseVarName}` object:
        fmt.Printf("%#v\n", {@class.responseVarName})
      @else
        if err := {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@paramList(class.fieldVarNames)}).Context({@class.contextVarName}).Do(); err != nil {
          log.Fatal(err)
        }
      @end
    @end
  }
@end

@private getClientFunc(class)
  func {@class.getClientFuncName}({@class.contextVarName} context.Context) (*http.Client, error) {
    // TODO: Change placeholder below to get authentication credentials. See:
    // {@class.auth.instructionsUrl}
    @if class.auth.type != "API_KEY"
      //
      @if class.auth.isScopesSingular
        // Authorize using the following scope:
      @else
        // Authorize using the following scopes:
      @end
      @join scopeConst : class.auth.scopeConsts
        //    {@class.servicePackageName}.{@scopeConst}
      @end
    @end
    return nil, errors.New("not implemented")
  }
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "."
    {@resource}
  @end
@end

@private paramList(fieldVarNames)
  @join fieldVarName : fieldVarNames on ", "
    {@fieldVarName}
  @end
@end
