@extends "go/header.snip"

@snippet generateFilename(service)
    {@context.getApiConfig.getPackageName}/{@context.getReducedServiceName(service)}_client_example_test.go
@end

@snippet generateClass(service, body)
    {@headerComment()}

    // AUTO-GENERATED CODE. DO NOT EDIT.

    package {@context.getPackageName}_test

    {@importSection(service)}

    {@body}
@end

@private importSection(service)
    import (
    @join import : context.getTestImports(service)
    {@import}
    @end
    )
@end

@snippet generateBody(service)
    func ExampleNew{@context.getClientName(service)}() {
        ctx := context.Background()
        c, err := {@context.getPackageName}.New{@context.getClientName(service)}(ctx)
        if err != nil {
            // TODO: Handle error.
        }
        // TODO: Use client.
        _ = c
    }
    @join method : service.getMethods
        @let methodName = method.getSimpleName, \
             inTypeName = context.messageTypeName(method.getInputType), \
             outTypeName = context.typeName(method.getOutputType), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             isPageStreaming = methodConfig.isPageStreaming

            func Example{@context.getClientName(service)}_{@method.getSimpleName}() {
                ctx := context.Background()
                c, err := {@context.getPackageName}.New{@context.getClientName(service)}(ctx)
                if err != nil {
                    // TODO: Handle error.
                }

                req := &{@inTypeName}{
                    // TODO: Fill request struct fields.
                }
                @if {@context.isEmpty(method.getOutputType)}
                    err = c.{@method.getSimpleName}(ctx, req)
                    if err != nil {
                        // TODO: Handle error.
                    }
                @else
                    @if {@isPageStreaming}
                        @let pageStreaming = methodConfig.getPageStreaming(), \
                             resourceFieldTypeName = context.getResourceTypeName(pageStreaming.getResourcesField())
                            it := c.{@method.getSimpleName}(ctx, req)
                            for {
                                resp, err := it.Next()
                                if err != nil {
                                    // TODO: Handle error.
                                    break
                                }
                                // TODO: Use resp.
                                _ = resp
                            }
                        @end
                    @else
                        resp, err := c.{@method.getSimpleName}(ctx, req)
                        if err != nil {
                            // TODO: Handle error.
                        }
                        // TODO: Use resp.
                        _ = resp
                    @end
                @end
        }
        @end
    @end
@end
