@extends "go/header.snip"

@snippet generate(view)
    {@headerComment()}

    package {@view.localPackageName}_test

    import (
        @join imp : view.imports
            {@imp}
        @end
    )

    func Example{@view.clientConstructorName}() {
        ctx := context.Background()
        c, err := {@view.localPackageName}.{@view.clientConstructorName}(ctx)
        if err != nil {
            // TODO: Handle error.
        }
        // TODO: Use client.
        _ = c
    }

    @join method : view.apiMethods
        @if method.isPageStreaming
            {@pageStreamingMethod(view, method)}
        @else
            @if method.hasReturnValue
                {@simpleMethod(view, method)}
            @else
                {@emptyReturnMethod(view, method)}
            @end
        @end


    @end
@end

@private simpleMethod(view, method)
    func Example{@view.clientName}_{@method.name}() {
        {@methodInit(view, method)}
        resp, err := c.{@method.name}(ctx, req)
        if err != nil {
            // TODO: Handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
@end

@private emptyReturnMethod(view, method)
    func Example{@view.clientName}_{@method.name}() {
        {@methodInit(view, method)}
        err = c.{@method.name}(ctx, req)
        if err != nil {
            // TODO: Handle error.
        }
    }
@end

@private pageStreamingMethod(view, method)
    func Example{@view.clientName}_{@method.name}() {
        {@methodInit(view, method)}
        it := c.{@method.name}(ctx, req)
        for {
            resp, err := it.Next()
            if err != nil {
                // TODO: Handle error.
                break
            }
            // TODO: Use resp.
            _ = resp
        }
    }
@end

@private methodInit(view, method)
    ctx := context.Background()
    c, err := {@view.localPackageName}.{@view.clientConstructorName}(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := {@method.apiRequestTypeConstructor}{
        // TODO: Fill request struct fields.
    }
@end
