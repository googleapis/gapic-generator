@extends "common.snip"

@snippet generateFilename(service)
    {@context.getApiConfig().getPackageName()}/{@context.getReducedServiceName(service)}/client.go
@end

@snippet generateClass(service, body)
    {@headerComment(editingInstruction(service))}

    // AUTO-GENERATED DOCUMENTATION AND SERVICE -- see instructions at the top of the file for editing.

    @join commentLine : context.comments(service)
        {@commentLine}
    @end
    package {@context.upperCamelToLowerUnderscore(service.getSimpleName)}

    {@importSection(service)}

    {@body}
@end

@private editingInstruction(service)
    // EDITING INSTRUCTIONS
    // This file was generated from the file
    // https://github.com/googleapis/blob/master/{@service.getFile().getSimpleName()}
    // and updates to that file get reflected here through a refresh process.
    // For the short term, the refresh process will only be runnable by Google engineers.
    // Manual additions are allowed because the refresh process performs
    // a 3-way merge in order to preserve those manual additions. In order to not
    // break the refresh process, only certain types of modifications are
    // allowed.
    //
    // Only additional documentation of the doc comment is allowed.
    // Please put the additional comment at the end.
    //
    // Additional new methods or new features can be added in additional files
    // in the same directory.
    //
    // Happy editing!
@end

@private importSection(service)
    import (
    @join import : context.getImports(service)
    {@import}
    @end
    )
@end

@snippet generateBody(service)
    {@globals(service)}

    // Client is a client for interacting with {@service.getSimpleName}.
    type Client struct {
        // The connection to the service.
        conn *grpc.ClientConn

        // The gRPC API client.
        client {@context.getServiceClientName(service)}

        // The map from the method name to the default call options for the method of this service.
        callOptions map[string][]gax.CallOption

        // The metadata to be sent with each request.
        metadata map[string][]string
    }

    {@constructor(service)}
    {@pathTemplateMethods(service)}
    {@methods(service)}

    {@iterators(service)}
@end

@private globals(service)
    const (
        gapicNameVersion = "gapic/0.1.0"
    )

    var (
        @if {context.hasPageStreamingMethod(service)}
            // Done is returned by iterators on successful completion.
            Done = errors.New("iterator done")
        @end

        @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
            {@pathTemplateVarName(collectionConfig)} = gax.MustCompilePathTemplate("{@collectionConfig.getNamePattern}")
        @end
    )

    func defaultClientSettings() gax.ClientSettings {
        return gax.ClientSettings{
            AppName: "gax",
            AppVersion: gax.Version,
            Endpoint: "{@context.getServiceConfig.getServiceAddress(service)}:{@context.getServiceConfig.getServicePort()}",
            Scopes: []string{
                @join scope : context.getServiceConfig.getAuthScopes(service)
                    "{@scope}",
                @end
            },
            CallOptions: map[string][]gax.CallOption{
                @join method : service.getMethods
                    @let methodName = method.getSimpleName, \
                         methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
                         retryParamsMethodName = context.lowerUnderscoreToLowerCamel(methodConfig.getRetrySettingsConfigName), \
                         retryCodesMethodName = context.lowerUnderscoreToUpperCamel(methodConfig.getRetryCodesConfigName)
                        "{@methodName}": append([]gax.CallOption{with{@retryCodesMethodName}RetryCodes()}, {@retryParamsMethodName}RetryOptions()...),
                    @end
                @end
            },
        }
    }

    @join retryCodesDef : context.entrySet(context.getApiConfig.getInterfaceConfig(service).getRetryCodesDefinition)

    func with{@context.lowerUnderscoreToUpperCamel(retryCodesDef.getKey)}RetryCodes() gax.CallOption {
        return gax.WithRetryCodes([]codes.Code{
            @join code : retryCodesDef.getValue
                codes.{@context.upperUnderscoreToUpperCamel(code.toString())},
            @end
        })
    }
    @end
    @join retryDef : context.entrySet(context.getApiConfig.getInterfaceConfig(service).getRetrySettingsDefinition)

    func {@context.lowerUnderscoreToLowerCamel(retryDef.getKey)}RetryOptions() []gax.CallOption {
        return []gax.CallOption{
            gax.WithTimeout({@retryDef.getValue.getTotalTimeout.getMillis()}*time.Millisecond),
            gax.WithDelayTimeoutSettings({@retryDef.getValue.getInitialRetryDelay.getMillis}*time.Millisecond, {@retryDef.getValue.getMaxRetryDelay.getMillis}*time.Millisecond, {@retryDef.getValue.getRetryDelayMultiplier}),
            gax.WithRPCTimeoutSettings({@retryDef.getValue.getInitialRpcTimeout.getMillis}*time.Millisecond, {@retryDef.getValue.getMaxRpcTimeout.getMillis}*time.Millisecond, {@retryDef.getValue.getRpcTimeoutMultiplier}),
        }
    }
    @end
@end

@private constructor(service)
    // NewClient creates a new API service client.
    func NewClient(ctx context.Context, opts ...gax.ClientOption) (*Client, error) {
        s := defaultClientSettings()
        for _, opt := range opts {
            opt.Resolve(&s)
        }
        conn, err := gax.DialGRPC(ctx, s)
        if err != nil {
            return nil, err
        }
        return &Client {
            conn: conn,
            client: {@context.getServiceClientConstructorName(service)}(conn),
            callOptions: s.CallOptions,
            metadata: map[string][]string{
                "x-goog-api-client": []string{fmt.Sprintf("%s/%s %s gax/%s go/%s", s.AppName, s.AppVersion, gapicNameVersion, gax.Version, runtime.Version())},
            },
        }, nil
    }

    // Close closes the connection to the API service. The user should invoke this when
    // the client is no longer required.
    func (client *Client) Close() error {
        return client.conn.Close()
    }
@end

@private pathTemplateVarName(collectionConfig)
    {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)}PathTemplate
@end

@private createResourceDocParams(collectionConfig)
    @join param : collectionConfig.getNameTemplate.vars() on " and "
        the {@context.lowerUnderscoreToLowerCamel(param)}
    @end
@end

@private pathParams(params)
    @join param : params on ", "
        {@context.lowerUnderscoreToLowerCamel(param)} string
    @end
@end

# PathTemplates are currently methods of the service. They don't have to be, but
# this would be good to shorten the method names, and normally the users of these
# methods would have the service instance already.
@private pathTemplateMethods(service)

    // Path templates.
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        @let pathTypeName = context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName), \
             humanReadableName = collectionConfig.getEntityName.replaceAll("_", " "), \
             methodReceiver = context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)

            // {@pathTypeName}Path returns the path for the {@humanReadableName} resource.
            func {@pathTypeName}Path({@pathParams(collectionConfig.getNameTemplate.vars())}) string {
                path, err := {@pathTemplateVarName(collectionConfig)}.Instantiate(map[string]string{
                    @join param : collectionConfig.getNameTemplate.vars()
                    "{@param}": {@context.lowerUnderscoreToLowerCamel(param)},
                    @end
                })
                if err != nil {
                    panic(err)
                }
                return path
            }
        @end
    @end
@end

@private callOptions(methodName)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["{@methodName}"]...)
    callOpts = append(callOpts, opts...)
@end

@private methods(service)
    @join method : service.getMethods
        @let methodName = method.getSimpleName, \
             inTypeName = context.typeName(method.getInputType), \
             outTypeName = context.typeName(method.getOutputType), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             isPageStreaming = methodConfig.isPageStreaming
            @if {@isPageStreaming}
                @let pageStreaming = methodConfig.getPageStreaming(), \
                     iteratorTypeName = context.getIteratorTypeName(pageStreaming), \
                     resourceFieldName = context.lowerUnderscoreToUpperCamel(pageStreaming.getResourcesField().getSimpleName), \
                     requestTokenFieldName = context.lowerUnderscoreToUpperCamel(pageStreaming.getRequestTokenField().getSimpleName), \
                     responseTokenFieldName = context.lowerUnderscoreToUpperCamel(pageStreaming.getResponseTokenField().getSimpleName), \
                     tokenZeroValue = context.zeroValue(pageStreaming.getRequestTokenField().getType)

                    {@methodComment(method, methodName)}
                    func (client *Client) {@methodName}(ctx context.Context, req {@inTypeName}, opts ...gax.CallOption) (*{@iteratorTypeName}, error) {
                        ctx = metadata.NewContext(ctx, client.metadata)
                        {@callOptions(methodName)}

                        iterator := &{@iteratorTypeName}{}
                        iterator.apiCall = func() error {
                            if iterator.atLastPage {
                                return Done
                            }
                            var resp {@outTypeName}
                            err := gax.Invoke(ctx, func (c context.Context) error {
                                var err error
                                req.{@requestTokenFieldName} = iterator.nextPageToken
                                resp, err = client.client.{@methodName}(c, req)
                                return err
                            }, callOpts...)
                            if err != nil {
                                return err
                            }
                            if resp.{@responseTokenFieldName} == {@tokenZeroValue} {
                                iterator.atLastPage = true
                            } else {
                                iterator.nextPageToken = resp.{@responseTokenFieldName}
                            }
                            iterator.items = resp.{@resourceFieldName}
                            return nil
                        }
                        return iterator, nil
                    }

                @end
            @else

                {@methodComment(method, methodName)}
                @if {@context.isEmpty(method.getOutputType)}
                    func (client *Client) {@methodName}(ctx context.Context, req {@inTypeName}, opts ...gax.CallOption) error {
                        ctx = metadata.NewContext(ctx, client.metadata)
                        {@callOptions(methodName)}
                        err := gax.Invoke(ctx, func (c context.Context) error {
                            var err error
                            _, err = client.client.{@methodName}(c, req)
                            return err
                        }, callOpts...)
                        return err
                    }
                @else
                    func (client *Client) {@methodName}(ctx context.Context, req {@inTypeName}, opts ...gax.CallOption) ({@outTypeName}, error) {
                        ctx = metadata.NewContext(ctx, client.metadata)
                        {@callOptions(methodName)}
                        var resp {@outTypeName}
                        err := gax.Invoke(ctx, func (c context.Context) error {
                            var err error
                            resp, err = client.client.{@methodName}(c, req)
                            return err
                        }, callOpts...)
                        if err != nil {
                            return nil, err
                        }
                        return resp, nil
                    }
                @end

            @end
        @end
    @end
@end

@private methodComment(method, methodName)
    // AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

    @join commentLine : context.getMethodComments(method, methodName)
        {@commentLine}
    @end
@end

@private iterators(service)
    // Iterators.
    //
    @join pageStreaming : context.getPageStreamingConfigs(service)
        @let iteratorTypeName = context.getIteratorTypeName(pageStreaming), \
             tokenType = context.getNextPageTokenType(service, pageStreaming), \
             resourceFieldType = context.getResourceTypeName(pageStreaming.getResourcesField)

            // {@iteratorTypeName} manages a stream of {@resourceFieldType}.
            type {@iteratorTypeName} struct {
                // The current page data.
                items         []{@resourceFieldType}
                atLastPage    bool
                currentIndex  int
                nextPageToken {@tokenType}
                apiCall       func() error
            }

            // NextPage moves to the next page and updates its internal data.
            // It returns Done if no more pages exist.
            func (iterator *{@iteratorTypeName}) NextPage() ([]{@resourceFieldType}, error) {
                err := iterator.apiCall()
                if err != nil {
                    return nil, err
                }
                return iterator.items, err
            }

            // Next returns the next element in the stream. It returns Done at
            // the end of the stream.
            func (iterator *{@iteratorTypeName}) Next() ({@resourceFieldType}, error) {
                for iterator.currentIndex >= len(iterator.items) {
                    _, err := iterator.NextPage()
                    if err != nil {
                        return nil, err
                    }
                    iterator.currentIndex = 0
                }
                result := iterator.items[iterator.currentIndex]
                iterator.currentIndex++
                return result, nil
            }

            // SetPageToken sets the next page token to be retrieved. Note, it
            // does not retrieve the next page, or modify the cached page. If
            // Next is called, there is no guarantee that the result returned
            // will be from the next page until NextPage is called.
            func (iterator *{@iteratorTypeName}) SetPageToken(token {@tokenType}) {
                iterator.nextPageToken = token
            }

            // NextPageToken returns the next page token.
            func (iterator *{@iteratorTypeName}) NextPageToken() {@tokenType} {
                return iterator.nextPageToken
            }
        @end
    @end
@end
