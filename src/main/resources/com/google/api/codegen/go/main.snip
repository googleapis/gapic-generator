@extends "go/header.snip"

@snippet generateFilename(service)
    {@context.getApiConfig.getPackageName}/{@context.getReducedServiceName(service)}_client.go
@end

@snippet generateClass(service, body)
    {@headerComment()}

    // AUTO-GENERATED CODE. DO NOT EDIT.

    package {@context.getPackageName}

    {@importSection(service)}

    {@body}
@end

@private importSection(service)
    import (
    @join import : context.getImports(service)
    {@import}
    @end
    )
@end

@snippet generateBody(service)
    {@globals(service)}

    @let clientName = context.getClientName(service)
        // {@clientName} is a client for interacting with {@service.getSimpleName}.
        type {@clientName} struct {
            // The connection to the service.
            conn *grpc.ClientConn

            // The gRPC API client.
            client {@context.getServiceClientName(service)}
    @end

        // The map from the method name to the default call options for the method of this service.
        callOptions map[string][]gax.CallOption

        // The metadata to be sent with each request.
        metadata map[string][]string
    }

    {@constructor(service)}
    {@pathTemplateMethods(service)}
    {@methods(service)}

    {@iterators(service)}
@end

@private globals(service)
    var (
        @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
            {@pathTemplateVarName(service, collectionConfig)} = gax.MustCompilePathTemplate("{@collectionConfig.getNamePattern}")
        @end
    )

    func default{@context.getClientName(service)}Settings() gax.ClientSettings {
        @join retryCodesDef : context.entrySet(context.getApiConfig.getInterfaceConfig(service).getRetryCodesDefinition) if retryCodesDef.getValue
            with{@context.lowerUnderscoreToUpperCamel(retryCodesDef.getKey)}RetryCodes := gax.WithRetryCodes(
                []codes.Code{
                    @join code : retryCodesDef.getValue
                        codes.{@context.upperUnderscoreToUpperCamel(code.toString())},
                    @end
                },
            )
        @end
        @join retryDef : context.entrySet(context.getApiConfig.getInterfaceConfig(service).getRetrySettingsDefinition)
            {@context.lowerUnderscoreToLowerCamel(retryDef.getKey)}RetryOptions := []gax.CallOption{
                gax.WithTimeout({@retryDef.getValue.getTotalTimeout.getMillis()}*time.Millisecond),
                gax.WithDelayTimeoutSettings({@retryDef.getValue.getInitialRetryDelay.getMillis}*time.Millisecond, {@retryDef.getValue.getMaxRetryDelay.getMillis}*time.Millisecond, {@retryDef.getValue.getRetryDelayMultiplier}),
                gax.WithRPCTimeoutSettings({@retryDef.getValue.getInitialRpcTimeout.getMillis}*time.Millisecond, {@retryDef.getValue.getMaxRpcTimeout.getMillis}*time.Millisecond, {@retryDef.getValue.getRpcTimeoutMultiplier}),
            }
        @end
        return gax.ClientSettings{
            AppName: "gax",
            AppVersion: gax.Version,
            Endpoint: "{@context.getServiceConfig.getServiceAddress(service)}:{@context.getServiceConfig.getServicePort()}",
            Scopes: []string{
                @join scope : context.getServiceConfig.getAuthScopes(service)
                    "{@scope}",
                @end
            },
            CallOptions: map[string][]gax.CallOption{
                @join method : service.getMethods
                    @let methodName = method.getSimpleName, \
                         methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
                         retryParamsMethodName = context.lowerUnderscoreToLowerCamel(methodConfig.getRetrySettingsConfigName), \
                         retryCodesMethodName = context.lowerUnderscoreToUpperCamel(methodConfig.getRetryCodesConfigName)
                        @if {@context.hasEmptyRetryCodes(service, methodConfig)}
                            "{@methodName}": {@retryParamsMethodName}RetryOptions,
                        @else
                            "{@methodName}": append([]gax.CallOption{with{@retryCodesMethodName}RetryCodes}, {@retryParamsMethodName}RetryOptions...),
                        @end
                    @end
                @end
            },
        }
    }
@end

@private constructor(service)
    @let clientName = context.getClientName(service)
        // New{@clientName} creates a new {@context.getReducedServiceName(service)} service client.
        //
        @join commentLine : context.comments(service)
            {@commentLine}
        @end
        func New{@clientName}(ctx context.Context, opts ...gax.ClientOption) (*{@clientName}, error) {
            s := default{@clientName}Settings()
            for _, opt := range opts {
                opt.Resolve(&s)
            }
            conn, err := gax.DialGRPC(ctx, s)
            if err != nil {
                return nil, err
            }
            return &{@clientName} {
                conn: conn,
                client: {@context.getServiceClientConstructorName(service)}(conn),
                callOptions: s.CallOptions,
                metadata: map[string][]string{
                    "x-goog-api-client": []string{fmt.Sprintf("%s/%s %s gax/%s go/%s", s.AppName, s.AppVersion, gapicNameVersion, gax.Version, runtime.Version())},
                },
            }, nil
        }

        // Connection returns the client's connection to the API service.
        func (c *{@clientName}) Connection() *grpc.ClientConn {
            return c.conn
        }

        // Close closes the connection to the API service. The user should invoke this when
        // the client is no longer required.
        func (c *{@clientName}) Close() error {
            return c.conn.Close()
        }
    @end
@end

@private pathTemplateVarName(service, collectionConfig)
    @let prefix = context.lowerUnderscoreToLowerCamel(context.getReducedServiceName(service)), \
         entityName = @context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName)
        {@prefix}{@entityName}PathTemplate
    @end
@end

@private createResourceDocParams(collectionConfig)
    @join param : collectionConfig.getNameTemplate.vars() on " and "
        the {@context.lowerUnderscoreToLowerCamel(param)}
    @end
@end

@private pathParams(params)
    @join param : params on ", "
        {@context.lowerUnderscoreToLowerCamel(param)} string
    @end
@end

# PathTemplates are currently methods of the service. They don't have to be, but
# this would be good to shorten the method names, and normally the users of these
# methods would have the service instance already.
@private pathTemplateMethods(service)

    // Path templates.
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        @let pathTypeName = context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName), \
             humanReadableName = collectionConfig.getEntityName.replaceAll("_", " "), \
             methodReceiver = context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName), \
             prefix = context.lowerUnderscoreToUpperCamel(context.getReducedServiceName(service))

            // {@pathTypeName}Path returns the path for the {@humanReadableName} resource.
            func {@prefix}{@pathTypeName}Path({@pathParams(collectionConfig.getNameTemplate.vars())}) string {
                path, err := {@pathTemplateVarName(service, collectionConfig)}.Render(map[string]string{
                    @join param : collectionConfig.getNameTemplate.vars()
                    "{@param}": {@context.lowerUnderscoreToLowerCamel(param)},
                    @end
                })
                if err != nil {
                    panic(err)
                }
                return path
            }
        @end
    @end
@end

@private methods(service)
    @join method : service.getMethods
        @let methodName = method.getSimpleName, \
             inTypeName = context.typeName(method.getInputType), \
             outTypeName = context.typeName(method.getOutputType), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             isPageStreaming = methodConfig.isPageStreaming, \
             clientName = context.getClientName(service)
            @if {@isPageStreaming}
                @let pageStreaming = methodConfig.getPageStreaming(), \
                     iteratorTypeName = context.getIteratorTypeName(pageStreaming), \
                     resourceFieldName = context.lowerUnderscoreToUpperCamel(pageStreaming.getResourcesField().getSimpleName), \
                     hasPageSizeField = pageStreaming.hasPageSizeField(), \
                     requestTokenFieldName = context.lowerUnderscoreToUpperCamel(pageStreaming.getRequestTokenField().getSimpleName), \
                     responseTokenFieldName = context.lowerUnderscoreToUpperCamel(pageStreaming.getResponseTokenField().getSimpleName), \
                     tokenZeroValue = context.zeroValue(pageStreaming.getRequestTokenField().getType)

                    {@methodComment(method, methodName)}
                    func (c *{@clientName}) {@methodName}(ctx context.Context, req {@inTypeName}) *{@iteratorTypeName} {
                        ctx = metadata.NewContext(ctx, c.metadata)
                        it := &{@iteratorTypeName}{}
                        it.apiCall = func() error {
                            var resp {@outTypeName}
                            err := gax.Invoke(ctx, func (ctx context.Context) error {
                                var err error
                                req.{@requestTokenFieldName} = it.nextPageToken
                                @if hasPageSizeField
                                    req.{@context.lowerUnderscoreToUpperCamel(pageStreaming.getPageSizeField().getSimpleName())} = it.pageSize
                                @end
                                resp, err = c.client.{@methodName}(ctx, req)
                                return err
                            }, c.callOptions["{@methodName}"]...)
                            if err != nil {
                                return err
                            }
                            if resp.{@responseTokenFieldName} == {@tokenZeroValue} {
                                it.atLastPage = true
                            }
                            it.nextPageToken = resp.{@responseTokenFieldName}
                            it.items = resp.{@resourceFieldName}
                            return nil
                        }
                        return it
                    }

                @end
            @else

                {@methodComment(method, methodName)}
                @if {@context.isEmpty(method.getOutputType)}
                    func (c *{@clientName}) {@methodName}(ctx context.Context, req {@inTypeName}) error {
                        ctx = metadata.NewContext(ctx, c.metadata)
                        err := gax.Invoke(ctx, func (ctx context.Context) error {
                            var err error
                            _, err = c.client.{@methodName}(ctx, req)
                            return err
                        }, c.callOptions["{@methodName}"]...)
                        return err
                    }
                @else
                    func (c *{@clientName}) {@methodName}(ctx context.Context, req {@inTypeName}) ({@outTypeName}, error) {
                        ctx = metadata.NewContext(ctx, c.metadata)
                        var resp {@outTypeName}
                        err := gax.Invoke(ctx, func (ctx context.Context) error {
                            var err error
                            resp, err = c.client.{@methodName}(ctx, req)
                            return err
                        }, c.callOptions["{@methodName}"]...)
                        if err != nil {
                            return nil, err
                        }
                        return resp, nil
                    }
                @end

            @end
        @end
    @end
@end

@private methodComment(method, methodName)
    @join commentLine : context.getMethodComments(method, methodName)
        {@commentLine}
    @end
@end

@private iterators(service)
    // Iterators.
    //
    @join pageStreaming : context.getPageStreamingConfigs(service)
        @let iteratorTypeName = context.getIteratorTypeName(pageStreaming), \
             tokenType = context.getNextPageTokenType(service, pageStreaming), \
             resourceFieldType = context.getResourceType(pageStreaming.getResourcesField), \
             resourceFieldTypeName = context.getResourceTypeName(pageStreaming.getResourcesField), \
             hasPageSizeField = pageStreaming.hasPageSizeField()

            // {@iteratorTypeName} manages a stream of {@resourceFieldTypeName}.
            type {@iteratorTypeName} struct {
                // The current page data.
                items         []{@resourceFieldTypeName}
                atLastPage    bool
                currentIndex  int
                @if hasPageSizeField
                    pageSize      int32
                @end
                nextPageToken {@tokenType}
                apiCall       func() error
            }

            // NextPage moves to the next page and updates its internal data.
            // On completion, the last page is returned with Done.
            func (it *{@iteratorTypeName}) NextPage() ([]{@resourceFieldTypeName}, error) {
                if it.atLastPage {
                    // We already returned Done with the last page of items. Continue to
                    // return Done, but with no items.
                    return nil, Done
                }
                if err := it.apiCall(); err != nil {
                    return nil, err
                }
                if it.atLastPage {
                    return it.items, Done
                }
                return it.items, nil
            }

            // Next returns the next element in the stream. It returns Done at
            // the end of the stream.
            func (it *{@iteratorTypeName}) Next() ({@resourceFieldTypeName}, error) {
                for it.currentIndex >= len(it.items) {
                    if it.atLastPage {
                        return nil, Done
                    }
                    if err := it.apiCall(); err != nil {
                        return {@context.zeroValue(resourceFieldType)}, err
                    }
                    it.currentIndex = 0
                }
                result := it.items[it.currentIndex]
                it.currentIndex++
                return result, nil
            }

            @if hasPageSizeField
                // PageSize returns the maximum size of the next page to be
                // retrieved.
                func (it *{@iteratorTypeName}) PageSize() int32 {
                    return it.pageSize
                }

                // SetPageSize sets the maximum size of the next page to be
                // retrieved.
                func (it *{@iteratorTypeName}) SetPageSize(pageSize int32) {
                    it.pageSize = pageSize
                }

            @end
            // SetPageToken sets the next page token to be retrieved. Note, it
            // does not retrieve the next page, or modify the cached page. If
            // Next is called, there is no guarantee that the result returned
            // will be from the next page until NextPage is called.
            func (it *{@iteratorTypeName}) SetPageToken(token {@tokenType}) {
                it.nextPageToken = token
            }

            // NextPageToken returns the next page token.
            func (it *{@iteratorTypeName}) NextPageToken() {@tokenType} {
                return it.nextPageToken
            }
        @end
    @end
@end
