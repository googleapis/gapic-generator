@extends "go/header.snip"

@snippet generate(view)
    {@headerComment(view.fileHeader)}

    package {@view.fileHeader.localPackageName}

    import (
        {@renderImportSection(view.fileHeader.importSection)}
    )

    @if view.pathTemplates
        var (
            @join pathTemplate : view.pathTemplates
                {@pathTemplate.name} = gax.MustCompilePathTemplate("{@pathTemplate.pattern}")
            @end
        )
    @end

    // {@view.callOptionsTypeName} contains the retry settings for each method of {@view.clientTypeName}.
    type {@view.callOptionsTypeName} struct {
        @join settings : view.callSettings
            {@settings.methodName} []gax.CallOption
        @end
    }

    func {@view.defaultClientOptionFunctionName}() []option.ClientOption {
        return []option.ClientOption{
            option.WithEndpoint("{@view.serviceAddress}:{@view.servicePort}"),
            option.WithScopes(
                @join scope : view.authScopes
                    "{@scope}",
                @end
            ),
        }
    }

    func {@view.defaultCallOptionFunctionName}() *{@view.callOptionsTypeName} {
        retry := map[[2]string][]gax.CallOption{
            @join def : view.retryPairDefinitions
              {"{@def.name.retrySettingsConfigName}", "{@def.name.retryCodesConfigName}"}: {
                  gax.WithRetry(func() gax.Retryer {
                      return gax.OnCodes([]codes.Code{
                          @join code : def.retryCodes
                              codes.{@code},
                          @end
                      }, gax.Backoff{
                          Initial: {@def.params.getInitialRetryDelay.getMillis}*time.Millisecond,
                          Max: {@def.params.getMaxRetryDelay.getMillis}*time.Millisecond,
                          Multiplier: {@def.params.getRetryDelayMultiplier},
                      })
                  }),
              },
            @end
        }
        return &{@view.callOptionsTypeName}{
            @join settings : view.callSettings
                {@settings.methodName}: retry[[2]string{"{@settings.retryParamsName}", "{@settings.retryCodesName}"}],
            @end
        }
    }

    // {@view.clientTypeName} is a client for interacting with {@view.serviceOriginalName}.
    type {@view.clientTypeName} struct {
        // The connection to the service.
        conn *grpc.ClientConn

        // The gRPC API client.
        @join stub : view.stubs
            {@stub.name} {@stub.grpcClientTypeName}
        @end

        // The call options for this service.
        CallOptions *{@view.callOptionsTypeName}

        // The metadata to be sent with each request.
        xGoogHeader string
    }

    // {@view.clientConstructorName} creates a new {@view.servicePhraseName} client.
    //
    // {@view.serviceDoc.firstLine}
    @join line : view.serviceDoc.remainingLines
        // {@line}
    @end
    func {@view.clientConstructorName}(ctx context.Context, opts ...option.ClientOption) (*{@view.clientTypeName}, error) {
        conn, err := transport.DialGRPC(ctx, append({@view.defaultClientOptionFunctionName}(), opts...)...)
        if err != nil {
            return nil, err
        }
        c := &{@view.clientTypeName} {
            conn: conn,
            CallOptions: {@view.defaultCallOptionFunctionName}(),

            @join stub : view.stubs
                {@stub.name}: {@stub.createStubFunctionName}(conn),
            @end
        }
        c.SetGoogleClientInfo()
        return c, nil
    }

    // Connection returns the client's connection to the API service.
    func (c *{@view.clientTypeName}) Connection() *grpc.ClientConn {
        return c.conn
    }

    // Close closes the connection to the API service. The user should invoke this when
    // the client is no longer required.
    func (c *{@view.clientTypeName}) Close() error {
        return c.conn.Close()
    }

    // SetGoogleClientInfo sets the name and version of the application in
    // the `x-goog-api-client` header passed on each request. Intended for
    // use by Google-written clients.
    func (c *{@view.clientTypeName}) SetGoogleClientInfo(keyval ...string) {
        kv := append([]string{"gl-go", version.Go()}, keyval...)
        kv = append(kv, "gapic", version.Repo, "gax", gax.Version, "grpc", "")
        c.xGoogHeader = gax.XGoogHeader(kv...)
    }

    @join getter : view.pathTemplateGetters
        // {@getter.name} returns the path for the {@getter.resourceName} resource.
        func {@getter.name}({@pathTemplateParams(getter.args)} string) string {
            path, err := {@getter.pathTemplateName}.Render(map[string]string{
                @join arg : getter.args
                    "{@arg.templateKey}": {@arg.name},
                @end
            })
            if err != nil {
                panic(err)
            }
            return path
        }

    @end

    @join resource : view.iamResources
        func (c *{@view.clientTypeName}) {@resource.resourceGetterFunctionName}({@resource.paramName} {@resource.resourceTypeName}) *iam.Handle {
            return iam.InternalNewHandle(c.Connection(), {@resource.paramName}.{@resource.fieldName})
        }

    @end

    @join method : view.apiMethods
        @join doc : method.doc.mainDocLines
            // {@doc}
        @end

        @switch method.grpcStreamingType
        @case "BidiStreaming"
            {@noRequestStreamMethod(view, method)}
        @case "ClientStreaming"
            {@noRequestStreamMethod(view, method)}
        @case "ServerStreaming"
            {@simpleMethod(view, method)}
        @case "NonStreaming"
            @switch method.type
            @case "PagedRequestObjectMethod"
                {@pageStreamingMethod(view, method)}
            @case "OperationRequestObjectMethod"
                {@lroMethod(view, method)}
            @case "RequestObjectMethod"
                @if method.hasReturnValue
                    {@simpleMethod(view, method)}
                @else
                    {@emptyReturnMethod(view, method)}
                @end
            @end
        @end

    @end

    @join iter : view.pageStreamingDescriptorClasses
        {@iterator(view, iter)}
    @end

    @join lro : view.lroDetailViews
        {@lroWrapper(view, lro)}
    @end
@end

@private simpleMethod(view, method)
    func (c *{@view.clientTypeName}) {@method.name}(ctx context.Context, req {@method.serviceRequestTypeName}) ({@method.responseTypeName}, error) {
        {@mergeMetadata()}
        var resp {@method.serviceResponseTypeName}
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            resp, err = c.{@method.stubName}.{@method.callableName}(ctx, req)
            return err
        }, c.CallOptions.{@method.settingsGetterName}...)
        if err != nil {
            return nil, err
        }
        return resp, nil
    }
@end

@private lroMethod(view, method)
    func (c *{@view.clientTypeName}) {@method.name}(ctx context.Context, req {@method.serviceRequestTypeName}) (*{@method.operationMethod.clientReturnTypeName}, error) {
        {@mergeMetadata()}
        var resp {@method.serviceResponseTypeName}
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            resp, err = c.{@method.stubName}.{@method.callableName}(ctx, req)
            return err
        }, c.CallOptions.{@method.name}...)
        if err != nil {
            return nil, err
        }
        return &{@method.operationMethod.clientReturnTypeName}{
            lro: longrunning.InternalNewOperation(c.Connection(), resp),
            xGoogHeader: c.xGoogHeader,
        }, nil
    }
@end

# Used for bidi and request GRPC streaming.
# The function is not accept a request, but otherwise the same with simpleMethod.
@private noRequestStreamMethod(view, method)
    func (c *{@view.clientTypeName}) {@method.name}(ctx context.Context) ({@method.responseTypeName}, error) {
        {@mergeMetadata()}
        var resp {@method.serviceResponseTypeName}
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            resp, err = c.{@method.stubName}.{@method.name}(ctx)
            return err
        }, c.CallOptions.{@method.settingsGetterName}...)
        if err != nil {
            return nil, err
        }
        return resp, nil
    }
@end

@private emptyReturnMethod(view, method)
    func (c *{@view.clientTypeName}) {@method.name}(ctx context.Context, req {@method.serviceRequestTypeName}) error {
        {@mergeMetadata()}
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            _, err = c.{@method.stubName}.{@method.callableName}(ctx, req)
            return err
        }, c.CallOptions.{@method.settingsGetterName}...)
        return err
    }
@end

@private pageStreamingMethod(view, method)
    func (c *{@view.clientTypeName}) {@method.name}(ctx context.Context, req {@method.serviceRequestTypeName}) *{@method.responseTypeName} {
        {@mergeMetadata()}
        it := &{@method.responseTypeName}{}
        it.InternalFetch = func(pageSize int, pageToken string) ([]{@method.listMethod.resourceTypeName}, string, error) {
            var resp {@method.serviceResponseTypeName}
            req.PageToken = pageToken
            if pageSize > math.MaxInt32 {
                req.PageSize = math.MaxInt32
            } else {
                req.PageSize = int32(pageSize)
            }
            err := gax.Invoke(ctx, func(ctx context.Context) error {
                var err error
                resp, err = c.{@method.stubName}.{@method.callableName}(ctx, req)
                return err
            }, c.CallOptions.{@method.settingsGetterName}...)
            if err != nil {
                return nil, "", err
            }
            return resp.{@method.listMethod.resourceFieldName}, resp.NextPageToken, nil
        }
        fetch := func(pageSize int, pageToken string) (string, error) {
            items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
            if err != nil {
                return "", err
            }
            it.items = append(it.items, items...)
            return nextPageToken, nil
        }
        it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
        return it
    }
@end

@private iterator(view, iter)
    // {@iter.typeName} manages a stream of {@iter.resourceTypeName}.
    type {@iter.typeName} struct {
        items    []{@iter.resourceTypeName}
        pageInfo *iterator.PageInfo
        nextFunc func() error

        // InternalFetch is for use by the Google Cloud Libraries only.
        // It is not part of the stable interface of this package.
        //
        // InternalFetch returns results from a single call to the underlying RPC.
        // The number of results is no greater than pageSize.
        // If there are no more results, nextPageToken is empty and err is nil.
        InternalFetch func(pageSize int, pageToken string) (results []{@iter.resourceTypeName}, nextPageToken string, err error)
    }

    // PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
    func (it *{@iter.typeName}) PageInfo() *iterator.PageInfo {
        return it.pageInfo
    }

    // Next returns the next result. Its second return value is iterator.Done if there are no more
    // results. Once Next returns Done, all subsequent calls will return Done.
    func (it *{@iter.typeName}) Next() ({@iter.resourceTypeName}, error) {
        var item {@iter.resourceTypeName}
        if err := it.nextFunc(); err != nil {
            return item, err
        }
        item = it.items[0]
        it.items = it.items[1:]
        return item, nil
    }

    func (it *{@iter.typeName}) bufLen() int {
        return len(it.items)
    }

    func (it *{@iter.typeName}) takeBuf() interface{} {
        b := it.items
        it.items = nil
        return b
    }

@end

@private lroWrapper(view, lro)
    @if lro.isEmptyOperation
        // {@lro.clientReturnTypeName} manages a long-running operation with no result.
    @else
        // {@lro.clientReturnTypeName} manages a long-running operation from {@lro.methodName}.
    @end

    type {@lro.clientReturnTypeName} struct {
        lro *longrunning.Operation

        // The metadata to be sent with each request.
        xGoogHeader string
    }

    // {@lro.constructorName} returns a new {@lro.clientReturnTypeName} from a given name.
    // The name must be that of a previously created {@lro.clientReturnTypeName}, possibly from a different process.
    func (c *{@view.clientTypeName}) {@lro.constructorName}(name string) *{@lro.clientReturnTypeName} {
        return &{@lro.clientReturnTypeName}{
            lro: longrunning.InternalNewOperation(c.Connection(), &longrunningpb.Operation{Name: name}),
            xGoogHeader: c.xGoogHeader,
        }
    }

    @if lro.isEmptyOperation
        // Wait blocks until the long-running operation is completed, returning any error encountered.
        //
        // See documentation of Poll for error-handling information.
        func (op *{@lro.clientReturnTypeName}) Wait(ctx context.Context) error {
            ctx = insertXGoog(ctx, op.xGoogHeader)
            return op.lro.Wait(ctx, nil)
        }

        // Poll fetches the latest state of the long-running operation.
        //
        // Poll also fetches the latest metadata, which can be retrieved by Metadata.
        //
        // If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
        // the operation has completed with failure, the error is returned and op.Done will return true.
        // If Poll succeeds and the operation has completed successfully, op.Done will return true.
        func (op *{@lro.clientReturnTypeName}) Poll(ctx context.Context) error {
            ctx = insertXGoog(ctx, op.xGoogHeader)
            return op.lro.Poll(ctx, nil)
        }
    @else
        // Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
        //
        // See documentation of Poll for error-handling information.
        func (op *{@lro.clientReturnTypeName}) Wait(ctx context.Context) (*{@lro.operationPayloadTypeName}, error) {
            var resp {@lro.operationPayloadTypeName}
            ctx = insertXGoog(ctx, op.xGoogHeader)
            if err := op.lro.Wait(ctx, &resp); err != nil {
                return nil, err
            }
            return &resp, nil
        }

        // Poll fetches the latest state of the long-running operation.
        //
        // Poll also fetches the latest metadata, which can be retrieved by Metadata.
        //
        // If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
        // the operation has completed with failure, the error is returned and op.Done will return true.
        // If Poll succeeds and the operation has completed successfully,
        // op.Done will return true, and the response of the operation is returned.
        // If Poll succeeds and the operation has not completed, the returned response and error are both nil.
        func (op *{@lro.clientReturnTypeName}) Poll(ctx context.Context) (*{@lro.operationPayloadTypeName}, error) {
            var resp {@lro.operationPayloadTypeName}
            ctx = insertXGoog(ctx, op.xGoogHeader)
            if err := op.lro.Poll(ctx, &resp); err != nil {
                return nil, err
            }
            if !op.Done() {
                return nil, nil
            }
            return &resp, nil
        }
    @end

    // Metadata returns metadata associated with the long-running operation.
    // Metadata itself does not contact the server, but Poll does.
    // To get the latest metadata, call this method after a successful call to Poll.
    // If the metadata is not available, the returned metadata and error are both nil.
    func (op *{@lro.clientReturnTypeName}) Metadata() (*{@lro.metadataTypeName}, error) {
        var meta {@lro.metadataTypeName}
        if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
            return nil, nil
        } else if err != nil {
            return nil, err
        }
        return &meta, nil
    }

    // Done reports whether the long-running operation has completed.
    func (op *{@lro.clientReturnTypeName}) Done() bool {
        return op.lro.Done()
    }

    // Name returns the name of the long-running operation.
    // The name is assigned by the server and is unique within the service from which the operation is created.
    func (op *{@lro.clientReturnTypeName}) Name() string {
        return op.lro.Name()
    }

    @if lro.implementsCancel
        // Cancel starts asynchronous cancellation on a long-running operation.
        // The server makes a best effort to cancel the operation, but success is not guaranteed.
        // Clients can use Poll or other methods to check whether the cancellation succeeded or whether the operation
        // completed despite cancellation. On successful cancellation, the operation is not deleted;
        // instead, op.Poll returns an error with code Canceled.
        func (op *{@lro.clientReturnTypeName}) Cancel(ctx context.Context) error {
            ctx = insertXGoog(ctx, op.xGoogHeader)
            return op.lro.Cancel(ctx)
        }
    @end

    @if lro.implementsDelete
        // Delete deletes a long-running operation.
        // This method indicates that the client is no longer interested in the operation result.
        // It does not cancel the operation.
        func (op *{@lro.clientReturnTypeName}) Delete(ctx context.Context) error {
            ctx = insertXGoog(ctx, op.xGoogHeader)
            return op.lro.Delete(ctx)
        }
    @end
@end

@private pathTemplateParams(args)
    @join e : args on ", "
      {@e.name}
    @end
@end

@private mergeMetadata()
    ctx = insertXGoog(ctx, c.xGoogHeader)
@end
