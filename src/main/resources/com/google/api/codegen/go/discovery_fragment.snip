@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.go
@end

# Not used for discovery
@snippet generateBody(method)
@end

@snippet generateClass(method, body)
  @let api = context.getApi, \
       apiName = api.getName, \
       apiVersion = api.getVersion, \
       serviceTitle = context.getService.getTitle, \
       apiaryConfig = context.getApiaryConfig, \
       authType = apiaryConfig.getAuthType
    package main

    // BEFORE RUNNING:
    // ---------------
    // 1. If not already done, enable the {@serviceTitle}
    //    and check the quota for your project at
    //    https://console.developers.google.com/apis/api/{@apiName}
    @if authType == "APPLICATION_DEFAULT_CREDENTIALS"
      // 2. This sample uses Application Default Credentials for authentication.
      //    If not already done, install the gcloud CLI from
      //    https://cloud.google.com/sdk/ and run
      //    `gcloud beta auth application-default login`
      // 3. Install and update the Go dependencies by running `go get -u` in the
      //    project directory.
    @else
      // 2. Install and update the Go dependencies by running `go get -u` in the
      //    project directory.
    @end

    import (
      @if authType != "APPLICATION_DEFAULT_CREDENTIALS"
        "errors"
      @end
      "fmt"
      "log"
      @if authType != "APPLICATION_DEFAULT_CREDENTIALS"
        "net/http"
      @end

      "golang.org/x/net/context"
      @if authType == "APPLICATION_DEFAULT_CREDENTIALS"
        "golang.org/x/oauth2/google"
      @end

      "google.golang.org/api/{@apiName}/{@apiVersion}"
    )

    func main() {
      ctx := context.Background()
      # TODO(pongad): Every API except autoscaler has the string as API.CloudPlatformScope, find out why

      @switch authType
      @case "APPLICATION_DEFAULT_CREDENTIALS"
        // Use Application Default Credentials for authentication when running locally.
        // For more information, see:
        // https://developers.google.com/identity/protocols/application-default-credentials
        {@clientName()}, err := google.DefaultClient(ctx{@scopeArg(method)})
        if err != nil {
          log.Fatal(err)
        }
      @default
        {@clientName()}, err := getClient(ctx)
        if err != nil {
          log.Fatal(err)
        }
      @end

      {@serviceName()}, err := {@apiName}.New({@clientName()})
      if err != nil {
        log.Fatal(err)
      }

      {@initialize(method)}
      @if context.isPageStreaming(method)
        {@iterableCall(method)}
      @else
        {@compactCall(method)}
      @end
    }
    @if authType != "APPLICATION_DEFAULT_CREDENTIALS"

      func getClient(ctx Context) (*http.Client, error) {
        // {@TODO()} Change placeholder below to get authentication credentials.
        @let authInstructionsUrl = apiaryConfig.getAuthInstructionsUrl
          @if authInstructionsUrl
            // See: {@authInstructionsUrl}
          @end
        @end
        @if context.hasAuthScopes(method)
          @let methodName = context.getMethodName(method)
            //
            // To use the `{@methodName}` method, authorize using one of the following scopes:
            @join scope : context.getAuthScopes(method)
              //   {@scope}
            @end
          @end
        @end
        return nil, errors.New("Not implemented")
      }
    @end
  @end
@end

@private scopeArg(method)
  @let scopeList = context.getAuthScopes(method)
    @if not(scopeList.isEmpty)
      , {@context.getApi.getName}.{@scopeList.get(0)}Scope
    @end
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    if err := {@methodCall(method)}.Context(ctx).Do(); err != nil {
      log.Fatal(err)
    }
  @else
    {@responseName()}, err := {@methodCall(method)}.Context(ctx).Do()
    if err != nil {
      log.Fatal(err)
    }

    // {@TODO()} Change code below to process the `{@responseName()}` object:
    fmt.Printf("%#v\n", {@responseName()})
  @end
@end

@private iterableCall(method)
  @let responseType = method.getResponseTypeUrl, \
       responseTypeRef = context.getApiaryConfig.getType(responseType), \
       resourceField = context.getFirstRepeatedField(responseTypeRef), \
       resources = context.lowerCamelToUpperCamel(resourceField.getName)
    {@requestName()} := {@methodCall(method)}
    if err := {@requestName()}.Pages(ctx, func(page *{@context.getApi.getName}.{@responseType}) error {
      @if context.isMapField(responseTypeRef, resourceField.getName)
        @let keyName = context.keyTypeName(resourceField), \
             valueName = context.valueTypeName(resourceField)
          for {@keyName}, {@valueName} := range page.{@resources} {
            // {@TODO()} Change code below to process each ({@keyName}: {@valueName}) element:
            fmt.Printf("%v: %#v\n", {@keyName}, {@valueName})
          }
        @end
      @else
        @let resourceName = context.elementTypeName(resourceField)
          for _, {@resourceName} := range page.{@resources} {
            // {@TODO()} Change code below to process each `{@resourceName}` resource:
            fmt.Printf("%#v\n", {@resourceName})
          }
        @end
      @end
      return nil
    }); err != nil {
      log.Fatal(err)
    }
  @end
@end

@private methodCall(method)
  @let methodName = context.getMethodName(method)
    {@serviceName()}.{@resourcePath(method)}.{@methodName}({@arguments(method)})
  @end
@end

@private resourcePath(method)
  @join r : context.getApiaryConfig.getResources(method.getName) on "."
    {@context.lowerCamelToUpperCamel(r)}
  @end
@end

@private initialize(method)
  @let methodName = context.getMethodName(method), \
       signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
       params = context.getFlatMethodParams(method)
    @if params
      @join param : params
        @let paramField = context.getField(signatureType, param), \
             paramValue = context.typeDefaultValue(signatureType, paramField), \
             paramSample = context.getDefaultSample(signatureType, paramField), \
             paramDescription = context.getDescription(signatureType.getName, param)
          {@description(paramDescription)}
          @if paramSample
            {@unclashVar(param)} := {@paramValue}  // {@paramSample}
          @else
            {@unclashVar(param)} := {@paramValue}
          @end
          // {@TODO()} Change placeholder value above.

        @end
      @end
    @end
  @end
  @if context.hasRequestField(method)

    {@requestBodyName()} := {@context.getApi.getName}.{@context.getRequestField(method).getTypeUrl}{
      @if context.isPatch(method)
        // {@TODO()} Add desired fields of the request body to be changed.
      @else
        // {@TODO()} Add desired fields of the request body.
      @end
    }

  @end
@end

@private arguments(method)
  @let params = context.getFlatMethodParams(method)
    @if context.hasRequestField(method)
      @if params
        {@argumentList(params)}, &{@requestBodyName()}
      @else
        &{@requestBodyName()}
      @end
    @else
      {@argumentList(params)}
    @end
  @end
@end

@private clientName()
  c
@end

@private serviceName()
  @let apiName = context.getApi.getName
    {@apiName}Service
  @end
@end

@private requestName()
  req
@end

@private requestBodyName()
  rb
@end

@private responseName()
  resp
@end

@private argumentList(params)
  @join param : params on ", "
    {@unclashVar(param)}
  @end
@end

@private unclashVar(var)
  @if context.getApi.getName.equals(var)
    {@var}2
  @else
    {@var}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description)
    // {@line}
  @end
@end
