@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.go
@end

# Not used for discovery
@snippet generateBody(method)
@end

@snippet generateClass(method, body)
  @let api = context.getApi, \
       apiName = api.getName, \
       apiVersion = api.getVersion, \
       serviceTitle = context.getService.getTitle
    package main

    // BEFORE RUNNING:
    // ---------------
    // 1. If not already done, enable the {@serviceTitle}
    //    and check the quota for your project at
    //    https://console.developers.google.com/apis/api/{@apiName}
    // 2. This sample uses Application Default Credentials for authentication.
    //    If not already done, install the gcloud CLI from
    //    https://cloud.google.com/sdk/ and run
    //    `gcloud beta auth application-default login`
    // 3. Install and update the Go dependencies by running `go get -u` in the
    //    project directory.

    import (
      "log"

      "golang.org/x/net/context"
      "golang.org/x/oauth2/google"

      "google.golang.org/api/{@apiName}/{@apiVersion}"
    )

    func main() {
      ctx := context.Background()

      // Authentication is provided by the `gcloud` tool when running locally
      // and by built-in service accounts when running on GAE, GCE, or GKE.
      // For more information, see
      // https://developers.google.com/identity/protocols/application-default-credentials
      {@clientName()}, err := google.DefaultClient(ctx{@scopeArg(method)})
      if err != nil {
        log.Fatal(err)
      }

      {@serviceName()}, err := {@apiName}.New({@clientName()})
      if err != nil {
        log.Fatal(err)
      }
      {@initialize(method)}
      @if context.isPageStreaming(method)
        {@iterableCall(method)}
      @else
        {@compactCall(method)}
      @end
    }
  @end
@end

@private scopeArg(method)
  @let scopeList = context.getAuthScopes(method)
    @if not(scopeList.isEmpty)
      , {@context.getApi.getName}.{@scopeList.get(0)}Scope
    @end
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    if err := {@request(method)}.Context(ctx).Do(); err != nil {
      log.Fatal(err)
    }
  @else
    {@responseName()}, err := {@request(method)}.Context(ctx).Do()
    if err != nil {
      log.Fatal(err)
    }

    // {@TODO()} Use {@responseName()}
    log.Printf("%#v\n", {@responseName()})
  @end
@end

@private iterableCall(method)
  @let responseType = method.getResponseTypeUrl, \
       responseTypeRef = context.getApiaryConfig.getType(responseType), \
       resourceField = context.getFirstRepeatedField(responseTypeRef), \
       resources = context.lowerCamelToUpperCamel(resourceField.getName)
    {@requestName()} := {@request(method)}
    if err := {@requestName()}.Pages(ctx, func(page *{@context.getApi.getName}.{@responseType}) error {
      @if context.isMapField(responseTypeRef, resourceField.getName)
        @let keyName = context.keyTypeName(resourceField), \
             valueName = context.valueTypeName(resourceField)
          for {@keyName}, {@valueName} := range page.{@resources} {
            // {@TODO()} Use {@keyName}, {@valueName}
            log.Printf("%v: %#v\n", {@keyName}, {@valueName})
          }
        @end
      @else
        @let resourceName = context.elementTypeName(resourceField)
          for _, {@resourceName} := range page.{@resources} {
            // {@TODO()} Use {@resourceName}
            log.Printf("%#v\n", {@resourceName})
          }
        @end
      @end
      return nil // NOTE: Returning a non-nil error stops pagination.
    }); err != nil {
      log.Fatal(err)
    }
  @end
@end

@private request(method)
  @let methodName = context.lowerCamelToUpperCamel(context.getMethodName(method))
    {@serviceName()}.{@resourcePath(method)}.{@methodName}({@arguments(method)})
  @end
@end

@private resourcePath(method)
  @join r : context.getApiaryConfig.getResources(method.getName) on "."
    {@context.lowerCamelToUpperCamel(r)}
  @end
@end

@private initialize(method)
  @let methodName = context.lowerCamelToUpperCamel(context.getMethodName(method)), \
       signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
       params = context.getFlatMethodParams(method)
    @if params

      @join param : params
        @let paramField = context.getField(signatureType, param), \
             paramValue = context.typeDefaultValue(signatureType, paramField), \
             paramSample = context.getDefaultSample(signatureType, paramField), \
             paramDescription = context.getDescription(signatureType.getName, param)
          {@description(paramDescription)}
          {@unclashVar(param)} := {@paramValue} // {@TODO()} Update placeholder value(s).{@paramSample}

        @end
      @end
    @end
  @end
  @if context.hasRequestField(method)

    {@requestBodyName(method)} := &{@context.getApi.getName}.{@context.getRequestField(method).getTypeUrl}{
      @if context.isPatch(method)
        // {@TODO()} Add the desired fields to be changed.
      @else
        // {@TODO()} Add the desired fields.
      @end
    }

  @end
@end

@private arguments(method)
  @let params = context.getFlatMethodParams(method)
    @if context.hasRequestField(method)
      @if params
        {@argumentList(params)}, {@requestBodyName(method)}
      @else
        {@requestBodyName(method)}
      @end
    @else
      {@argumentList(params)}
    @end
  @end
@end

@private clientName()
  hc
@end

@private serviceName()
  s
@end

@private requestName()
  call
@end

@private requestBodyName(method)
  resource
@end

@private responseName()
  resp
@end

@private printName()
  out
@end

@private argumentList(params)
  @join param : params on ", "
    {@unclashVar(param)}
  @end
@end

@private unclashVar(var)
  @if context.getApi.getName.equals(var)
    {@var}2
  @else
    {@var}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description)
    // {@line}
  @end
@end
