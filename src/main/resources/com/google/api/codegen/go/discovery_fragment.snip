@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.go
@end

# Not used for discovery
@snippet generateBody(method)
@end

@snippet generateClass(method, body)
package main

@let authType = context.getApiaryConfig.getAuthType.toString
  // BEFORE RUNNING:
  // ---------------
  // 1. If not already done, enable the {@context.getService.getTitle}
  //    and check the quota for your project at
  //    https://console.developers.google.com/apis/api/{@context.getApi.getName}
  @if authType == "APPLICATION_DEFAULT_CREDENTIALS"
    // 2. This sample uses Application Default Credentials for authentication.
    //    If not already done, install the gcloud CLI from
    //    https://cloud.google.com/sdk/ and run
    //    'gcloud beta auth application-default login'
    // 3. Install and update the Go dependencies by running 'go get -u' in the
    //    project directory.
  @else
    // 2. Install and update the Go dependencies by running 'go get -u' in the
    //    project directory.
  @end
@end

import (
  @if context.getApiaryConfig.getAuthType.toString != "APPLICATION_DEFAULT_CREDENTIALS"
    "errors"
    "net/http"

  @end
  "golang.org/x/net/context"
  @if context.getApiaryConfig.getAuthType.toString == "APPLICATION_DEFAULT_CREDENTIALS"
    "golang.org/x/oauth2/google"
  @end

  "google.golang.org/api/{@context.getApi.getName}/{@context.getApiVersion}"
)

func main() {
  ctx := context.Background()
  @switch context.getApiaryConfig.getAuthType.toString
  @case "APPLICATION_DEFAULT_CREDENTIALS"
    hc, err := google.DefaultClient(ctx{@scopeArg(method)})
    if err != nil {
      // {@TODO()} Handle error.
    }
  @default
    hc, err := getClient(ctx)
    if err != nil {
      // {@TODO()} Handle error.
    }
  @end
  c, err := {@context.getApi.getName}.New(hc)
  if err != nil {
    // {@TODO()} Handle error.
  }

  {@initialize(method)}

  @if context.isPageStreaming(method)
    {@iterableCall(method)}
  @else
    {@compactCall(method)}
  @end
}
@if context.getApiaryConfig.getAuthType.toString != "APPLICATION_DEFAULT_CREDENTIALS"

func getClient(ctx Context) (*http.Client, error) {
  // {@TODO()} Implement this function to get authentication credentials.
  @let authInstructionsUrl = context.getApiaryConfig.getAuthInstructionsUrl
    @if authInstructionsUrl
      // See {@authInstructionsUrl}
    @end
  @end
  @if context.getApiaryConfig.hasAuthScopes(method.getName)
    // Authorize using one of the following scopes in order to use this method:
    @join scope : context.getApiaryConfig.getAuthScopes.get(method.getName)
      //   {@scope}
    @end
  @end
  return nil, errors.New("Not implemented")
}
@end
@end

@private scopeArg(method)
  @let scopeList = context.getAuthScopes(method)
    @if not(scopeList.isEmpty)
    , {@context.getApi.getName}.{@scopeList.get(0)}Scope
    @end
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    @if context.hasRequestField(method)
      call := {@methodPath(method)}({@callArg(method)}).Context(ctx)
      if err := call.Do(); err != nil {
        // {@TODO()} Handle error.
      }
    @else
      if err := {@methodPath(method)}({@callArg(method)}).Context(ctx).Do(); err != nil {
        // {@TODO()} Handle error.
      }
    @end
  @else
    resp, err := {@methodPath(method)}({@callArg(method)}).Context(ctx).Do()
    if err != nil {
      // {@TODO()} Handle error.
    }
    // {@TODO()} Use resp.
    _ = resp
  @end
@end

@private iterableCall(method)
  @let responseType = method.getResponseTypeUrl, \
      responseTypeRef = context.getApiaryConfig.getType(responseType), \
      resourceField = context.getFirstRepeatedField(responseTypeRef), \
      resources = context.lowerCamelToUpperCamel(resourceField.getName)

    call := {@methodPath(method)}({@callArg(method)})
    if err := call.Pages(ctx, func(page *{@context.getApi.getName}.{@responseType}) error {
      for _, v := range page.{@resources} {
        // {@TODO()} Use v.
        _ = v
      }
      return nil // NOTE: returning a non-nil error stops pagination.
    }); err != nil {
      // {@TODO()} Handle error.
    }
  @end
@end

@private methodPath(method)
  c.{@resourcePath(method)}.{@context.lowerCamelToUpperCamel(context.getMethodName(method))}
@end

@private resourcePath(method)
  @join r : context.getApiaryConfig.getResources(method.getName) on "."
    {@context.lowerCamelToUpperCamel(r)}
  @end
@end

@private initialize(method)
  @join param : context.getFlatMethodParams(method) on BREAK.add(BREAK)
    @let signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
        paramField = context.getField(signatureType, param), \
        paramValue = context.typeDefaultValue(signatureType, paramField), \
        paramDescription = context.getApiaryConfig.getDescription(signatureType.getName, param)
      {@description(paramDescription)}
      // {@TODO()} Update placeholder value.
      {@unclashVar(param)} := {@paramValue}
    @end
  @end
@end

@private callArg(method)
  @if context.hasRequestField(method)
    @if context.getFlatMethodParams(method)
      {@callArgNoBody(method)}, &{@context.getApi.getName}.{@context.getRequestField(method).getTypeUrl}{
        // {@TODO()} Fill required fields.
      }
    @else
      &{@context.getApi.getName}.{@context.getRequestField(method).getTypeUrl}{
        // {@TODO()} Fill required fields.
      }
    @end
  @else
    {@callArgNoBody(method)}
  @end
@end

@private callArgNoBody(method)
  @join param : context.getFlatMethodParams(method) on ", "
    {@unclashVar(param)}
  @end
@end

@private unclashVar(var)
  @if context.getApi.getName.equals(var)
    {@var}2
  @else
    {@var}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description, 100, "")
    // {@line}
  @end
@end
