@extends "../common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.go
@end

# Not used for discovery
@snippet generateBody(method)
@end

@snippet generateClass(method, body)
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the {@context.getService.getTitle}
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/{@context.getApi.getName}_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/{@context.getApi.getName}/{@context.getApiVersion}

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/{@context.getApi.getName}/{@context.getApiVersion}"
)

func main() {
  ctx := context.Background()
  # TODO(pongad): Every API except autoscaler has the string as API.CloudPlatformScope, find out why
  hc, err := google.DefaultClient(ctx{@scopeArg(method)})
  if err != nil {
    // {@TODO()} Handle error.
  }
  c, err := {@context.getApi.getName}.New(hc)
  if err != nil {
    // {@TODO()} Handle error.
  }

  {@initialize(method)}

  @if context.isPageStreaming(method)
    {@iterableCall(method)}
  @else
    {@compactCall(method)}
  @end
}
@end

@private scopeArg(method)
  @let scopeList = context.getAuthScopes(method)
    @if not(scopeList.isEmpty)
    , {@context.getApi.getName}.{@scopeList.get(0)}Scope
    @end
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    @if context.hasRequestField(method)
      call := {@methodPath(method)}({@callArg(method)}).Context(ctx)
      if err := call.Do(); err != nil {
        // {@TODO()} Handle error.
      }
    @else
      err := {@methodPath(method)}({@callArg(method)}).Context(ctx).Do()
      if err != nil {
        // {@TODO()} Handle error.
      }
    @end
  @else
    # TODO(pongad): generate a better name for "resp"
    resp, err := {@methodPath(method)}({@callArg(method)}).Context(ctx).Do()
    if err != nil {
      // {@TODO()} Handle error.
    }
    // {@TODO()} Use resp.
    _ = resp
  @end
@end

@private iterableCall(method)
  @let responseType = method.getResponseTypeUrl, \
      responseTypeRef = context.getApiaryConfig.getType(responseType), \
      resourceField = context.getFirstRepeatedField(responseTypeRef), \
      resources = context.lowerCamelToUpperCamel(resourceField.getName)

    call := {@methodPath(method)}({@callArg(method)})
    if err := call.Pages(ctx, func(page *{@context.getApi.getName}.{@responseType}) error {
      for _, v := range page.{@resources} {
        // {@TODO()} Use v.
        _ = v
      }
      return nil // NOTE: returning a non-nil error stops pagination.
    }); err != nil {
      // {@TODO()} Handle error.
    }
  @end
@end

@private methodPath(method)
  c.{@resourcePath(method)}.{@context.lowerCamelToUpperCamel(context.getMethodName(method))}
@end

@private resourcePath(method)
  @join r : context.getApiaryConfig.getResources(method.getName) on "."
    {@context.lowerCamelToUpperCamel(r)}
  @end
@end

@private initialize(method)
  @join param : context.getFlatMethodParams(method) on BREAK.add(BREAK)
    @let signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
        paramField = context.getField(signatureType, param), \
        paramValue = context.typeDefaultValue(signatureType, paramField), \
        paramDescription = context.getApiaryConfig.getDescription(signatureType.getName, param)
      @join line : context.lineWrapDoc(paramDescription, 100)
        // {@line}
      @end

      {@unclashVar(param)} := {@paramValue} // {@TODO()} Update placeholder value.
    @end
  @end
@end

@private callArg(method)
  @if context.hasRequestField(method)
    @if context.getFlatMethodParams(method)
      {@callArgNoBody(method)}, &{@context.getApi.getName}.{@context.getRequestField(method).getTypeUrl}{
        // {@TODO()} Fill required fields.
      }
    @else
      &{@context.getApi.getName}.{@context.getRequestField(method).getTypeUrl}{
        // {@TODO()} Fill required fields.
      }
    @end
  @else
    {@callArgNoBody(method)}
  @end
@end

@private callArgNoBody(method)
  @join param : context.getFlatMethodParams(method) on ", "
    {@unclashVar(param)}
  @end
@end

@private unclashVar(var)
  @if context.getApi.getName.equals(var)
    {@var}2
  @else
    {@var}
  @end
@end
