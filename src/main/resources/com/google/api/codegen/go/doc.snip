@extends "go/header.snip"

@snippet generate(view)
    {@headerComment(view.fileHeader)}

    // Package {@view.fileHeader.localPackageName} is an auto-generated package for the
    // {@view.serviceTitle}.
    {@releaseLevel(view)}
    //
    @join line : view.packageDoc
        // {@line}
    @end
    @if view.domainLayerLocation
        //
        // Use the client at {@view.domainLayerLocation} in preference to this.
    @end
    package {@view.fileHeader.localPackageName} // import "{@view.importPath}"

    import (
        "context"
        "runtime"
        "strings"
        "unicode"

        "google.golang.org/grpc/metadata"
    )

    func insertMetadata(ctx context.Context, mds ...metadata.MD) context.Context {
        out, _ := metadata.FromOutgoingContext(ctx)
        out = out.Copy()
        for _, md := range mds {
            for k, v := range md {
                out[k] = append(out[k], v...)
            }
        }
        return metadata.NewOutgoingContext(ctx, out)
    }

    // DefaultAuthScopes reports the default set of authentication scopes to use with this package.
    func DefaultAuthScopes() []string {
      return []string{
        @join scope : view.authScopes
          "{@scope}",
        @end
      }
    }

    # versionGo was copied with minimal changes from
    # https://github.com/GoogleCloudPlatform/google-cloud-go/blob/58348a98e2f5ccb013615360c2dbc8cbb097ef34/internal/version/version.go
    # We might want to put this is GAX eventually.
    // versionGo returns the Go runtime version. The returned string
    // has no whitespace, suitable for reporting in header.
    func versionGo() string {
        const develPrefix = "devel +"

        s := runtime.Version()
        if strings.HasPrefix(s, develPrefix) {
            s = s[len(develPrefix):]
            if p := strings.IndexFunc(s, unicode.IsSpace); p >= 0 {
                s = s[:p]
            }
            return s
        }

        notSemverRune := func(r rune) bool {
            return strings.IndexRune("0123456789.", r) < 0
        }

        if strings.HasPrefix(s, "go1") {
            s = s[2:]
            var prerelease string
            if p := strings.IndexFunc(s, notSemverRune); p >= 0 {
                s, prerelease = s[:p], s[p:]
            }
            if strings.HasSuffix(s, ".") {
                s += "0"
            } else if strings.Count(s, ".") < 2 {
                s += ".0"
            }
            if prerelease != "" {
                s += "-" + prerelease
            }
            return s
        }
        return "UNKNOWN"
    }

    const versionClient = "UNKNOWN"
@end

@private releaseLevel(view)
    @switch view.releaseLevel
    @case "GA"
    @case "UNSET_RELEASE_LEVEL"
        //
        //   NOTE: This package is in alpha. It is not stable, and is likely to change.
    @case "ALPHA"
        //
        //   NOTE: This package is in alpha. It is not stable, and is likely to change.
    @case "BETA"
        //
        //   NOTE: This package is in beta. It is not stable, and may be subject to changes.
    @case "DEPRECATED"
        //
        //   NOTE: This package is deprecated.
    @end
@end
