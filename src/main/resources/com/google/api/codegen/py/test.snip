@extends "py/common.snip"
@extends "py/method_sample.snip"

@snippet generate(apiTest)
    {@licenseSection(apiTest.fileHeader)}

    {@moduleDocstring()}
    {@renderImportSection(apiTest.fileHeader.importSection)}

    class {@apiTest.testClass.name}(unittest2.TestCase):

        @join test : apiTest.testClass.testCases
            {@testCase(test, apiTest.testClass.apiVariableName)}

        @end
@end

@private licenseSection(fileHeader)
    @join line : fileHeader.copyrightLines
        @# {@line}
    @end
    {@BREAK}@#
    @join line : fileHeader.licenseLines
        @# {@line}
    @end
@end

@private moduleDocstring()
    """Unit tests."""
@end

@private renderImportSection(importSection)
    @if importSection.standardImports

        {@importList(importSection.standardImports)}

    @end
    @if importSection.externalImports

        {@importList(importSection.externalImports)}

    @end
    @if importSection.appImports

        {@importList(importSection.appImports)}

    @end
@end

@private testCase(test, moduleName)
    @switch test.grpcStreamingType
    @case "NonStreaming"
        {@nonStreamingOptionalArrayTestCase(test, moduleName)}
    @default
        {@unhandledCase()}
    @end
@end

@private nonStreamingOptionalArrayTestCase(test, moduleName)
    @@mock.patch('google.gax.config.create_stub')
    def {@test.name}(self, mock_create_stub):
        @switch test.clientMethodType
        @case "OptionalArrayMethod"
            {@simpleTestCase(test, moduleName)}
        @default
            {@unhandledCase()}
        @end
@end

@private simpleTestCase(test, moduleName)
    @# Mock gRPC layer
    grpc_stub = mock.Mock()
    mock_create_stub.return_value = grpc_stub

    client = {@moduleName}.{@test.serviceConstructorName}()

    @if test.hasRequestParameters
        @# Mock request
        {@initCode(test.initCode)}

    @end
    @if test.hasReturnValue
        @# Mock response
        {@initCode(test.mockResponse.initCode)}
        grpc_stub.{@test.grpcStubCallString}.return_value = expected_response

        response = client.{@test.clientMethodName}(\
            {@fieldSettingArgList(test.initCode.fieldSettings)})
        self.assertEqual(expected_response, response)
    @else
        client.{@test.clientMethodName}(\
            {@fieldSettingArgList(test.initCode.fieldSettings)})
    @end

    grpc_stub.{@test.grpcStubCallString}.assert_called_once()
@end
