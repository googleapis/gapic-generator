@extends "py/common.snip"
@extends "py/method_sample.snip"

@snippet generate(apiTest)
    {@header(apiTest.fileHeader)}


    {@helpers(apiTest.testClass)}


    class {@apiTest.testClass.name}(object):

        @join test : apiTest.testClass.testCases
            {@testCase(test, apiTest.testClass.apiVariableName)}

        @end
@end

@private header(fileHeader)
    {@licenseSection(fileHeader)}

    {@moduleDocstring()}
    {@renderImportSection(fileHeader.importSection)}
@end

@private moduleDocstring()
    """Unit tests."""
@end

@private helpers(testClass)
class MultiCallableStub(object):
    """Stub for the grpc.UnaryUnaryMultiCallable interface."""
    def __init__(self, method, channel_stub):
        self.method = method
        self.channel_stub = channel_stub

    def __call__(self, request, timeout=None, metadata=None, credentials=None):
        self.channel_stub.requests.append((self.method, request))
        
        response = None
        if self.channel_stub.responses:
            response = self.channel_stub.responses.pop()

        if isinstance(response, Exception):
            raise response
            
        if response:
            return response


class ChannelStub(object):
    """Stub for the grpc.Channel interface."""
    def __init__(self, responses = []):
        self.responses = responses
        self.requests = []

    @if testClass.apiHasUnaryUnaryMethod
        def unary_unary(
                self, method, request_serializer=None, response_deserializer=None):
            return MultiCallableStub(method, self)

    @end
    @if testClass.apiHasUnaryStreamingMethod
        def unary_stream(
                self, method, request_serializer=None, response_deserializer=None):
            return MultiCallableStub(method, self)

    @end
    @if testClass.apiHasStreamingUnaryMethod
    def stream_unary(
            self, method, request_serializer=None, response_deserializer=None):
        return MultiCallableStub(method, self)

    @end
    @if testClass.apiHasStreamingStreamingMethod
    def stream_stream(
            self, method, request_serializer=None, response_deserializer=None):
        return MultiCallableStub(method, self)

    @end

class CustomException(Exception):
    pass
@end

@private testCase(test, moduleName)
    @switch test.grpcStreamingType
    @case "NonStreaming"
        {@nonStreamingOptionalArrayTestCase(test, moduleName)}
    @case "ServerStreaming"
        {@serverStreamingOptionalArrayTestCase(test, moduleName)}
    @case "ClientStreaming"
        {@clientStreamingOptionalArrayTestCase(test, moduleName)}
    @case "BidiStreaming"
        {@bidiStreamingOptionalArrayTestCase(test, moduleName)}
    @default
        {@unhandledCase()}
    @end
@end

@private nonStreamingOptionalArrayTestCase(test, moduleName)
    @switch test.clientMethodType
    @case "OptionalArrayMethod"
        {@simpleTestCase(test, moduleName)}
    @case "PagedOptionalArrayMethod"
        {@pagedStreamingTestCase(test, moduleName)}
    @case "OperationOptionalArrayMethod"
        {@operationTestCase(test, moduleName)}
    @default
        {@unhandledCase()}
    @end
@end

@private serverStreamingOptionalArrayTestCase(test, moduleName)
    def {@test.name}(self):
        @if test.hasReturnValue
            @# Setup Expected Response
            {@responseInitCode(test)}

        @end
        @# Mock the API response
        channel = ChannelStub(responses = [iter([expected_response])])
        {@clientSetup(test, moduleName)}


        @if test.hasRequestParameters
            @# Setup Request
            {@initCode(test.initCode)}

        @end
        response = {@unaryTestMethodCall(test)}
        resources = list(response)
        assert len(resources) == 1
        assert expected_response == resources[0]

        {@unaryTestSuccessAsserts(test)}

    {@simpleTestWithException(test, moduleName)}
@end

@private clientStreamingOptionalArrayTestCase(test, moduleName)
    def {@test.name}(self):
        @if test.hasReturnValue
            @# Setup Expected Response
            {@responseInitCode(test)}

        @end
        @# Mock the API response
        channel = ChannelStub(responses = [expected_response])
        {@clientSetup(test, moduleName)}

        @# Setup Request
        {@initCode(test.initCode)}
        request = {@test.requestTypeName}(**request)
        requests = [request]

        @if test.hasReturnValue
            response = {@requestStreamingTestMethodCall(test)}
            assert expected_response == response
        @else
            {@requestStreamingTestMethodCall(test)}
        @end

        {@requestStreamingTestSuccessAsserts(test)}

    {@requestStreamingTestWithException(test, moduleName)}
@end

@private bidiStreamingOptionalArrayTestCase(test, moduleName)
    def {@test.name}(self):
        @# Setup Expected Response
        {@responseInitCode(test)}

        @# Mock the API response
        channel = ChannelStub(responses = [iter([expected_response])])
        client = {@moduleName}.{@test.serviceConstructorName}(
            channel=channel)

        @# Setup Request
        {@initCode(test.initCode)}
        request = {@test.requestTypeName}(**request)
        requests = [request]

        response = {@requestStreamingTestMethodCall(test)}
        resources = list(response)
        assert len(resources) == 1
        assert expected_response == resources[0]

        {@requestStreamingTestSuccessAsserts(test)}

    {@requestStreamingTestWithException(test, moduleName)}
@end

@private simpleTestCase(test, moduleName)
    def {@test.name}(self):
        @if test.hasReturnValue
            @# Setup Expected Response
            {@responseInitCode(test)}

            @# Mock the API response
            channel = ChannelStub(responses = [expected_response])
        @else
            channel = ChannelStub()
        @end
        {@clientSetup(test, moduleName)}

        @if test.hasRequestParameters
            @# Setup Request
            {@initCode(test.initCode)}

        @end
        @if test.hasReturnValue
            response = {@unaryTestMethodCall(test)}
            assert expected_response == response
        @else
            {@unaryTestMethodCall(test)}
        @end

        {@unaryTestSuccessAsserts(test)}

    {@simpleTestWithException(test, moduleName)}
@end

@private pagedStreamingTestCase(test, moduleName)
    def {@test.name}(self):
        @# Setup Expected Response
        {@responseInitCode(test)}

        @# Mock the API response
        channel = ChannelStub(responses = [expected_response])
        {@clientSetup(test, moduleName)}

        @if test.hasRequestParameters
            @# Setup Request
            {@initCode(test.initCode)}

        @end
        paged_list_response = {@unaryTestMethodCall(test)}
        @join pageStreamingResponseView : test.pageStreamingResponseViews
            {@pageStreamingResponseView.resourcesVarName} = \
                list(paged_list_response)
            assert len({@pageStreamingResponseView.resourcesVarName}) == 1

            assert \
                expected_response.\
                    {@pageStreamingResponseView.resourcesFieldGetterName}[0] == \
                {@pageStreamingResponseView.resourcesVarName}[0]
        @end

        {@unaryTestSuccessAsserts(test)}

    {@pagedStreamingTestWithException(test, moduleName)}
@end

@private simpleTestWithException(test, moduleName)
    def {@test.nameWithException}(self):
        @# Mock the API response
        channel = ChannelStub(responses = [CustomException()])
        client = {@moduleName}.{@test.serviceConstructorName}(
             channel=channel)

        @if test.hasRequestParameters
            @# Setup request
            {@initCode(test.initCode)}

        @end
        with pytest.raises(CustomException):
            {@unaryTestMethodCall(test)}
@end

@private pagedStreamingTestWithException(test, moduleName)
    def {@test.nameWithException}(self):
        channel = ChannelStub(responses = [CustomException()])
        client = {@moduleName}.{@test.serviceConstructorName}(
            channel=channel)

        @if test.hasRequestParameters
            @# Setup request
            {@initCode(test.initCode)}

        @end
        paged_list_response = {@unaryTestMethodCall(test)}
        with pytest.raises(CustomException):
            list(paged_list_response)
@end

@private requestStreamingTestWithException(test, moduleName)
    def {@test.nameWithException}(self):
        @# Mock the API response
        channel = ChannelStub(responses = [CustomException()])
        client = {@moduleName}.{@test.serviceConstructorName}(
             channel=channel)

        @if test.hasRequestParameters
            @# Setup request
            {@initCode(test.initCode)}

        @end
        request = {@test.requestTypeName}(**request)
        requests = [request]

        with pytest.raises(CustomException):
            {@requestStreamingTestMethodCall(test)}
@end

@private operationTestCase(test, moduleName)
    def {@test.name}(self):
        @# Setup Expected Response
        {@responseInitCode(test)}
        operation = operations_pb2.Operation(name='operations/{@test.name}', done=True)
        operation.response.Pack(expected_response)

        @# Mock the API response
        channel = ChannelStub(responses=[operation])
        client = {@moduleName}.{@test.serviceConstructorName}(
            channel=channel)

        @if test.hasRequestParameters
            @# Setup Request
            {@initCode(test.initCode)}

        @end
        response = {@unaryTestMethodCall(test)}
        result = response.result()
        assert expected_response == result

        {@unaryTestSuccessAsserts(test)}


    def {@test.nameWithException}(self):
        @# Setup Response
        error = status_pb2.Status()
        operation = operations_pb2.Operation(\
            name='operations/{@test.nameWithException}', done=True)
        operation.error.CopyFrom(error)

        @# Mock the API response
        channel = ChannelStub(responses=[operation])
        client = {@moduleName}.{@test.serviceConstructorName}(
            channel=channel)

        @if test.hasRequestParameters
            @# Setup Request
            {@initCode(test.initCode)}

        @end
        response = {@unaryTestMethodCall(test)}
        exception = response.exception()
        assert exception.errors[0] == error
@end

@private clientSetup(test, moduleName)
    client = {@moduleName}.{@test.serviceConstructorName}(
        channel=channel)
@end

@private responseInitCode(test)
    {@initCode(test.mockResponse.initCode)}
    expected_response = {@test.responseTypeName}(**expected_response)
@end

@private unaryTestMethodCall(test)
    client.{@test.clientMethodName}(\
        {@sampleMethodCallArgList(test.initCode)})
@end

@private requestStreamingTestMethodCall(test)
    client.{@test.clientMethodName}(requests)
@end

@private unaryTestSuccessAsserts(test)
    assert len(channel.requests) == 1
    @if test.hasRequestParameters
        expected_request = {@test.requestTypeName}({@requestParams(test.asserts)})
    @else
        expected_request = {@test.requestTypeName}()
    @end
    actual_request = channel.requests[0][1]
    assert expected_request == actual_request
@end

@private requestParams(asserts)
    @join assert : asserts on ", "
        {@assert.actualValueGetter}={@expectedRequestParam(assert)}
    @end
@end

@private expectedRequestParam(assert)
    @if assert.hasExpectedValueTransformFunction
        {@assert.expectedValueTransformFunction}(\
            {@assert.expectedValueIdentifier})
    @else
        {@assert.expectedValueIdentifier}
    @end
@end

@private requestStreamingTestSuccessAsserts(test)
    assert len(channel.requests) == 1
    actual_requests = channel.requests[0][1]
    assert len(actual_requests) == 1
    actual_request = list(actual_requests)[0]
    assert request == actual_request
@end

@private sampleMethodCallArgListAfterComma(initCode)
  @if initCode.fieldSettings
    , {@sampleMethodCallArgList(initCode)}
  @end
@end
