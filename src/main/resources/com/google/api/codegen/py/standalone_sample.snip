@extends "py/common.snip"
@extends "py/sample_init.snip"

@snippet generate(sampleFile)
  {@licenseSection(sampleFile.fileHeader)}
  {@""}
  @let apiMethod = sampleFile.libraryMethod
    @let sample = apiMethod.samples.get(0)
      @# DO NOT EDIT! This is a generated sample ("{@sample.callingForm}",  "{@sample.valueSet.id}")

      @# To install the latest published package dependency, execute the following:
      @#   pip install {@sampleFile.gapicPackageName}

      {@standaloneSample(apiMethod, sample)}
    @end
  @end
@end

# The structure of this should be parallel to that of method_sample.snip:@incodeSampleCall.
#
# FIXME: Replace the following function calls with calls to functions that emit full standalone samples. These stubs have been adapted from method_sample.snip
@snippet standaloneSample(apiMethod, sample)
  import sys

  @# [START {@sample.regionTag}]

  @if sample.sampleImports.appImports.size
    {@importList(sample.sampleImports.appImports)}
  @end
  @let convertTextCode = convertText(sample)
    @if convertTextCode
      import six


    @else


    @end
    def {@sample.sampleFunctionName}({@formalArgs(sample.sampleInitCode.argDefaultParams)}):
      @if not(sample.sampleFunctionDoc.isEmpty)
        {@processDoc(sample.sampleFunctionDoc)}
      @end
      @# [START {@sample.regionTag}_core]

      client = {@apiMethod.apiModuleName}.{@apiMethod.apiClassName}()

      @if sample.sampleInitCode.argDefaultLines
        @join line : util.pretty(initCode(sample.sampleInitCode.argDefaultLines))
          @# {@line}
        @end


        # FIXME(hzyi): handle ListInitType, MapInitType and StructInitType correctly
        {@convertTextCode}
      @end
      @if sample.sampleInitCode.lines
        {@initCodeWithDescriptions(sample.sampleInitCode.lines)}

      @end
      @switch sample.callingForm
      @case "Request"
        {@optionalArrayMethodSampleCodeNonStreaming(apiMethod, sample)}
      @case "RequestPaged"
        {@pagedOptionalArrayMethodSampleCodePaged(apiMethod, sample)}
      @case "RequestPagedAll"
        {@pagedOptionalArrayMethodSampleCodeAll(apiMethod, sample)}
      @case "RequestStreamingBidi"
        {@optionalArrayMethodSampleCodeBidiStreaming(apiMethod, sample)}
      @case "RequestStreamingClient"
        {@optionalArrayMethodSampleCodeClientStreaming(apiMethod, sample)}
      @case "RequestStreamingServer"
        {@optionalArrayMethodSampleCodeServerStreaming(apiMethod, sample)}
      @case "LongRunningPromise"
        {@lroSampleCode(apiMethod, sample)}
      @default
        $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
      @end

      @# [END {@sample.regionTag}_core]
    @# [END {@sample.regionTag}]
  @end

  def main():
    @if sample.sampleInitCode.argDefaultParams
      import argparse

      parser = argparse.ArgumentParser()
      @join param : sample.sampleInitCode.argDefaultParams
        parser.add_argument('--{@param.cliFlagName}', type={@param.typeName}, default={@renderInitValue(param.initValue)})
      @end
      args = parser.parse_args()

    @end
    {@sample.sampleFunctionName}({@actualArgs(sample.sampleInitCode.argDefaultParams)})

  if __name__ == '__main__':
    main()
@end

@private processDoc(doc)
  # If there are no parameters, we generate the method description in one line.
  @if doc.paramDocLines.isEmpty
    @if doc.mainDocLines.size.toString == "1"
      """{@doc.mainDocLines.get(0)}"""
    @end
  @else
  """
    @if doc.mainDocLines.size
      @join line : @doc.mainDocLines
        {@line}
      @end


    @end
    Args:
    @join paramDoc : doc.paramDocLines
      @join line : paramDoc
        {@""}  {@line}
      @end
    @end
    """
  @end
@end

@private actualArgs(sampleArgs)
  @join param : sampleArgs on ", "
    args.{@param.cliFlagName}
  @end
@end

@private formalArgs(sampleArgs)
  @join param : sampleArgs on ", "
    {@param.identifier}
  @end
@end

@private convertText(sample)
  @join line : sample.sampleInitCode.argDefaultParams
    @if line.typeName == "str"
      if isinstance({@line.identifier}, six.binary_type):
        {@line.identifier} = {@line.identifier}.decode('utf-8')
    @end
  @end
@end

@private optionalArrayMethodSampleCodeNonStreaming(apiMethod, sample)
  {@singularResponseSampleCode(apiMethod, sample.sampleInitCode)}
  @if sample.outputs
    {@processResponse(sample)}
  @end
@end

@private pagedOptionalArrayMethodSampleCodePaged(apiMethod, sample)
  @# Iterate over results one page at a time
  for page in {@pagedMethodCallSampleCode(apiMethod, sample.sampleInitCode)}:
    for response_item in page:
      {@processResponse(sample)}
@end

@private pagedOptionalArrayMethodSampleCodeAll(apiMethod, sample)
  @# Iterate over all results
  for response_item in {@methodCallSampleCode(apiMethod, sample.sampleInitCode)}:
    {@processResponse(sample)}
@end

@private optionalArrayMethodSampleCodeBidiStreaming(apiMethod, sample)
  requests = [request]
  {@responseStreamingSampleCode(apiMethod, sample)}
@end

@private optionalArrayMethodSampleCodeClientStreaming(apiMethod, sample)
  requests = [request]
  {@singularResponseSampleCode(apiMethod, sample.sampleInitCode)}
  @if sample.outputs
    {@processResponse(sample)}
  @end
@end

@private optionalArrayMethodSampleCodeServerStreaming(apiMethod, sample)
  {@responseStreamingSampleCode(apiMethod, sample)}
@end

@private lroSampleCode(apiMethod, sample)
  operation = {@methodCallSampleCode(apiMethod, sample.sampleInitCode)}

  print('Waiting for operation to complete...')
  response = operation.result()

  @if sample.outputs
    {@processResponse(sample)}
  @end
@end

@private singularResponseSampleCode(apiMethod, sampleInitCode)
  @if apiMethod.hasReturnValue
    response = {@methodCallSampleCode(apiMethod, sampleInitCode)}
  @else
    {@methodCallSampleCode(apiMethod, sampleInitCode)}
  @end
@end

# Render the API method call itself
@private methodCallSampleCode(apiMethod, sampleInitCode)
  @if apiMethod.hasRequestStreaming
    client.{@apiMethod.name}(requests)
  @else
    client.{@apiMethod.name}(\
      {@sampleMethodCallArgList(sampleInitCode)}\
    )
  @end
@end

@private responseStreamingSampleCode(apiMethod, sample)
  for response_item in {@methodCallSampleCode(apiMethod, sample.sampleInitCode)}:
    {@processResponse(sample)}
@end

# Render the API method call for page streaming
@private pagedMethodCallSampleCode(apiMethod, sampleInitCode)
  client.{@apiMethod.name}(\
    {@sampleMethodCallArgList(sampleInitCode)}\
    ).pages
@end

@private sampleMethodCallArgListAndComma(sampleInitCode)
  @if sampleInitCode.fieldSettings
    {@sampleMethodCallArgList(sampleInitCode)}, {@""}
  @end
@end

@private sampleMethodCallArgList(sampleInitCode)
  @join fieldSetting : sampleInitCode.requiredFieldSettings on ", "
    {@fieldSetting.identifier}
  @end
  @if sampleInitCode.optionalFieldSettings
    @if sampleInitCode.requiredFieldSettings
      ,{@" "}
    @end
    @join fieldSetting : sampleInitCode.optionalFieldSettings on ", "
      {@fieldSetting.fieldName}={@fieldSetting.identifier}
    @end
  @end
@end

@private processResponse(sample)
  {@processOutputViews(sample.outputs)}
@end

@private processOutputViews(outputViews)
  @join view : outputViews on BREAK
    @switch view.kind
      @case "COMMENT"
        {@processCommentView(view)}
      @case "DEFINE"
        {@processDefineView(view)}
      @case "ARRAY_LOOP"
        {@processArrayLoopView(view)}
      @case "MAP_LOOP"
        {@processMapLoopView(view)}
      @case "PRINT"
        {@processPrintView(view)}
      @case "WRITE_FILE"
        {@processWriteFileView(view)}
      @default
        $unhandledResponseForm: {@view}
    @end
  @end
@end

@private processPrintView(view)
  # Since numeric comparison seems to not work, we use explicit zero tests
  @if not(view.interpolatedString.args.size)
    print('{@view.interpolatedString.format}')
  @else
    @if view.interpolatedString.format == "{}"
      print({@view.interpolatedString.args.get(0)})
    @else
      print('{@view.interpolatedString.format}'.format({@commaSeparatedFields(view.interpolatedString.args)}))
    @end
  @end
@end

@private processCommentView(view)
  {@toComments(view.lines)}
@end

@private processArrayLoopView(view)
  for {@view.variableName} in {@variableField(view.collection)}:
    {@processOutputViews(view.body)}
@end

@private processMapLoopView(view)
  @if and(view.keyVariableName, view.valueVariableName)
    for {@view.keyVariableName}, {@view.valueVariableName} in {@variableField(view.map)}.items():

  @else
    @if view.keyVariableName
      for {@view.keyVariableName}, _ in {@variableField(view.map)}.items():

    @else
      @if view.valueVariableName
        for _, {@view.valueVariableName} in {@variableField(view.map)}.items():

      @else
        $unhandledMapLoopView: {@view}

      @end
    @end
  @end
    {@processOutputViews(view.body)}

@end

@private processDefineView(view)
  {@view.variableName} = {@variableField(view.reference)}
@end

@private processWriteFileView(view)
  @if view.contents.type.isBytesType
    with open({@formattedFileName(view.fileName)}, 'wb') as out:
      out.write({@variableField(view.contents)})
  @else
    @if view.contents.type.isStringType
      with open({@formattedFileName(view.fileName)}, 'w') as out:
        out.write({@variableField(view.contents)})
    @else
      $unhandled type: {@view.contents.type}
    @end
  @end
@end


@private formattedFileName(view)
  @if view.args.isEmpty
    '{@view.format}'
  @else
    @if view.format == "{}"
      str(view.get(0))
    @else
      '{@view.format}'.format({@commaSeparatedFields(view.args)})
    @end
  @end
@end


@private commaSeparatedFields(args)
  @join arg : args on ", "
    {@arg}
  @end
@end

@private variableField(arg)
  {@arg.variable}{@accessor(arg.accessors)}
@end

@private accessor(accessors)
  @join field : accessors on ""
    {@field}
  @end
@end
