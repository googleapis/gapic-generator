@extends "py/common.snip"
@extends "py/sample_init.snip"

@snippet generate(sampleFile)
  {@licenseSection(sampleFile.fileHeader)}
  {@""}
  @let apiMethod = sampleFile.libraryMethod
    @let sample = apiMethod.samples.get(0)
      @# DO NOT EDIT! This is a generated sample ("{@sample.callingForm}",  "{@sample.valueSet.id}")

      @# To install the latest published package dependency, execute the following:
      @#   pip install {@sampleFile.gapicPackageName}

      {@standaloneSample(apiMethod, sample)}
    @end
  @end
@end

# The structure of this should be parallel to that of method_sample.snip:@incodeSampleCall.
#
# FIXME: Replace the following function calls with calls to functions that emit full standalone samples. These stubs have been adapted from method_sample.snip
@snippet standaloneSample(apiMethod, sample)
  @# [START {@sample.regionTag}]

  {@importList(sample.initCode.importSection.appImports)}

  def sample_{@apiMethod.name}({@sampleFuncParam(sample.initCode.argDefaultParams)}):
    @# [START {@sample.regionTag}_core]

    client = {@apiMethod.apiModuleName}.{@apiMethod.apiClassName}()

    @if sample.initCode.argDefaultLines
      @join line : util.pretty(initCode(sample.initCode.argDefaultLines))
        @# {@line}
      @end


    @end
    @if sample.initCode.lines
      {@initCode(sample.initCode.lines)}

    @end
    @switch sample.callingForm
    @case "Request"
      {@optionalArrayMethodSampleCodeNonStreaming(apiMethod, sample.initCode)}
      {@processResponse(sample)}
    @case "RequestPaged"
      {@pagedOptionalArrayMethodSampleCodePaged(apiMethod, sample)}
    @case "RequestPagedAll"
      {@pagedOptionalArrayMethodSampleCodeAll(apiMethod, sample)}
    @case "RequestStreamingBidi"
      {@optionalArrayMethodSampleCodeBidiStreaming(apiMethod, sample.initCode)}
      {@processResponse(sample)}
    @case "RequestStreamingClient"
      {@optionalArrayMethodSampleCodeClientStreaming(apiMethod, sample.initCode)}
      {@processResponse(sample)}
    @case "RequestStreamingServer"
      {@optionalArrayMethodSampleCodeServerStreaming(apiMethod, sample.initCode)}
      {@processResponse(sample)}
    @case "LongRunningPromise"
      {@lroSampleCode(apiMethod, sample.initCode)}
      {@processResponse(sample)}
    @default
      $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
    @end

    @# [END {@sample.regionTag}_core]

  @# [END {@sample.regionTag}]

  import sys
  
  def main():
    @# FIXME: Convert argv from strings to the correct types.
    sample_{@apiMethod.name}(*sys.argv[1:])

  if __name__ == '__main__':
    main()
@end

@private sampleFuncParam(defaultParams)
  @join param : defaultParams on ", "
    {@param.identifier}
  @end
@end

@private optionalArrayMethodSampleCodeNonStreaming(apiMethod, initCode)
  {@singularResponseSampleCode(apiMethod, initCode)}
@end

@private pagedOptionalArrayMethodSampleCodePaged(apiMethod, sample)
  @# Iterate over results one page at a time
  for page in {@pagedMethodCallSampleCode(apiMethod, sample.initCode)}:
      for element in page:
          {@processResponse(sample)}
@end

@private pagedOptionalArrayMethodSampleCodeAll(apiMethod, sample)
  @# Iterate over all results
  for element in {@methodCallSampleCode(apiMethod, sample.initCode)}:
      {@processResponse(sample)}
@end

@private optionalArrayMethodSampleCodeBidiStreaming(apiMethod, initCode)
  requests = [request]
  {@responseStreamingSampleCode(apiMethod, initCode)}
@end

@private optionalArrayMethodSampleCodeClientStreaming(apiMethod, initCode)
  requests = [request]
  {@singularResponseSampleCode(apiMethod, initCode)}
@end

@private optionalArrayMethodSampleCodeServerStreaming(apiMethod, initCode)
  {@responseStreamingSampleCode(apiMethod, initCode)}
@end

@private lroSampleCode(apiMethod, initCode)
  response = {@methodCallSampleCode(apiMethod, initCode)}

  def callback(operation_future):
      @# Handle result.
      result = operation_future.result()

  response.add_done_callback(callback)

  @# Handle metadata.
  metadata = response.metadata()
@end

@private singularResponseSampleCode(apiMethod, initCode)
  @if apiMethod.hasReturnValue
    response = {@methodCallSampleCode(apiMethod, initCode)}
  @else
    {@methodCallSampleCode(apiMethod, initCode)}
  @end
@end

# Render the API method call itself
@private methodCallSampleCode(apiMethod, initCode)
  @if apiMethod.hasRequestStreaming
    client.{@apiMethod.name}(requests)
  @else
    client.{@apiMethod.name}(\
      {@sampleMethodCallArgList(initCode)}\
    )
  @end
@end

@private responseStreamingSampleCode(apiMethod, initCode)
  for element in {@methodCallSampleCode(apiMethod, initCode)}:
      @# process element
      pass
@end

# Render the API method call for page streaming
@private pagedMethodCallSampleCode(apiMethod, initCode)
  client.{@apiMethod.name}(\
    {@sampleMethodCallArgListAndComma(initCode)}\
    options=CallOptions(page_token=INITIAL_PAGE))
@end

@private sampleMethodCallArgListAndComma(initCode)
  @if initCode.fieldSettings
    {@sampleMethodCallArgList(initCode)}, {@""}
  @end
@end

@private sampleMethodCallArgList(initCode)
  @join fieldSetting : initCode.requiredFieldSettings on ", "
    {@fieldSetting.identifier}
  @end
  @if initCode.optionalFieldSettings
    @if initCode.requiredFieldSettings
      ,{@" "}
    @end
    @join fieldSetting : initCode.optionalFieldSettings on ", "
      {@fieldSetting.fieldName}={@fieldSetting.identifier}
    @end
  @end
@end

@private processResponse(sample)
  @if sample.outputs.size == 0
    print(response)
  @else
    {@processOutputViews(sample.outputs)}
  @end
@end

@private processOutputViews(outputViews)
  @join view : outputViews on BREAK
    @switch view.kind
      @case "COMMENT"
        {@processCommentView(view)}
      @case "DEFINE"
        {@processDefineView(view)}
      @case "LOOP"
        {@processLoopView(view)}
      @case "PRINT"
        {@processPrintView(view)}
      @default
        $unhandledResponseForm: {@view}
    @end
  @end
@end

@private processPrintView(view)
  # Since numeric comparison seems to not work, we use explicit zero tests
  @if not(view.args.size)
    print('{@view.format}')
  @else
    @if view.format == "{}"
      print({@variableField(view.args.get(0))})
    @else
      print('{@view.format}'.format({@concatenatedArgs(view.args)}))
    @end
  @end
@end

@private processCommentView(view)
  {@toComments(view.lines)}
@end

@private processLoopView(view)
  for {@view.variableName} in {@variableField(view.collection)}:
    {@processOutputViews(view.body)}
@end

@private processDefineView(view)
  {@view.variableName} = {@variableField(view.reference)}
@end


@private concatenatedArgs(args)
  @join arg : args on ", "
    {@variableField(arg)}
  @end
@end

@private variableField(arg)
  {@arg.variable}{@accessor(arg.accessors)}
@end

@private accessor(accessors)
  @join field : accessors on ""
    .{@field}
  @end
@end
