@extends "py/common.snip"
@extends "py/method_sample.snip"

@snippet generate(sampleFile)
  @#### [ This is an auto-generated sample file produced by the gapic-generator. Sample name: "{@sampleFile.className}" ]
  @#### STUB standalone sample "{@sampleFile.className}" #####

  @# FIXME: Insert here set-up comments that we never want to display in cloudsite. These are seen by users perusing the samples directly in the repository.

  @# To run with the published packaged, execute the following before running this code:
  @#   pip install {@sampleFile.gapicPackageName}

  @# [START full_sample]

  @# FIXME: Insert here boilerplate code not directly related to the method call itself.

  @let apiMethod = sampleFile.libraryMethod
    @let sample = apiMethod.samples.get(0)
      @##     calling form "{@sample.callingForm.toString}"
      @##     valueSet "{@sample.valueSet.id}" ("{@sample.valueSet.title}")
      @##       description: "{@sample.valueSet.description}"
      @##       {@sample.valueSet.parameters}
      @##     apiMethod "{@apiMethod.name}" of type "{@apiMethod.type}"

      @# [START core_sample]

      @# FIXME: Insert here code to prepare the request fields, make the call, process the response.

      {@standaloneSample(apiMethod, sample)}
      {@processResponse(sample)}

      @# [END core_sample]

      @# FIXME: Insert here clean-up code.

    @end
  @end
  @# [END full_sample]
@end

# The structure of this should be parallel to that of method_sample.snip:@incodeSampleCall.
#
# FIXME: Replace the following function calls with calls to functions that emit full standalone samples. These stubs have been adapted from method_sample.snip
@snippet standaloneSample(apiMethod, sample)
  {@incodeSampleSetup(apiMethod, sample)}
  @switch sample.callingForm
  @case "Request"
    {@optionalArrayMethodSampleCodeNonStreaming(apiMethod, sample.initCode)}
  @case "RequestPaged"
    {@pagedOptionalArrayMethodSampleCodePaged(apiMethod, sample.initCode)}
  @case "RequestPagedAll"
    {@pagedOptionalArrayMethodSampleCodeAll(apiMethod, sample.initCode)}
  @case "RequestStreamingBidi"
    {@optionalArrayMethodSampleCodeBidiStreaming(apiMethod, sample.initCode)}
  @case "RequestStreamingClient"
    {@optionalArrayMethodSampleCodeClientStreaming(apiMethod, sample.initCode)}
  @case "RequestStreamingServer"
    {@optionalArrayMethodSampleCodeServerStreaming(apiMethod, sample.initCode)}
  @case "LongRunningPromise"
    {@lroSampleCode(apiMethod, sample.initCode)}
  @default
    $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
  @end
@end



@private processResponse(sample)
  @if sample.outputs.size == 0
    print(response)
  @else
    {@processOutputViews(sample.outputs)}
  @end
@end

@private processOutputViews(outputViews)
  @join view : outputViews on BREAK
    @switch view.kind
      @case "ASSIGNMENT"
        {@processAssignmentView}
      @case "COMMENT"
        {@processCommentView(view)}
      @case "LOOP"
        {@processLoopView(view)}
      @case "PRINT"
        {@processPrintView(view)}
      @default
        $unhandledResponseForm: {@outs}
    @end
  @end
@end

@private processPrintView(view)
  # Since numeric comparison seems to not work, we use explicit zero tests
  @if not(view.args.size)
    print('{@view.format}')
  @else
    @if view.format == "{}"
      print({@variableField(view.args.get(0))})
    @else
      print('{@view.format}'.format({@concatenatedArgs(view.args)}))
    @end    
  @end
@end

@private processCommentView(view)
  {@toComments(view.lines)}
@end

@private processLoopView(view)
  for ({@view.variable} in {@variableField(view.collection)}):
    {@processOutputViews(view.body)}
@end

@private processAssignmentView(view)
  {@view.variable} = {@variableField(view.reference)}
@end


@private concatenatedArgs(args)
  @join arg : args on ", "
    {@variableField(arg)}
  @end
@end

@private variableField(arg)
  {@arg.variable}{@accessor(arg.accessors)}
@end

@private accessor(accessors)
  @join field : accessors on ""
    .{@field}
  @end
@end
