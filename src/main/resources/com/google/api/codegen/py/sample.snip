@snippet generate(class)
    """
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the {@class.apiTitle}
       and check the quota for your project at
       https://console.developers.google.com/apis/api/{@class.apiName}
    @switch class.auth.type
    @case "APPLICATION_DEFAULT_CREDENTIALS"
        2. This sample uses Application Default Credentials for authentication.
           If not already done, install the gcloud CLI from
           https://cloud.google.com/sdk and run
           `gcloud beta auth application-default login`.
           For more information, see
           https://developers.google.com/identity/protocols/application-default-credentials
        3. Install the Python client library for Google APIs by running
           `pip install --upgrade google-api-python-client`
    @default
        2. Install the Python client library for Google APIs by running
           `pip install --upgrade google-api-python-client`
    @end
    """
    @if class.hasResponse
        from pprint import pprint
    @end

    from googleapiclient import discovery
    @if class.auth.type == "APPLICATION_DEFAULT_CREDENTIALS"
        from oauth2client.client import GoogleCredentials
    @end

    @switch class.auth.type
    @case "NONE"
    @case "APPLICATION_DEFAULT_CREDENTIALS"
        {@class.credentialsVarName} = GoogleCredentials.get_application_default()

    @case "OAUTH_3L"
        @# TODO: Change placeholder below to generate authentication credentials. See
        @# {@class.auth.instructionsUrl}
        @#
        @if class.auth.isScopesSingular
            @# Authorize using the following scope:
        @else
            @# Authorize using one of the following scopes:
        @end
        @join scope : class.auth.scopes
            @#     '{@scope}'
        @end
        {@class.credentialsVarName} = None

    @case "API_KEY"
        {@class.credentialsVarName} = ''  @# TODO: Update placeholder with desired API key.

    @end
    {@class.serviceVarName} = discovery.build({@paramList(class.discoveryBuildParams)})

    @join field : class.requiredFields if class.requiredFields
        {@field(field, FALSE)}

    @end
    @join field : class.optionalFields if class.optionalFields
        {@field(field, FALSE)}

    @end
    @if class.hasRequestBody
        {@class.requestBodyVarName} = {
            @if class.requestBodyFields
                @join field : class.requestBodyFields
                    {@field(field, TRUE)}

                @end

            @end
            @switch class.methodVerb
            @case "PATCH"
                @# TODO: Add desired entries to the request body. Only assigned entries
                @# will be changed.
            @case "PUT"
                @# TODO: Add desired entries to the request body. All existing entries
                @# will be replaced.
            @default
                @# TODO: Add desired entries to the request body.
            @end
        }

    @end
    @if class.hasMediaUpload
        @# TODO: Add desired media content for upload. For more information, see
        @# https://developers.google.com/api-client-library/python/guide/media_upload

    @end
    @if class.hasMediaDownload
        @# TODO: Use `{@class.lastMethodNameComponent}_media` in place of `{@class.lastMethodNameComponent}` below to download media content.
        @# For multipart download options, see
        @# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

    @end
    {@class.requestVarName} = {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@paramList(class.methodParamAssigments)})
    @if class.isPageStreaming
        while {@class.requestVarName} is not None:
            {@class.responseVarName} = {@class.requestVarName}.execute()

            @if class.pageStreaming.isResourceRepeated
                @if class.pageStreaming.isResourceMap
                    for {@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.resourceValueVarName} in {@class.responseVarName}['{@class.pageStreaming.resourceFieldName}'].items():
                        @# TODO: Change code below to process each ({@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.resourceValueVarName}) item:
                        pprint({@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.resourceValueVarName})
                @else
                    for {@class.pageStreaming.resourceVarName} in {@class.responseVarName}['{@class.pageStreaming.resourceFieldName}']:
                        @# TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` resource:
                        pprint({@class.pageStreaming.resourceVarName})
                @end
            @else
                @# TODO: Change code below to process each `{@class.responseVarName}['{@class.pageStreaming.resourceFieldName}']` resource:
                pprint({@class.responseVarName}['{@class.pageStreaming.resourceFieldName}'])
            @end

            @if class.pageStreaming.isResourceSetterInRequestBody
                {@class.requestBodyVarName}.{@class.pageStreaming.pageTokenName} = {@class.responseVarName}.{@class.pageStreaming.nextPageTokenName}
            @else
                {@class.requestVarName} = {@class.serviceVarName}.{@callChain(class.methodNameComponents)}_next(previous_request={@class.requestVarName}, previous_response={@class.responseVarName})
            @end
    @else
        @if class.hasResponse
            {@class.responseVarName} = {@class.requestVarName}.execute()

            @# TODO: Change code below to process the `{@class.responseVarName}` dict:
            pprint({@class.responseVarName})
        @else
            {@class.requestVarName}.execute()
        @end
    @end
@end

@private field(field, isRequestBodyField)
    @if field.description
        @join line : util.getDocLines(field.description, 100)
            @# {@line}
        @end


    @end
    @if isRequestBodyField
        '{@field.name}': {@field.defaultValue},  @# TODO: Update placeholder value.
    @else
        {@field.name} = {@field.defaultValue}  @# TODO: Update placeholder value.
    @end

    @if field.example
        @# {@field.example}
    @end
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "()."
    {@resource}
  @end
@end

@private paramList(params)
  @join param : params on ", "
    {@param}
  @end
@end
