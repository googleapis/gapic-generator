@extends "../common.snip"

@snippet generateMethodSampleCode(docConfig)
  @let prompt = ">>>", \
       ApiName = docConfig.getApiName
    Example:
      @join import : docConfig.getAppImports
        {@prompt} {@import}
      @end
      {@prompt} api = {@ApiName}()
      {@prompt} {@callResultSampleCode(docConfig.getReturnType)}{@methodCallSampleCode(docConfig)}
  @end
@end

# Optionally render the return value from the API method call
@private callResultSampleCode(returnType)
  @if returnType.isEmpty
  @else
    response = {@""}
  @end
@end

# Render the API method call itself
@private methodCallSampleCode(docConfig)
  @if docConfig.isUnpagedListCallableVariant
    # FIXME: make this correct
    api.{@methodCallName(docConfig)}().call({@argList(docConfig.getParams)})
  @else
    @if docConfig.isCallableVariant
      # FIXME: make this correct
      future.get()
    @else
      api.{@methodCallName(docConfig)}({@argList(docConfig.getParams)})
    @end
  @end
@end

# Generate argument list
@private argList(params)
  @join param : params on ", "
    {@paramNameFormatted(param)}
  @end
@end

# Format parameter name
@private paramNameFormatted(param)
  @if param.hasFormattingConfig
    formatted{@context.lowerCamelToUpperCamel(param.getName)}
  @else
    {@param.getName}
  @end
@end

# Render the name of the method call
@private methodCallName(docConfig)
  @if docConfig.isCallableVariant
    # FIXME: make this correct
    {@methodCallNameIter(docConfig)}Callable
  @else
    {@docConfig.getMethodName}
  @end
@end
