@extends "common.snip"

@snippet generateMethodSampleCode(docConfig)
  @let prompt = ">>>", \
       ApiName = docConfig.getApiName, \
       initCode = {@initCode(prompt, docConfig.getInitCode)} 
    Example:
      @join import : docConfig.getAppImports
        {@prompt} {@import}
      @end
      {@prompt} api = {@ApiName}()
      @if initCode 
        {@initCode}
      @end
      {@prompt} {@callResultSampleCode(docConfig.getReturnType)}{@methodCallSampleCode(docConfig)}
  @end
@end

# Helper functions for generateMethodSampleCode()

# Generate argument initialization code for API call
@private initCode(prompt, initCodeSpec)
  @join line : initCodeSpec.getLines()
    @switch line.getLineType.toString()
    @case "StructureInitLine"
      {@prompt} {@initLineStructure(line)}
    @case "ListInitLine"
      {@prompt} {@initLineList(line)}
    @case "SimpleInitLine"
      {@prompt} {@initLineSimple(line)}
    @default
      {@unhandledCase()}
    @end
  @end
@end

# Generate a Protobuf message argument
@private initLineStructure(line)
  {@formattedIdentifier(line)} = {@line.getType}({@initLineStructureArgs(line)})
@end

# Helper method for initLineStructure()
@private initLineStructureArgs(line) {
  @join fieldSetting : line.getFieldSettings on ", "
    {@formattedIdentifier(fieldSetting)}
  @end
@end

# Generate a List argument
@private initLineList(line)
  {@formattedIdentifier(line)} = [{@initList(line)}];
@end

# Helper method for initLineList()
@private initList(line)
  @join identifier : line.getElementIdentifiers on ", "
    {@identifier}
  @end
@end

# Generate a simple argument
@private initLineSimple(line)
  {@formattedIdentifier(line)} = {@initValue(line)};
@end

# Properly format an identifier for this language
@private formattedIdentifier(lineOrFieldSetting)
  @if lineOrFieldSetting.getInitValueConfig.hasFormattingConfig
    {@lineOrFieldSetting.getInitValueConfig.getCollectionConfig.getEntityName}_{@lineOrFieldSetting.getIdentifier}
  @else
    {@lineOrFieldSetting.getIdentifier}
  @end
@end

# Value for simple argument
@private initValue(line)
  @let metadata = line.getInitValueConfig
    @if metadata.hasFormattingConfig()
      {@metadata.getApiWrapperName}.{@formatResourceFunctionName(metadata.getCollectionConfig)}({@formatResourceFunctionArgs(metadata.getCollectionConfig)})
    @else
      {@context.defaultValue(line.getType, importHandler)}
    @end
  @end
@end

# Format arguments for resource function call in snippet
@private formatResourceFunctionArgs(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() on ", "
    "[{@context.lowerUnderscoreToUpperUnderscore(param)}]"
  @end
@end

# Optionally render the return value from the API method call
@private callResultSampleCode(returnType)
  @if returnType.isEmpty
  @else
    response = {@""}
  @end
@end

# Render the API method call itself
@private methodCallSampleCode(docConfig)
  api.{@methodCallName(docConfig)}({@argList(docConfig.getInitCode.getArgFields)})
@end

# Render the name of the method call
@private methodCallName(docConfig)
  {@docConfig.getMethodName}
@end

# Generate argument list
@private argList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@formattedIdentifier(fieldSetting)}
  @end
@end
