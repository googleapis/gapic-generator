@extends "py/common.snip"

# Generate brief code examples for method-level documentation.
@snippet exampleInCode(apiMethod)
  Example:
      @join line : util.getDocLines(incodeSamples(apiMethod))
          {@util.exampleLine(line)}
      @end
@end

@snippet incodeSamples(apiMethod)
    @join sample : apiMethod.samples on BREAK.add(BREAK).add(BREAK).add("# Alternatively:").add(BREAK)
      @let firstSample = apiMethod.samples.get(0)
        # Print the set-up code for the first sample, and for
        # subsequent samples where the code differs from the first
        @if or(and(sample.callingForm == firstSample.callingForm, \
                    sample.valueSet.id == firstSample.valueSet.id), \
               sampleSetupDiffers(firstSample, sample))
          {@incodeSampleSetup(apiMethod, sample)}
        @end

        {@incodeSampleCall(apiMethod, sample)}
      @end
    @end
@end

# This function returns true iff @incodeSampleSetup() would produce
# different code for firstSample and secondSample.
@snippet sampleSetupDiffers(firstSample, secondSample) horizontal
  @if or(secondSample.initCode.importSection.appImports != firstSample.initCode.importSection.appImports, \
         secondSample.initCode.lines != firstSample.initCode.lines)
    sampleSetupDiffers: true
  @end
@end

@snippet incodeSampleSetup(apiMethod, sample)
  {@importList(sample.initCode.importSection.appImports)}

  client = {@apiMethod.apiModuleName}.{@apiMethod.apiClassName}()

  @if sample.initCode.lines
    {@initCode(sample.initCode)}

  @end
@end

@snippet incodeSample(apiMethod, sample)
  {@incodeSampleSetup(apiMethod, sample)}
  {@incodeSampleCall(apiMethod, sample)}
@end

# The structure of this should be parallel to that of standalone_sample.snip:@standaloneSample
@snippet incodeSampleCall(apiMethod, sample)
  @switch sample.callingForm
  @case "Request"
    {@optionalArrayMethodSampleCodeNonStreaming(apiMethod, sample.initCode)}
  @case "RequestPaged"
    {@pagedOptionalArrayMethodSampleCodePaged(apiMethod, sample.initCode)}
  @case "RequestPagedAll"
    {@pagedOptionalArrayMethodSampleCodeAll(apiMethod, sample.initCode)}
  @case "RequestStreamingBidi"
    {@optionalArrayMethodSampleCodeBidiStreaming(apiMethod, sample.initCode)}
  @case "RequestStreamingClient"
    {@optionalArrayMethodSampleCodeClientStreaming(apiMethod, sample.initCode)}
  @case "RequestStreamingServer"
    {@optionalArrayMethodSampleCodeServerStreaming(apiMethod, sample.initCode)}
  @case "LongRunningPromise"
    {@lroSampleCode(apiMethod, sample.initCode)}
  @default
    $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
  @end
@end

# Helper functions

# Generate argument initialization code for API call
@snippet initCode(initCodeSpec)
  @join line : initCodeSpec.lines
    @switch line.lineType.toString
    @case "StructureInitLine"
      {@initLineStructure(line)}
    @case "ListInitLine"
      {@initLineList(line)}
    @case "SimpleInitLine"
      {@initLineSimple(line)}
    @case "MapInitLine"
      {@initLineMap(line)}
    @default
      {@unhandledCase()}
    @end
  @end
@end

# Generate a Protobuf message argument
@private initLineStructure(line)
  {@line.identifier} = {{@fieldSettingKwargs(line.fieldSettings)}}
@end

# Helper method for initLineStructure()
@private fieldSettingKwargs(fieldSettings)
    @join fieldSetting : fieldSettings on ", "
        '{@fieldSetting.fieldName}': {@fieldSetting.identifier}
    @end
@end

# Generate a List argument
@private initLineList(line)
  {@line.identifier} = [{@varList(line.elementIdentifiers)}]
@end

# Generate a Map argument
@private initLineMap(line)
  {@line.identifier} = {{@renderInitMap(line)}}
@end

# Helper method for initLineMap()
@private renderInitMap(line)
  @join entry : line.initEntries vertical on ","
    {@entry.key}: {@entry.valueString}
  @end
@end

# Generate a simple argument
@private initLineSimple(line)
  @if line.doc
    @if line.needsLeadingNewline
      {@BREAK}
    @end
    {@toComments(line.doc)}

  @end
  {@line.identifier} = {@renderInitValue(line.initValue)}
@end

# Value for simple argument
@private renderInitValue(initValue)
  @switch initValue.type
  @case "SimpleInitValueView"
    {@initValue.initialValue}
  @case "FormattedInitValueView"
    client.{@initValue.formatFunctionName}({@varList(initValue.formatArgs)})
  @default
    {@unhandledCase()}
  @end
@end

@private optionalArrayMethodSampleCode(apiMethod, initCode)
  @switch apiMethod.grpcStreamingType.toString
  @case "NonStreaming"
    {@optionalArrayMethodSampleCodeNonStreaming(apiMethod, initCode)}
  @case "ServerStreaming"
    {@optionalArrayMethodSampleCodeServerStreaming(apiMethod, initCode)}
  @case "ClientStreaming"
    {@optionalArrayMethodSampleCodeClientStreaming(apiMethod, initCode)}
  @case "BidiStreaming"
    {@optionalArrayMethodSampleCodeBidiStreaming(apiMethod, initCode)}
  @default
    {@unhandledCase()}
  @end
@end

@snippet optionalArrayMethodSampleCodeNonStreaming(apiMethod, initCode)
  {@singularResponseSampleCode(apiMethod, initCode)}
@end

@snippet optionalArrayMethodSampleCodeServerStreaming(apiMethod, initCode)
  {@responseStreamingSampleCode(apiMethod, initCode)}
@end

@snippet optionalArrayMethodSampleCodeClientStreaming(apiMethod, initCode)
  requests = [request]
  {@singularResponseSampleCode(apiMethod, initCode)}
@end

@snippet optionalArrayMethodSampleCodeBidiStreaming(apiMethod, initCode)
  requests = [request]
  {@responseStreamingSampleCode(apiMethod, initCode)}
@end

@snippet pagedOptionalArrayMethodSampleCodeAll(apiMethod, initCode)
  @# Iterate over all results
  {@responseStreamingSampleCode(apiMethod, initCode)}
@end

@snippet pagedOptionalArrayMethodSampleCodePaged(apiMethod, initCode)
  @# Iterate over results one page at a time
  for page in {@pagedMethodCallSampleCode(apiMethod, initCode)}:
      for element in page:
          @# process element
          pass
@end

@private responseStreamingSampleCode(apiMethod, initCode)
  for element in {@methodCallSampleCode(apiMethod, initCode)}:
      @# process element
      pass
@end

@private singularResponseSampleCode(apiMethod, initCode)
  @if apiMethod.hasReturnValue
    response = {@methodCallSampleCode(apiMethod, initCode)}
  @else
    {@methodCallSampleCode(apiMethod, initCode)}
  @end
@end

@snippet lroSampleCode(apiMethod, initCode)
  response = {@methodCallSampleCode(apiMethod, initCode)}

  def callback(operation_future):
      @# Handle result.
      result = operation_future.result()

  response.add_done_callback(callback)

  @# Handle metadata.
  metadata = response.metadata()
@end

# Render the API method call itself
@private methodCallSampleCode(apiMethod, initCode)
  @if apiMethod.hasRequestStreaming
    client.{@apiMethod.name}(requests)
  @else
    client.{@apiMethod.name}(\
      {@sampleMethodCallArgList(initCode)}\
    )
  @end
@end

# Render the API method call for page streaming
@private pagedMethodCallSampleCode(apiMethod, initCode)
  client.{@apiMethod.name}(\
    {@sampleMethodCallArgListAndComma(initCode)}\
    options=CallOptions(page_token=INITIAL_PAGE))
@end

# Generate comma-separated argument list
@private varList(params)
  @join param : params on ", "
    {@param}
  @end
@end

@snippet sampleMethodCallArgList(initCode)
  @join fieldSetting : initCode.requiredFieldSettings on ", "
    {@fieldSetting.identifier}
  @end
  @if initCode.optionalFieldSettings
    @if initCode.requiredFieldSettings
      ,{@" "}
    @end
    @join fieldSetting : initCode.optionalFieldSettings on ", "
      {@fieldSetting.fieldName}={@fieldSetting.identifier}
    @end
  @end
@end

@private sampleMethodCallArgListAndComma(initCode)
  @if initCode.fieldSettings
    {@sampleMethodCallArgList(initCode)}, {@""}
  @end
@end
