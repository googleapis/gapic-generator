@extends "../common.snip"

@snippet generateMethodSampleCode(docConfig)
  @let prompt = ">>>", \
       ApiName = docConfig.getApiName
    Example:
      @join import : docConfig.getAppImports
        {@prompt} {@import}
      @end
      #
      {@prompt} api = {@ApiName}()
      #
      # FIXME: adapt for Python
      #{@initCode(docConfig.getInitCode)}
      #
      @if docConfig.isUnpagedListCallableVariant
        # FIXME: adapt for Python
        @let resourcesField = docConfig.getResourcesFieldForUnpagedListCallable
          while (true) {
            {@callResultSampleCode(docConfig.getReturnType)}{@methodCallSampleCode(docConfig, apiName)};
            for ({@elementTypeName(resourcesField)} elements : response.{@getResourcesListCall(resourcesField)}) {
              // doThingsWith(elements);
            }
            String nextPageToken = response.getNextPageToken();
            if (!Strings.isNullOrEmpty(nextPageToken)) {
              request = request.toBuilder().setPageToken(nextPageToken).build();
            } else {
              break;
            }
          }
        @end
      @else
        @if docConfig.isPagedVariant
          # FIXME: adapt for Python
          for ({@docConfig.getReturnType} elements : {@methodCallSampleCode(docConfig)}) {
            // doThingsWith(elements);
          }
        @else
          {@prompt} {@callResultSampleCode(docConfig.getReturnType)}{@methodCallSampleCode(docConfig)}
        @end
      @end
  @end
@end

# Helper functions for generateMethodSampleCode()

# Optionally render the return value from the API method call
@private callResultSampleCode(returnType)
  @if returnType.isEmpty
  @else
    response = {@""}
  @end
@end

# Render the API method call itself
@private methodCallSampleCode(docConfig)
  @if docConfig.isUnpagedListCallableVariant
    # FIXME: adapt for Python
    api.{@methodCallName(docConfig)}().call({@argList(docConfig.getInitCode.getArgFields)})
  @else
    api.{@methodCallName(docConfig)}({@argList(docConfig.getInitCode.getArgFields)})
  @end
@end

# Generate argument list
@private argList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@formattedIdentifier(fieldSetting)}
  @end
@end

# Render the name of the method call
@private methodCallName(docConfig)
  {@docConfig.getMethodName}
@end
