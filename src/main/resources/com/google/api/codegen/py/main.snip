@extends "py/common.snip"
@extends "py/method_sample.snip"

@snippet generate(xapiClass)
    {@licenseSection(xapiClass.fileHeader)}
    {@editingInstructions(xapiClass)}

    {@moduleDocstring(xapiClass)}
    {@renderImportSection(xapiClass.fileHeader.importSection)}

    @if xapiClass.hasPageStreamingMethods
        _PageDesc = google.gax.PageDescriptor


    @end
    {@serviceClass(xapiClass)}
@end

@private editingInstructions(xapiClass)
    @#
    @# EDITING INSTRUCTIONS
    @# This file was generated from the file
    @# https://github.com/google/googleapis/blob/master/{@xapiClass.protoFilename},
    @# and updates to that file get reflected here through a refresh process.
    @# For the short term, the refresh process will only be runnable by Google engineers.
    @#
    @# The only allowed edits are to method and file documentation. A 3-way
    @# merge preserves those additions if the generated source changes.
@end

@private moduleDocstring(xapiClass)
    """Accesses the {@xapiClass.servicePhraseName}."""
@end

@private serviceClass(xapiClass)
    class {@xapiClass.name}(object):
        @if xapiClass.doc.lines
            {@documentation(xapiClass.doc)}

        @end
        {@constantSection(xapiClass)}

        @if xapiClass.pathTemplates
            {@pathTemplateSection(xapiClass)}

        @end
        {@initMethodSection(xapiClass)}

        {@serviceMethodsSection(xapiClass)}

@end

@private documentation(doc)
    @if doc.remainingLines
        """
        @join line : doc.lines
            {@line}
        @end
        """
    @else
        """{@doc.firstLine}"""
    @end
@end

@private constantSection(xapiClass)
    SERVICE_ADDRESS = '{@xapiClass.serviceAddress}'
    """The default address of the service."""

    DEFAULT_SERVICE_PORT = {@xapiClass.servicePort}
    """The default port of the service."""
    @if xapiClass.hasPageStreamingMethods

        _PAGE_DESCRIPTORS = {
            @join descriptor : xapiClass.pageStreamingDescriptors on {@", "}.add(BREAK)
                '{@descriptor.methodName}': _PageDesc(
                    '{@descriptor.requestTokenFieldName}',
                    '{@descriptor.responseTokenFieldName}',
                    '{@descriptor.resourcesFieldName}'
                )
            @end
        }
    @end

    @# The scopes needed to make gRPC calls to all of the methods defined in
    @# this service
    _ALL_SCOPES = (
        @join auth_scope : xapiClass.authScopes on BREAK
            '{@auth_scope}',
        @end
    )
@end

@private constructDefaults(xapiClass)
    defaults = api_callable.construct_settings(
        '{@xapiClass.interfaceKey}',
        {@xapiClass.clientConfigName}.config,
        client_config,
        config.STATUS_CODE_NAMES,
        metrics_headers=metrics_headers,
        @if xapiClass.hasPageStreamingMethods
            page_descriptors=self._PAGE_DESCRIPTORS,
        @end
    )
@end

@private initMethodSection(xapiClass)
    def __init__(self,
            channel=None,
            credentials=None,
            ssl_credentials=None,
            scopes=None,
            client_config=None,
            lib_name=None,
            lib_version='',
            metrics_headers=()):
        """Constructor.

        Args:
            channel (~grpc.Channel): A ``Channel`` instance through
                which to make calls.
            credentials (~google.auth.credentials.Credentials): The authorization
                credentials to attach to requests. These credentials identify this
                application to the service.
            ssl_credentials (~grpc.ChannelCredentials): A
                ``ChannelCredentials`` instance for use with an SSL-enabled
                channel.
            scopes (Sequence[str]): A list of OAuth2 scopes to attach to requests.
            client_config (dict):
                A dictionary for call options for each method. See
                :func:`google.gax.construct_settings` for the structure of
                this data. Falls back to the default config if not specified
                or the specified config is missing data points.
            lib_name (str): The API library software used for calling
                the service. (Unless you are writing an API client itself,
                leave this as default.)
            lib_version (str): The API library software version used
                for calling the service. (Unless you are writing an API client
                itself, leave this as default.)
            metrics_headers (dict): A dictionary of values for tracking
                client library metrics. Ultimately serializes to a string
                (e.g. 'foo/1.2.3 bar/3.14.1'). This argument should be
                considered private.
        """
        @# Unless the calling application specifically requested
        @# OAuth scopes, request everything.
        if scopes is None:
            scopes = self._ALL_SCOPES

        @# Initialize an empty client config, if none is set.
        if client_config is None:
            client_config = {}

        @# Initialize metrics_headers as an ordered dictionary
        @# (cuts down on cardinality of the resulting string slightly).
        metrics_headers = collections.OrderedDict(metrics_headers)
        metrics_headers['gl-python'] = platform.python_version()

        @# The library may or may not be set, depending on what is
        @# calling this client. Newer client libraries set the library name
        @# and version.
        if lib_name:
            metrics_headers[lib_name] = lib_version

        @# Finally, track the GAPIC package version.
        metrics_headers['gapic'] = pkg_resources.get_distribution(
            '{@xapiClass.gapicPackageName}',
        ).version

        @# Load the configuration defaults.
        {@constructDefaults(xapiClass)}
        @join stub : xapiClass.stubs
            self.{@stub.name} = config.create_stub(
                {@stub.grpcClientTypeName},
                channel=channel,
                service_path=self.SERVICE_ADDRESS,
                service_port=self.DEFAULT_SERVICE_PORT,
                credentials=credentials,
                scopes=scopes,
                ssl_credentials=ssl_credentials)
        @end
        @if xapiClass.hasLongRunningOperations

            self.operations_client = operations_client.OperationsClient(
                channel=channel,
                credentials=credentials,
                ssl_credentials=ssl_credentials,
                scopes=scopes,
                client_config=client_config,
                metrics_headers=metrics_headers,
            )
        @end

        @join apiMethod : xapiClass.apiMethods
            self._{@apiMethod.name} = api_callable.create_api_call(
                self.{@apiMethod.stubName}.{@apiMethod.grpcMethodName},
                settings=defaults['{@apiMethod.name}'])
        @end
@end

@private pathTemplateSection(xapiClass)
    @join pathTemplate : xapiClass.pathTemplates
        {@pathTemplate.name} = path_template.PathTemplate(
            '{@pathTemplate.pattern}')
    @end

    @join function : xapiClass.formatResourceFunctions

        {@createResourceFunction(function)}
    @end
    @join function : xapiClass.parseResourceFunctions

        {@createMatchFunctions(function)}
    @end
@end

@private createResourceFunction(function)
    @@classmethod
    def {@function.name}(cls, {@createResourceFunctionParams(function.resourceIdParams)}):
        """Returns a fully-qualified {@function.entityName} resource name string."""
        return cls.{@function.pathTemplateName}.render({
            {@createRenderDictionary(function.resourceIdParams)}
        })
@end

@private createMatchFunctions(function)
    @@classmethod
    def {@function.name}(cls, {@function.entityNameParamName}):
        """Parses the {@function.outputResourceId} from a {@function.entityName} resource.

        Args:
            {@function.entityNameParamName} (str): A fully-qualified path representing a {@function.entityName}
                resource.

        Returns:
            A string representing the {@function.outputResourceId}.
        """
        return cls.{@function.pathTemplateName}.match({@function.entityNameParamName}).get('{@function.outputResourceId}')
@end

@private createResourceFunctionParams(params)
    @join param : params on ", "
        {@param.name}
    @end
@end

@private createRenderDictionary(params)
    @join param: params on BREAK
        '{@param.templateKey}': {@param.name},
    @end
@end

@private methodComments(apiMethod, apiMethodDoc)
    """
    @join line : util.trimDocs(apiMethodDoc.mainDocLines)
        {@line}
    @end

    @if apiMethod.hasRequestStreaming
        EXPERIMENTAL: This method interface might change in the future.

    @end
    {@sampleCode(apiMethod)}

    Args:
        @join paramDoc : apiMethodDoc.paramDocs
            @if paramDoc.lines
                {@paramDoc.paramName} ({@paramDoc.typeName}): {@paramDoc.firstLine}
                    @join line : paramDoc.remainingLines
                        {@line}
                    @end
            @else
                {@paramDoc.paramName} ({@paramDoc.typeName})
            @end
        @end
    @if apiMethodDoc.returnsDocLines

        Returns:
            @join line : apiMethodDoc.returnsDocLines
                  {@line}
            @end
    @end

    Raises:
        @join line : apiMethodDoc.throwsDocLines
            {@line}
        @end
    """
@end

@private serviceMethodsSection(xapiClass)
    @# Service calls
    @join apiMethod : xapiClass.apiMethods on BREAK.add(BREAK)
        {@flattenedMethod(apiMethod)}
    @end
@end

@private callLine(apiMethod)
    @if apiMethod.isLongRunningOperation
        return google.gax._OperationFuture(
            self._{@apiMethod.name}({@apiMethod.requestVariableName}, options),
            self.operations_client,
            {@apiMethod.longRunningView.operationPayloadTypeName},
            {@apiMethod.longRunningView.metadataTypeName},
            options)
    @else
        @if apiMethod.hasReturnValue
            return self._{@apiMethod.name}({@apiMethod.requestVariableName}, options)
        @else
            self._{@apiMethod.name}({@apiMethod.requestVariableName}, options)
        @end
    @end
@end

@private flattenedMethod(apiMethod)
    def {@apiMethod.name}(
            {@renderMethodParams(apiMethod.methodParams)}):
        {@methodComments(apiMethod, apiMethod.doc)}
        @if apiMethod.isSingularRequestMethod
            @if apiMethod.oneofParams
                {@checkOneOfParams(apiMethod.oneofParams)}

            @end
            @if apiMethod.optionalRequestObjectParamsNoPageToken
                @if apiMethod.requiredRequestObjectParams
                    request = {@apiMethod.requestTypeName}(
                        {@requestObjectParams(apiMethod.requiredRequestObjectParams)},
                        {@requestObjectParams(apiMethod.optionalRequestObjectParamsNoPageToken)})
                @else
                    request = {@apiMethod.requestTypeName}(
                        {@requestObjectParams(apiMethod.optionalRequestObjectParamsNoPageToken)})
                @end
            @else
                @if apiMethod.requiredRequestObjectParams
                    request = {@apiMethod.requestTypeName}(
                        {@requestObjectParams(apiMethod.requiredRequestObjectParams)})
                @else
                    request = {@apiMethod.requestTypeName}()
                @end
            @end
        @end
        {@callLine(apiMethod)}
@end

@private renderMethodParams(params)
    @join param : params on ",".add(BREAK)
        @if param.defaultValue
            {@param.name}=None
        @else
            {@param.name}
        @end
    @end
@end

@private checkOneOfParams(oneOfs)
    @join oneOf : oneOfs on BREAK
        @# Sanity check: We have some fields which are mutually exclusive;
        @# raise ValueError if more than one is sent.
        oneof.check_oneof(
            @join oneOfField : oneOf on BREAK
                {@oneOfField}={@oneOfField},
            @end
        )

    @end
@end

@private requestObjectParams(params)
    @join param : params on ",".add(BREAK)
        {@param.keyName}={@param.name}
    @end
@end
