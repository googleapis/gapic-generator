@extends "py/common.snip"
@extends "py/method_sample.snip"

@snippet generate(xapiClass)
    {@licenseSection(xapiClass.fileHeader)}

    """Accesses the {@xapiClass.servicePhraseName}."""
    {@renderImportSection(xapiClass.fileHeader.importSection)}


    _GAPIC_LIBRARY_VERSION = pkg_resources.get_distribution(
        '{@xapiClass.gapicPackageName}',
    ).version


    class {@xapiClass.name}(object):
        @if xapiClass.doc.lines
            @if xapiClass.doc.remainingLines
                """
                @join line : xapiClass.doc.lines
                    {@line}
                @end
                """
            @else
                """{@xapiClass.doc.firstLine}"""
            @end


        @end
        SERVICE_ADDRESS = '{@xapiClass.serviceAddress}:{@xapiClass.servicePort}'
        """The default address of the service."""

        @# The scopes needed to make gRPC calls to all of the methods defined in
        @# this service
        _DEFAULT_SCOPES = (
            @join auth_scope : xapiClass.authScopes on BREAK
                '{@auth_scope}',
            @end
        )

        @# The name of the interface for this client. This is the key used to find
        @# method configuration in the client_config dictionary.
        _INTERFACE_NAME = '{@xapiClass.interfaceKey}'

        @if xapiClass.formatResourceFunctions

            @join function : xapiClass.formatResourceFunctions
                @@classmethod
                def {@function.name}(cls, {@createResourceFunctionParams(function.resourceIdParams)}):
                    """Return a fully-qualified {@function.entityName} string."""
                    return google.api_core.path_template.expand(
                        '{@function.pattern}',
                        {@createRenderParams(function.resourceIdParams)}
                    )

            @end
        @end
        def __init__(self, channel=None, credentials=None,
                client_config={@xapiClass.clientConfigName}.config,
                client_info=None):
            """Constructor.

            Args:
                channel (grpc.Channel): A ``Channel`` instance through
                    which to make calls. This argument is mutually exclusive
                    with ``credentials``; providing both will raise an exception.
                credentials (google.auth.credentials.Credentials): The
                    authorization credentials to attach to requests. These
                    credentials identify this application to the service. If none
                    are specified, the client will attempt to ascertain the
                    credentials from the environment.
                client_config (dict): A dictionary of call options for each
                    method. If not specified, the default configuration is used.
                client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                    The client info used to send a user-agent string along with
                    API requests. If ``None``, then default info will be used.
                    Generally, you only need to set this if you're developing
                    your own client library.
            """
            # gRPC channel & client stub initialization.
            @# If both `channel` and `credentials` are specified, raise an
            @# exception (channels come with credentials baked in already).
            if channel is not None and credentials is not None:
                raise ValueError(
                    'The `channel` and `credentials` arguments to {} are mutually '
                    'exclusive.'.format(self.__class__.__name__),
                )

            @# Create the channel.
            self.channel = channel
            if self.channel is None:
                self.channel = google.api_core.grpc_helpers.create_channel(
                    self.SERVICE_ADDRESS,
                    credentials=credentials,
                    scopes=self._DEFAULT_SCOPES,
                )

            @# Create the gRPC stubs.
            @join stub : xapiClass.stubs
                self._{@stub.name} = (
                    {@stub.grpcClientTypeName}(self.channel))
            @end

            @if xapiClass.hasLongRunningOperations
                @# Operations client for methods that return long-running operations
                @# futures.
                self._operations_client = (
                    google.api_core.operations_v1.OperationsClient(self.channel))
            @end

            # Client information initialization.
            if client_info is None:
                client_info = (
                    google.api_core.gapic_v1.client_info.DEFAULT_CLIENT_INFO)
            client_info.gapic_version = _GAPIC_LIBRARY_VERSION
            self._client_info = client_info

            @# Parse out the default settings for retry and timeout for each RPC
            @# from the client configuration.
            @# (Ordinarily, these are the defaults specified in the `*_config.py`
            @# file next to this one.)
            self._method_configs = google.api_core.gapic_v1.config.parse_method_configs(
                client_config['interfaces'][self._INTERFACE_NAME],
            )

            self._inner_api_calls = {}

        def _intercept_channel(self, *interceptors):
            """ Experimental. Bind gRPC interceptors to the gRPC channel.

            Args:
                interceptors (*Union[grpc.UnaryUnaryClientInterceptor, grpc.UnaryStreamingClientInterceptor, grpc.StreamingUnaryClientInterceptor, grpc.StreamingStreamingClientInterceptor]):
                  Zero or more gRPC interceptors. Interceptors are given control in the order
                  they are listed.
            Raises:
                TypeError: If interceptor does not derive from any of
                  UnaryUnaryClientInterceptor,
                  UnaryStreamClientInterceptor,
                  StreamUnaryClientInterceptor, or
                  StreamStreamClientInterceptor.
            """
            self.channel = grpc.intercept_channel(self.channel, *interceptors)
            @join stub : xapiClass.stubs
                self._{@stub.name} = (
                    {@stub.grpcClientTypeName}(self.channel))
            @end
            @if xapiClass.hasLongRunningOperations
                @# Operations client for methods that return long-running operations
                @# futures.
                self._operations_client = (
                    google.api_core.operations_v1.OperationsClient(self.channel))
            @end
            self._inner_api_calls.clear()

        @# Service calls
        @join apiMethod : xapiClass.apiMethods on BREAK.add(BREAK)
            def {@apiMethod.name}(
                    {@renderMethodParams(apiMethod.methodParams)}):
                """
                @join line : util.trimDocs(apiMethod.doc.mainDocLines)
                    {@line}
                @end

                @if apiMethod.hasRequestStreaming
                    EXPERIMENTAL: This method interface might change in the future.

                @end
                {@exampleInCode(apiMethod)}

                Args:
                    @join paramDoc : apiMethod.doc.paramDocs
                        @if paramDoc.lines
                            {@paramDoc.paramName} ({@paramDoc.typeName}): {@paramDoc.firstLine}
                                @join line : paramDoc.remainingLines
                                    {@line}
                                @end
                        @else
                            {@paramDoc.paramName} ({@paramDoc.typeName})
                        @end
                    @end
                @if apiMethod.doc.returnsDocLines

                    Returns:
                        @join line : apiMethod.doc.returnsDocLines
                              {@line}
                        @end
                @end

                Raises:
                    @join line : apiMethod.doc.throwsDocLines
                        {@line}
                    @end
                """
                if '{@apiMethod.name}' not in self._inner_api_calls:
                    self._inner_api_calls['{@apiMethod.name}'] = google.api_core.gapic_v1.method.wrap_method(
                        self._{@apiMethod.stubName}.{@apiMethod.grpcMethodName},
                        default_retry=self._method_configs['{@apiMethod.grpcMethodName}'].retry,
                        default_timeout=self._method_configs['{@apiMethod.grpcMethodName}'].timeout,
                        client_info=self._client_info,
                    )

                @if apiMethod.isSingularRequestMethod
                    @if apiMethod.oneofParams
                        @join oneOf : apiMethod.oneofParams on BREAK
                            @# Sanity check: We have some fields which are mutually exclusive;
                            @# raise ValueError if more than one is sent.
                            google.api_core.protobuf_helpers.check_oneof(
                                @join oneOfField : oneOf on BREAK
                                    {@oneOfField}={@oneOfField},
                                @end
                            )

                        @end


                    @end
                    @if apiMethod.optionalRequestObjectParamsNoPageToken
                        @if apiMethod.requiredRequestObjectParams
                            request = {@apiMethod.requestTypeName}(
                                {@requestObjectParams(apiMethod.requiredRequestObjectParams)},
                                {@requestObjectParams(apiMethod.optionalRequestObjectParamsNoPageToken)},
                            )
                        @else
                            request = {@apiMethod.requestTypeName}(
                                {@requestObjectParams(apiMethod.optionalRequestObjectParamsNoPageToken)},
                            )
                        @end
                    @else
                        @if apiMethod.requiredRequestObjectParams
                            request = {@apiMethod.requestTypeName}(
                                {@requestObjectParams(apiMethod.requiredRequestObjectParams)},
                            )
                        @else
                            request = {@apiMethod.requestTypeName}()
                        @end
                    @end

                    @if apiMethod.headerRequestParams
                        if metadata is None:
                            metadata = []
                        metadata = list(metadata)
                        try:
                            routing_header = [{@routingHeader(apiMethod.headerRequestParams)}]
                        except AttributeError:
                            pass
                        else:
                            routing_metadata = google.api_core.gapic_v1.routing_header.to_grpc_metadata(routing_header)
                            metadata.append(routing_metadata)

                    @end
                @end
                @switch apiMethod.type
                @case "OptionalArrayMethod"
                    @if apiMethod.hasReturnValue
                        return self._inner_api_calls['{@apiMethod.name}']({@apiMethod.requestVariableName}{@optionalParams(apiMethod)})
                    @else
                        self._inner_api_calls['{@apiMethod.name}']({@apiMethod.requestVariableName}{@optionalParams(apiMethod)})
                    @end
                @case "PagedOptionalArrayMethod"
                    iterator = google.api_core.page_iterator.GRPCIterator(
                        client=None,
                        method=functools.partial(self._inner_api_calls['{@apiMethod.name}']{@optionalParams(apiMethod)}),
                        request={@apiMethod.requestVariableName},
                        items_field='{@apiMethod.pageStreamingView.resourcesFieldName}',
                        request_token_field='{@apiMethod.pageStreamingView.requestTokenFieldName}',
                        response_token_field='{@apiMethod.pageStreamingView.responseTokenFieldName}',
                    )
                    return iterator
                @case "LongRunningOptionalArrayMethod"
                    operation = self._inner_api_calls['{@apiMethod.name}']({@apiMethod.requestVariableName}{@optionalParams(apiMethod)})
                    return google.api_core.operation.from_gapic(
                        operation,
                        self._operations_client,
                        {@apiMethod.longRunningView.operationPayloadTypeName},
                        metadata_type={@apiMethod.longRunningView.metadataTypeName},
                    )
                @default
                    {@unhandledCase()}
                @end
        @end

@end

@private createResourceFunctionParams(params)
    @join param : params on ", "
        {@param.name}
    @end
@end

@private createRenderParams(params)
    @join param: params on BREAK
        {@param.templateKey}={@param.name},
    @end
@end

@private optionalParams(apiMethod)
    , retry=retry, timeout=timeout, metadata=metadata
@end

@private renderMethodParams(params)
    @join param : params on ",".add(BREAK)
        @if param.defaultValue
            {@param.name}={@param.defaultValue}
        @else
            {@param.name}
        @end
    @end
@end

@private requestObjectParams(params)
    @join param : params on ",".add(BREAK)
        {@param.keyName}={@param.name}
    @end
@end

@private routingHeader(params)
    @join param : params on ", "
        ('{@param.fullyQualifiedName}', {@routingHeaderGetters(param.gettersChain)})
    @end
@end

@private routingHeaderGetters(getters)
    @join getter : getters on "."
        {@getter}
    @end
@end
