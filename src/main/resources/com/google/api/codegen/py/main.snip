@extends "py/common.snip"
@extends "py/method_sample.snip"

@snippet generateFilename(service)
    {@context.upperCamelToLowerUnderscore(context.getApiWrapperName(service))}.py
@end

@snippet generateBody(service)
@end

@snippet generateModule(service, body, imports)
    {@renderLicenseSection(service)}

    {@moduleDocstring(service)}

    {@importSection(imports)}


    @if aliasSection(service)
        {@aliasSection(service)}


    @end
    {@serviceClass(service)}
@end

@private renderLicenseSection(service)
    @join line : context.getApiConfig.getCopyrightLines
      @# {@line}
    @end
    {@BREAK}@#
    @join line : context.getApiConfig.getLicenseLines
      @# {@line}
    @end
    @#
    @# EDITING INSTRUCTIONS
    @# This file was generated from the file
    @# https://github.com/google/googleapis/blob/master/{@service.getFile().getSimpleName()},
    @# and updates to that file get reflected here through a refresh process.
    @# For the short term, the refresh process will only be runnable by Google engineers.
    @#
    @# The only allowed edits are to method and file documentation. A 3-way
    @# merge preserves those additions if the generated source changes.
@end

@private moduleDocstring(service)
    """Accesses the {@service.getParent.getFullName} {@service.getSimpleName} API."""
@end

@private importSection(imports)
    @join import : imports
        {@import}
    @end
@end

@private aliasSection(service)
    @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service), \
            pageStreaming = context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethodsV2(service))
        # Note that this should be inside the page streaming conditional. But a snippets bug
        # causes the indentation to render improperly if so. The result is that sometimes we
        # generate too much whitespace, which can be removed by yapf in the pipeline.
        {@BREAK}
        @if pageStreaming
            _PageDesc = google.gax.PageDescriptor
        @end
    @end
@end

@private serviceClass(service)
    @let path_templates = {@pathTemplateSection(service)}, \
         documentation = {@defaultComments(service)}
        class {@context.getApiWrapperName(service)}(object):
            @if documentation
                {@documentation}

            @end
            {@constantSection(service)}

            @if path_templates
                {@path_templates}

            @end
            {@initMethodSection(service)}

            {@serviceMethodsSection(service)}

    @end
@end

@private constantSection(service)
    @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
        SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service.getModel)}'
        """The default address of the service."""

        DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()}
        """The default port of the service."""
        @if context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethodsV2(service))

            _PAGE_DESCRIPTORS = {
                @join method : context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethodsV2(service)) on {@", "}.add(BREAK)
                    @let pageStreaming = ifaceConfig.getMethodConfig(method).getPageStreaming(), \
                         requestToken = pageStreaming.getRequestTokenField().getSimpleName(), \
                         responseToken = pageStreaming.getResponseTokenField().getSimpleName(), \
                         resources = pageStreaming.getResourcesFieldName
                        '{@methodName(method)}': _PageDesc(
                            '{@requestToken}',
                            '{@responseToken}',
                            '{@resources}'
                        )
                    @end
                @end
            }
        @end

        @# The scopes needed to make gRPC calls to all of the methods defined in
        @# this service
        _ALL_SCOPES = (
            @join auth_scope : context.getServiceConfig.getAuthScopes(service.getModel) on BREAK
                '{@auth_scope}',
            @end
        )
    @end
@end

@private constructDefaults(service)
    @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service), \
         jsonBaseName = {@context.upperCamelToLowerUnderscore(service.getSimpleName)}
        default_client_config = json.loads(pkg_resources.resource_string(
            __name__, '{@jsonBaseName}_client_config.json').decode())
        defaults = api_callable.construct_settings(
            '{@service.getFullName}',
            default_client_config,
            client_config,
            config.STATUS_CODE_NAMES,
            metrics_headers=metrics_headers,
            @if context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethodsV2(service))
                page_descriptors=self._PAGE_DESCRIPTORS,
            @end
        )
    @end
@end

@private initMethodSection(service)
    @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
        def __init__(self,
                service_path=SERVICE_ADDRESS,
                port=DEFAULT_SERVICE_PORT,
                channel=None,
                credentials=None,
                ssl_credentials=None,
                scopes=None,
                client_config=None,
                app_name=None,
                app_version='',
                lib_name=None,
                lib_version='',
                metrics_headers=()):
            """Constructor.

            Args:
              service_path (string): The domain name of the API remote host.
              port (int): The port on which to connect to the remote host.
              channel (:class:`grpc.Channel`): A ``Channel`` instance through
                which to make calls.
              credentials (object): The authorization credentials to attach to
                requests. These credentials identify this application to the
                service.
              ssl_credentials (:class:`grpc.ChannelCredentials`): A
                ``ChannelCredentials`` instance for use with an SSL-enabled
                channel.
              scopes (list[string]): A list of OAuth2 scopes to attach to requests.
              client_config (dict):
                A dictionary for call options for each method. See
                :func:`google.gax.construct_settings` for the structure of
                this data. Falls back to the default config if not specified
                or the specified config is missing data points.
              app_name (string): The name of the application calling
                the service. Recommended for analytics purposes.
              app_version (string): The version of the application calling
                the service. Recommended for analytics purposes.
              lib_name (string): The API library software used for calling
                the service. (Unless you are writing an API client itself,
                leave this as default.)
              lib_version (string): The API library software version used
                for calling the service. (Unless you are writing an API client
                itself, leave this as default.)
              metrics_headers (dict): A dictionary of values for tracking
                client library metrics. Ultimately serializes to a string
                (e.g. 'foo/1.2.3 bar/3.14.1'). This argument should be
                considered private.

            Returns:
              A {@context.getApiWrapperName(service)} object.
            """
            @# Unless the calling application specifically requested
            @# OAuth scopes, request everything.
            if scopes is None:
                scopes = self._ALL_SCOPES

            @# Initialize an empty client config, if none is set.
            if client_config is None:
                client_config = {}

            @# Initialize metrics_headers as an ordered dictionary
            @# (cuts down on cardinality of the resulting string slightly).
            metrics_headers = collections.OrderedDict(metrics_headers)
            metrics_headers['gl-python'] = platform.python_version()

            @# The library may or may not be set, depending on what is
            @# calling this client. Newer client libraries set the library name
            @# and version.
            if lib_name:
                metrics_headers[lib_name] = lib_version

            @# Finally, track the GAPIC package version.
            metrics_headers['gapic'] = pkg_resources.get_distribution(
                '{@context.gapicPackageName}',
            ).version

            @# Load the configuration defaults.
            {@constructDefaults(service)}
            @join stub : context.getGrpcStubs(service)
                self.{@stub.name} = config.create_stub(
                    {@stub.grpcClientTypeName},
                    channel=channel,
                    service_path=service_path,
                    service_port=port,
                    credentials=credentials,
                    scopes=scopes,
                    ssl_credentials=ssl_credentials)
            @end
            @if context.hasLongrunningMethod(service)

                self.operations_client = operations_client.OperationsClient(
                    service_path=service_path,
                    port=port,
                    channel=channel,
                    credentials=credentials,
                    ssl_credentials=ssl_credentials,
                    scopes=scopes,
                    client_config=client_config,
                    metrics_headers=metrics_headers,
                )
            @end

            @join method : context.getSupportedMethodsV2(service)
                self._{@methodName(method)} = api_callable.create_api_call(
                    self.{@context.stubNameForMethod(service, method)}.{@method.getSimpleName()},
                    settings=defaults['{@methodName(method)}'])
            @end
    @end
@end

@private pathTemplateSection(service)
    @join pathTemplate : context.getPathTemplates(service)
        {@pathTemplate.name} = path_template.PathTemplate(
            '{@pathTemplate.pattern}')
    @end

    @join function : context.getFormatResourceFunctions(service)

        {@createResourceFunction(function)}
    @end
    @join function : context.getParseResourceFunctions(service)

        {@createMatchFunctions(function)}
    @end
@end

@private createResourceFunction(function)
    @@classmethod
    def {@function.name}(cls, {@createResourceFunctionParams(function.resourceIdParams)}):
        """Returns a fully-qualified {@function.entityName} resource name string."""
        return cls.{@function.pathTemplateName}.render({
            {@createRenderDictionary(function.resourceIdParams)}
        })
@end

@private createMatchFunctions(function)
    @@classmethod
    def {@function.name}(cls, {@function.entityNameParamName}):
        """Parses the {@function.outputResourceId} from a {@function.entityName} resource.

        Args:
          {@function.entityNameParamName} (string): A fully-qualified path representing a {@function.entityName}
            resource.

        Returns:
          A string representing the {@function.outputResourceId}.
        """
        return cls.{@function.pathTemplateName}.match({@function.entityNameParamName}).get('{@function.outputResourceId}')
@end

@private createResourceFunctionParams(params)
    @join param : params on ", "
        {@param.name}
    @end
@end

@private createRenderDictionary(params)
    @join param: params on BREAK
        '{@param.templateKey}': {@param.name},
    @end
@end

@private defaultComments(element)
    @join comment : context.defaultComments(element)
        {@comment}
    @end
@end

@private methodComments(apiMethod, apiMethodDoc)
    """
    @join line : util.trimDocs(apiMethodDoc.mainDocLines)
      {@line}
    @end

    @if apiMethod.hasRequestStreaming
      EXPERIMENTAL: This method interface might change in the future.

    @end
    {@sampleCode(apiMethod)}

    Args:
      @join paramDoc : apiMethodDoc.paramDocs
          @if paramDoc.lines
              {@paramDoc.paramName} ({@paramDoc.typeName}): {@paramDoc.firstLine}
                @join line : paramDoc.remainingLines
                    {@line}
                @end
          @else
              {@paramDoc.paramName} ({@paramDoc.typeName})
          @end
      @end
    @if apiMethodDoc.returnsDocLines

        Returns:
          @join line : apiMethodDoc.returnsDocLines
                {@line}
          @end
    @end

    Raises:
      @join line : apiMethodDoc.throwsDocLines
          {@line}
      @end
    """
@end

@private serviceMethodsSection(service)
    @# Service calls
    @join method : context.getSupportedMethodsV2(service) on BREAK.add(BREAK)
        {@flattenedMethod(service, method)}
    @end
@end

@private callLine(methodConfig, method, request)
    @if methodConfig.isLongRunningOperation
        return google.gax._OperationFuture(
            self._{@methodName(method)}({@request}, options),
            self.operations_client,
            {@context.pythonTypeName(methodConfig.getLongRunningConfig.getReturnType, importHandler)},
            {@context.pythonTypeName(methodConfig.getLongRunningConfig.getMetadataType, importHandler)},
            options)
    @else
        @if methodConfig.isReturnEmptyMessageMethod(method)
            self._{@methodName(method)}({@request}, options)
        @else
            return self._{@methodName(method)}({@request}, options)
        @end
    @end
@end

@private methodName(method)
    {@context.upperCamelToLowerUnderscore(method.getSimpleName())}
@end

@private flattenedMethod(service, method)
    @let methodInputElementPath = importHandler.elementPath(method.getInputMessage, FALSE), \
             methodView = context.getApiMethodView(service, method), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             requiredParams = methodConfig.getRequiredFields(), \
             optionalParams = context.removePageTokenFromFields(methodConfig.getOptionalFields(), methodConfig), \
             oneOfParams = methodConfig.getOneofs()
        @if method.getRequestStreaming
            def {@methodName(method)}(
                    self,
                    requests,
                    options=None):
                {@methodComments(methodView, methodView.doc)}
                {@callLine(methodConfig, method, "requests")}
        @else
            @if or(requiredParams, optionalParams)
                def {@methodName(method)}(
                        self,
                        @if requiredParams
                            @if optionalParams
                                {@requiredParameterNames(requiredParams)},
                                {@optionalParameterValues(optionalParams)},
                            @else
                                {@requiredParameterNames(requiredParams)},
                            @end
                        @else
                            {@optionalParameterValues(optionalParams)},
                        @end
                        options=None):
                    {@methodComments(methodView, methodView.doc)}
                    @if oneOfParams
                        {@checkOneOfParams(oneOfParams)}
                    @end
                    @# Create the request object.
                    @if requiredParams
                        @if optionalParams
                            request = {@methodInputElementPath}(
                                {@namedParameters(requiredParams)},
                                {@namedParameters(optionalParams)})
                        @else
                            request = {@methodInputElementPath}(
                                {@namedParameters(requiredParams)})
                        @end
                    @else
                        request = {@methodInputElementPath}(
                            {@namedParameters(optionalParams)})
                    @end
                    {@callLine(methodConfig, method, "request")}
            @else
                def {@methodName(method)}(
                        self,
                        options=None):
                    {@methodComments(methodView, methodView.doc)}
                    # Create the request object.
                    request = {@methodInputElementPath}()
                    {@callLine(methodConfig, method, "request")}
            @end
        @end
    @end
@end

@private requiredParameterNames(params)
    @join field : params on ",".add(BREAK)
        {@context.python.wrapIfKeywordOrBuiltIn({@field.getSimpleName()})}
    @end
@end

@private optionalParameterValues(params)
    @join field : params on ",".add(BREAK)
        @let paramName = {@context.python.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
            {@paramName}=None
        @end
    @end
@end

@private namedParameters(params)
    @join field : params on ",".add(BREAK)
        @let paramName = {@field.getSimpleName()}
            {@paramName}={@context.python.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
        @end
    @end
@end

@private checkOneOfParams(oneOfs)
    @join oneOf : oneOfs on BREAK
        @# Sanity check: We have some fields which are mutually exclusive;
        @# raise ValueError if more than one is sent.
        oneof.check_oneof(
            @join oneOfField : oneOf.getFields() on BREAK
                {@oneOfField.getSimpleName()}={@oneOfField.getSimpleName},
            @end
        )

    @end
@end
