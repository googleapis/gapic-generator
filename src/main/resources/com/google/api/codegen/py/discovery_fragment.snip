@extends "common.snip"

@snippet generateFilename(method)
    {@method.getName}.frag.py
@end

@snippet generateModule(method, body, imports)
    @let api = context.getApi, \
         apiName = api.getName, \
         apiVersion = api.getVersion, \
         serviceTitle = context.getService.getTitle
        """
        BEFORE RUNNING:
        ---------------
        1. If not already done, enable the {@serviceTitle}
           and check the quota for your project at
           https://console.developers.google.com/apis/api/{@apiName}
        2. This sample uses Application Default Credentials for authentication.
           If not already done, install the gcloud CLI from
           https://cloud.google.com/sdk/ and run
           `gcloud beta auth application-default login`
        3. Install the Python client library for Google APIs by running
           `pip install --upgrade google-api-python-client`
        """

        @join import : imports
            {@import}
        @end

        @# Authentication is provided by the `gcloud` tool when running locally
        @# and by built-in service accounts when running on GAE, GCE, or GKE.
        @# For more information, see
        @# https://developers.google.com/identity/protocols/application-default-credentials
        credentials = GoogleCredentials.get_application_default()

        @# Construct the {@apiName} service object (version {@apiVersion}) for interacting
        @# with the API. You can browse other available API services and versions at
        @# https://developers.google.com/api-client-library/python/apis/
        {@serviceName()} = discovery.build('{@apiName}', '{@apiVersion}', credentials=credentials)
        {@body}
    @end
@end

@snippet generateBody(method)
    {@alwaysImport()}
    {@initialize(method)}
    @if context.isPageStreaming(method)
        {@iterableCall(method)}
    @else
        {@compactCall(method)}
    @end
@end

@snippet generateMethodSampleCode(docConfig)
@end

# TODO(tcoffee): check if resource field is always first repeated field of response type
@private iterableCall(method)
    @let methodName = context.getMethodName(method), \
         resourcesPath = context.getApiaryConfig.getResources(method.getName), \
         resourcesObject = context.getLast(resourcesPath), \
         responseType = method.getResponseTypeUrl, \
         responseTypeRef = context.getApiaryConfig.getType(responseType), \
         resourceField = context.getFirstRepeatedField(responseTypeRef), \
         resources = resourceField.getName
        {@resourcesObject} = {@serviceName()}.{@elementPath(resourcesPath)}
        {@requestName()} = {@resourcesObject}.{@methodName}({@arguments(method)})
        while {@requestName()} is not None:
            {@responseName()} = {@requestName()}.execute()

            @if context.isMapField(responseTypeRef, resourceField.getName)
                @let keyName = context.keyTypeName(resourceField), \
                     valueName = context.valueTypeName(resourceField)
                    for {@keyName}, {@valueName} in {@responseName()}['{@resources}'].items():
                        @# {@TODO()} Change code below to process each ({@keyName}, {@valueName}) item:
                        {@printEntry(keyName, valueName)}
                @end
            @else
                @let resourceName = context.elementTypeName(resourceField)
                    for {@resourceName} in {@responseName()}['{@resources}']:
                        @# {@TODO()} Change code below to process each `{@resourceName}` resource:
                        {@print(resourceName)}
                @end
            @end

            # used to handle inconsistency in log entries list method for Logging API
            # remove exceptional case if inconsistency is resolved
            @if context.isLogEntriesListMethod(method)
                {@requestBodyName(method)}.pageToken = {@responseName()}.nextPageToken
            @else
                {@requestName()} = {@resourcesObject}.{@methodName}_next(previous_request={@requestName()}, previous_response={@responseName()})
            @end
    @end
@end

@private compactCall(method)
    @let methodName = context.getMethodName(method), \
         resourcesPath = context.getApiaryConfig.getResources(method.getName)
        {@requestName()} = {@serviceName()}.{@elementPath(resourcesPath)}.{@methodName}({@arguments(method)})
        @if context.isResponseEmpty(method)
            {@requestName()}.execute()
        @else
            {@responseName()} = {@requestName()}.execute()

            @# {@TODO()} Change code below to process the `{@responseName()}` dict:
            {@print(responseName())}
        @end
    @end
@end

# TODO(tcoffee): configure snippet grouping to handle long argument lists
@private arguments(method)
    @let params = context.getFlatMethodParams(method)
        @if context.hasRequestField(method)
            @if params
                {@argumentList(params)}, body={@requestBodyName(method)}
            @else
                body={@requestBodyName(method)}
            @end
        @else
            {@argumentList(params)}
        @end
    @end
@end

@private initialize(method)
    @let methodName = context.getMethodName(method), \
         signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
         params = context.getFlatMethodParams(method)
        @if params

            @# {@TODO()} Change placeholders below to desired parameter values for the `{@methodName}` method:

            @join param : params
                @let paramField = context.getField(signatureType, param), \
                     paramValue = context.typeDefaultValue(signatureType, paramField, method), \
                     paramDescription = context.getDescription(signatureType.getName, param)
                    {@description(paramDescription)}
                    {@param} = {@paramValue}

                @end
            @end

        @end
    @end
    @if context.hasRequestField(method)

        {@requestBodyName(method)} = {
            @if context.isPatch(method)
                @# {@TODO()} Add desired entries of the `{@requestBodyName(method)}` dict to be changed.
            @else
                @# {@TODO()} Add desired entries of the `{@requestBodyName(method)}` dict.
            @end
        }


    @end
@end

@private serviceName()
    service
@end

@private requestName()
    request
@end

@private requestBodyName(method)
    {@context.objectTypeName(context.getRequestField(method))}_body
@end

@private responseName()
  response
@end

@private elementPath(elements)
    @join element : elements on "."
        {@element}()
    @end
@end

@private argumentList(arguments)
    @join argument : arguments on ", "
        {@argument}={@argument}
    @end
@end

@private description(description)
    @join line : context.lineWrapDoc(description)
        @# {@line}
    @end
@end

@private print(element)
    @let pprint = importHandler.addImportStandard("pprint", "pprint")
        {@pprint}({@element})
    @end
@end

@private printEntry(key, value)
    @let pprint = importHandler.addImportStandard("pprint", "pprint")
        {@pprint}(({@key}, {@value}))
    @end
@end

@private alwaysImport() fill
    {@context.silent(importHandler.addImportLocal("googleapiclient", "discovery"))}
    {@context.silent(importHandler.addImportLocal("oauth2client.client", "GoogleCredentials"))}
@end
