/* Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.api.codegen.discogapic;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.api.codegen.ConfigProto;
import com.google.api.codegen.common.CodeGenerator;
import com.google.api.codegen.common.GeneratedResult;
import com.google.api.codegen.common.TargetLanguage;
import com.google.api.codegen.config.ApiDefaultsConfig;
import com.google.api.codegen.config.DependenciesConfig;
import com.google.api.codegen.config.DiscoApiModel;
import com.google.api.codegen.config.GapicProductConfig;
import com.google.api.codegen.config.PackageMetadataConfig;
import com.google.api.codegen.config.PackagingConfig;
import com.google.api.codegen.configgen.ConfigHelper;
import com.google.api.codegen.configgen.ConfigYamlReader;
import com.google.api.codegen.configgen.MessageGenerator;
import com.google.api.codegen.configgen.nodes.ConfigNode;
import com.google.api.codegen.discovery.DiscoveryNode;
import com.google.api.codegen.discovery.Document;
import com.google.api.tools.framework.model.DiagCollector;
import com.google.api.tools.framework.model.SimpleDiagCollector;
import com.google.api.tools.framework.tools.ToolOptions;
import com.google.api.tools.framework.tools.ToolOptions.Option;
import com.google.api.tools.framework.tools.ToolUtil;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Maps;
import com.google.inject.TypeLiteral;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class DiscoGapicGeneratorApp {
  public static final Option<String> LANGUAGE =
      ToolOptions.createOption(String.class, "language", "The target language.", "");

  public static final Option<String> DISCOVERY_DOC =
      ToolOptions.createOption(
          String.class,
          "discovery_doc",
          "The Discovery doc representing the service description.",
          "");

  public static final Option<String> OUTPUT_FILE =
      ToolOptions.createOption(
          String.class,
          "output_file",
          "The name of the output file or folder to put generated code.",
          "");

  public static final Option<List<String>> GENERATOR_CONFIG_FILES =
      ToolOptions.createOption(
          new TypeLiteral<List<String>>() {},
          "config_files",
          "The list of YAML configuration files for the code generator.",
          ImmutableList.of());

  public static final Option<String> PACKAGE_CONFIG2_FILE =
      ToolOptions.createOption(String.class, "package_config2", "The packaging configuration.", "");

  public static final Option<List<String>> ENABLED_ARTIFACTS =
      ToolOptions.createOption(
          new TypeLiteral<List<String>>() {},
          "enabled_artifacts",
          "The artifacts to be generated by the code generator.",
          ImmutableList.of());

  private final ToolOptions options;

  /** Constructs a code generator api based on given options. */
  public DiscoGapicGeneratorApp(ToolOptions options) {
    this.options = options;
  }

  /** From config file paths, constructs the DiscoGapicProviders to run. */
  @VisibleForTesting
  public static List<CodeGenerator<?>> getProviders(
      String discoveryDocPath,
      List<String> configFileNames,
      String packageConfig2File,
      String dependencyConfigFile,
      String languageStr,
      List<String> enabledArtifacts)
      throws IOException {
    if (!new File(discoveryDocPath).exists()) {
      throw new IOException("File not found: " + discoveryDocPath);
    }
    Reader reader = new InputStreamReader(new FileInputStream(new File(discoveryDocPath)));

    ObjectMapper mapper = new ObjectMapper();
    JsonNode root = mapper.readTree(reader);

    // Read the YAML config and convert it to proto.
    if (configFileNames.size() == 0) {
      throw new IOException(String.format("--%s must be provided", GENERATOR_CONFIG_FILES.name()));
    }

    ConfigProto configProto = loadConfigFromFiles(configFileNames);
    if (configProto == null) {
      throw new IOException("Failed to load config proto.");
    }

    PackageMetadataConfig packageConfig = null;
    if (!Strings.isNullOrEmpty(packageConfig2File)) {
      ApiDefaultsConfig apiDefaultsConfig = ApiDefaultsConfig.load();
      DependenciesConfig dependenciesConfig;
      if (dependencyConfigFile != null) {
        dependenciesConfig =
            DependenciesConfig.loadFromURL(new File(dependencyConfigFile).toURI().toURL());
      } else {
        dependenciesConfig = DependenciesConfig.load();
      }
      PackagingConfig packagingConfig = PackagingConfig.load(packageConfig2File);
      packageConfig =
          PackageMetadataConfig.createFromPackaging(
              apiDefaultsConfig, dependenciesConfig, packagingConfig);
    }

    TargetLanguage language;
    if (!Strings.isNullOrEmpty(languageStr)) {
      language = TargetLanguage.fromString(languageStr.toUpperCase());
    } else {
      languageStr = configProto.getLanguage();
      if (Strings.isNullOrEmpty(languageStr)) {
        throw new IllegalArgumentException(
            "Language not set by --language option or by gapic config.");
      }
      language = TargetLanguage.fromString(languageStr.toUpperCase());
    }

    String defaultPackageName =
        configProto.getLanguageSettingsMap().get(languageStr).getPackageName();

    DiscoApiModel model =
        new DiscoApiModel(Document.from(new DiscoveryNode(root)), defaultPackageName);

    GapicProductConfig productConfig = GapicProductConfig.create(model, configProto, language);

    return DiscoGapicProviderFactory.create(
        language, model, productConfig, packageConfig, enabledArtifacts);
  }

  public int run() throws Exception {

    String discoveryDocPath = options.get(DISCOVERY_DOC);
    List<String> configFileNames = options.get(GENERATOR_CONFIG_FILES);
    String packageConfig2File = options.get(PACKAGE_CONFIG2_FILE);
    String languageStr = options.get(LANGUAGE);
    List<String> enabledArtifacts = options.get(ENABLED_ARTIFACTS);

    List<CodeGenerator<?>> providers =
        getProviders(
            discoveryDocPath,
            configFileNames,
            packageConfig2File,
            null,
            languageStr,
            enabledArtifacts);

    Map<String, Object> outputFiles = Maps.newHashMap();
    for (CodeGenerator<?> provider : providers) {
      outputFiles.putAll(GeneratedResult.extractBodies(provider.generate()));
    }
    ToolUtil.writeFiles(outputFiles, options.get(OUTPUT_FILE));
    return 0;
  }

  private static List<File> pathsToFiles(List<String> configFileNames) {
    List<File> files = new ArrayList<>();

    for (String configFileName : configFileNames) {
      files.add(new File(configFileName));
    }

    return files;
  }

  private static ConfigProto loadConfigFromFiles(List<String> configFileNames) {
    DiagCollector diagCollector = new SimpleDiagCollector();
    ConfigYamlReader yamlReader = new ConfigYamlReader();
    MessageGenerator messageGenerator = new MessageGenerator(ConfigProto.newBuilder());
    for (File file : pathsToFiles(configFileNames)) {
      ConfigHelper helper = new ConfigHelper(diagCollector, file.getName());
      ConfigNode configNode = yamlReader.generateConfigNode(file, helper);
      if (configNode == null) {
        continue;
      }

      messageGenerator.visit(configNode.getChild());
    }
    ConfigProto configProto = (ConfigProto) messageGenerator.getValue();
    if (configProto == null || configProto.equals(ConfigProto.getDefaultInstance())) {
      return null;
    }

    return configProto;
  }
}
