/* Copyright 2016 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.api.codegen.grpcmetadatagen;

import com.google.api.codegen.GeneratedResult;
import com.google.api.codegen.TargetLanguage;
import com.google.api.codegen.config.ApiDefaultsConfig;
import com.google.api.codegen.config.DependenciesConfig;
import com.google.api.codegen.config.PackageMetadataConfig;
import com.google.api.codegen.config.PackagingConfig;
import com.google.api.tools.framework.model.Diag;
import com.google.api.tools.framework.model.Model;
import com.google.api.tools.framework.model.stages.Merged;
import com.google.api.tools.framework.snippet.Doc;
import com.google.api.tools.framework.tools.ToolDriverBase;
import com.google.api.tools.framework.tools.ToolOptions;
import com.google.api.tools.framework.tools.ToolOptions.Option;
import com.google.api.tools.framework.tools.ToolUtil;
import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

/** ToolDriver for gRPC meta-data generation. */
public class GrpcMetadataGenerator extends ToolDriverBase {
  public static final Option<String> OUTPUT_DIR =
      ToolOptions.createOption(
          String.class, "output_file", "The name of the output folder to put generated code.", "");
  public static final Option<String> INPUT_DIR =
      ToolOptions.createOption(
          String.class,
          "input_file",
          "The name of the folder containing the gRPC package to generate metadata for.",
          "");
  public static final Option<String> METADATA_CONFIG_FILE =
      ToolOptions.createOption(
          String.class,
          "metadata_config_file",
          "The name of the yaml file that configures package metadata (deprecated in favor of package_config2).",
          "");
  public static final Option<String> PACKAGE_CONFIG2_FILE =
      ToolOptions.createOption(String.class, "package_config2", "The packaging configuration.", "");
  public static final Option<String> LANGUAGE =
      ToolOptions.createOption(String.class, "language", "The package's language.", "");
  public static final Option<ArtifactType> ARTIFACT_TYPE =
      ToolOptions.createOption(
          ArtifactType.class,
          "artifact_type",
          "The artifacts to be generated by the metadata generator.",
          null);

  private URL dependenciesYamlUrl;

  protected GrpcMetadataGenerator(ToolOptions options) {
    super(options);
  }

  protected GrpcMetadataGenerator(ToolOptions options, URL dependenciesYamlUrl) {
    super(options);
    this.dependenciesYamlUrl = dependenciesYamlUrl;
  }

  @Override
  protected void process() throws Exception {
    model.establishStage(Merged.KEY);

    if (model.getDiagCollector().getErrorCount() > 0) {
      for (Diag diag : model.getDiagCollector().getDiags()) {
        System.err.println(diag.toString());
      }
      return;
    }
    Map<String, GeneratedResult<Doc>> results = generate(model);
    ToolUtil.writeFiles(GeneratedResult.extractBodies(results), options.get(OUTPUT_DIR));
  }

  protected Map<String, GeneratedResult<Doc>> generate(Model model) throws IOException {
    TargetLanguage language = TargetLanguage.fromString(options.get(LANGUAGE));

    PackageMetadataConfig config = null;
    if (!Strings.isNullOrEmpty(options.get(METADATA_CONFIG_FILE))) {
      String configContent =
          new String(
              Files.readAllBytes(Paths.get(options.get(METADATA_CONFIG_FILE))),
              StandardCharsets.UTF_8);
      config = PackageMetadataConfig.createFromString(configContent);
    }
    if (!Strings.isNullOrEmpty(options.get(PACKAGE_CONFIG2_FILE))) {
      if (config != null) {
        throw new IllegalArgumentException(
            "Both "
                + METADATA_CONFIG_FILE
                + " and "
                + PACKAGE_CONFIG2_FILE
                + " were set, but only can be provided at once.");
      }
      ApiDefaultsConfig apiDefaultsConfig = ApiDefaultsConfig.load();
      DependenciesConfig dependenciesConfig;
      if (dependenciesYamlUrl != null) {
        dependenciesConfig = DependenciesConfig.loadFromURL(dependenciesYamlUrl);
      } else {
        dependenciesConfig = DependenciesConfig.load();
      }
      PackagingConfig packagingConfig = PackagingConfig.load(options.get(PACKAGE_CONFIG2_FILE));
      config =
          PackageMetadataConfig.createFromPackaging(
              apiDefaultsConfig, dependenciesConfig, packagingConfig);
    }
    Preconditions.checkNotNull(config);

    ArtifactType artifactType = options.get(GrpcMetadataGenerator.ARTIFACT_TYPE);
    if (artifactType == null) {
      artifactType = config.artifactType();
    }
    GrpcMetadataProvider<Doc> provider =
        GrpcMetadataProviderFactory.create(language, artifactType, options);

    return provider.generate(model, config);
  }
}
