/* Copyright 2016 Google Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.api.codegen.transformer.php;

import com.google.api.codegen.config.MethodConfig;
import com.google.api.codegen.transformer.MethodTransformerContext;
import com.google.api.codegen.transformer.ParamDocTransformer;
import com.google.api.codegen.transformer.SurfaceNamer;
import com.google.api.codegen.util.Name;
import com.google.api.codegen.viewmodel.MapParamDocView;
import com.google.api.codegen.viewmodel.ParamDocView;
import com.google.api.codegen.viewmodel.SimpleParamDocView;
import com.google.api.tools.framework.model.Field;
import com.google.api.tools.framework.model.TypeRef;
import com.google.common.collect.ImmutableList;
import com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type;
import java.util.List;

public class PhpParamDocTransformer implements ParamDocTransformer {

  @Override
  public List<ParamDocView> generateParamDocs(MethodTransformerContext context) {
    ImmutableList.Builder<ParamDocView> docs = ImmutableList.builder();
    docs.addAll(generateMethodParamDocs(context, context.getMethodConfig().getRequiredFields()));
    docs.add(generateOptionalArrayParamDoc(context, context.getMethodConfig().getOptionalFields()));
    return docs.build();
  }

  private List<ParamDocView> generateMethodParamDocs(
      MethodTransformerContext context, Iterable<Field> fields) {
    if (context.getMethod().getRequestStreaming()) {
      return ImmutableList.<ParamDocView>of();
    }

    SurfaceNamer namer = context.getNamer();
    MethodConfig methodConfig = context.getMethodConfig();
    ImmutableList.Builder<ParamDocView> docs = ImmutableList.builder();
    for (Field field : fields) {
      SimpleParamDocView.Builder paramDoc = SimpleParamDocView.newBuilder();
      paramDoc.paramName(namer.getVariableName(field));
      paramDoc.typeName(namer.getParamTypeName(context.getTypeTable(), field.getType()));

      ImmutableList.Builder<String> docLines = ImmutableList.builder();
      if (isPageSizeParam(methodConfig, field)) {
        docLines.add(
            "The maximum number of resources contained in the underlying API",
            "response. The API may return fewer values in a page, even if",
            "there are additional values to be retrieved.");
      } else if (isRequestTokenParam(methodConfig, field)) {
        docLines.add(
            "A page token is used to specify a page of values to be returned.",
            "If no page token is specified (the default), the first page",
            "of values will be returned. Any page token used here must have",
            "been generated by a previous call to the API.");
      } else {
        docLines.addAll(namer.getDocLines(field));
      }
      paramDoc.lines(docLines.build());
      docs.add(paramDoc.build());
    }
    return docs.build();
  }

  private boolean isPageSizeParam(MethodConfig methodConfig, Field field) {
    return methodConfig.isPageStreaming()
        && methodConfig.getPageStreaming().hasPageSizeField()
        && field.equals(methodConfig.getPageStreaming().getPageSizeField());
  }

  private boolean isRequestTokenParam(MethodConfig methodConfig, Field field) {
    return methodConfig.isPageStreaming()
        && field.equals(methodConfig.getPageStreaming().getRequestTokenField());
  }

  private ParamDocView generateOptionalArrayParamDoc(
      MethodTransformerContext context, Iterable<Field> fields) {
    SurfaceNamer namer = context.getNamer();
    MapParamDocView.Builder paramDoc = MapParamDocView.newBuilder();
    paramDoc.paramName(namer.localVarName(Name.from("optional", "args")));
    paramDoc.typeName(namer.getOptionalArrayTypeName());
    paramDoc.lines(ImmutableList.<String>of("Optional."));
    paramDoc.arrayKeyDocs(
        ImmutableList.<ParamDocView>builder()
            .addAll(generateMethodParamDocs(context, fields))
            .addAll(generateCallSettingsParamDocList(context))
            .build());
    return paramDoc.build();
  }

  private List<ParamDocView> generateCallSettingsParamDocList(MethodTransformerContext context) {
    SurfaceNamer namer = context.getNamer();

    Name retrySettingsName = Name.from("retry", "settings");
    Name timeoutMillisName = Name.from("timeout", "millis");

    ImmutableList.Builder<ParamDocView> arrayKeyDocs = ImmutableList.builder();

    if (namer.methodHasRetrySettings(context.getMethodConfig())) {
      SimpleParamDocView.Builder retrySettingsDoc = SimpleParamDocView.newBuilder();
      retrySettingsDoc.typeName(namer.getRetrySettingsTypeName());
      retrySettingsDoc.paramName(namer.localVarName(retrySettingsName));
      String retrySettingsDocText =
          String.format(
              "Retry settings to use for this call. If present, then\n%s is ignored.",
              namer.varReference(timeoutMillisName));
      retrySettingsDoc.lines(namer.getDocLines(retrySettingsDocText));
      arrayKeyDocs.add(retrySettingsDoc.build());
    }

    if (namer.methodHasTimeoutSettings(context.getMethodConfig())) {
      SimpleParamDocView.Builder timeoutDoc = SimpleParamDocView.newBuilder();
      timeoutDoc.typeName(
          context.getTypeTable().getAndSaveNicknameFor(TypeRef.of(Type.TYPE_INT32)));
      timeoutDoc.paramName(namer.localVarName(timeoutMillisName));
      String timeoutMillisDocText = "Timeout to use for this call.";
      if (namer.methodHasRetrySettings(context.getMethodConfig())) {
        timeoutMillisDocText +=
            String.format(" Only used if %s\nis not set.", namer.varReference(retrySettingsName));
      }
      timeoutDoc.lines(namer.getDocLines(timeoutMillisDocText));
      arrayKeyDocs.add(timeoutDoc.build());
    }

    return arrayKeyDocs.build();
  }
}
