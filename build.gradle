// Build Script
// ============

import groovy.io.FileType

buildscript {
  repositories {
    mavenLocal()
    maven {
      // For 0.7.2-SNAPSHOT of protobuf gradle plugin. This should be removed once
      // this version is releaed.
      url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.7.2-SNAPSHOT"
    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.2"
    classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
  }
}


apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "com.google.protobuf"
apply plugin: "com.github.sherter.google-java-format"
apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = 1.7

group = "com.google.api"
version = "0.0.0-SNAPSHOT"
// url to the snapshot repository of a private maven repo.
def privateSnapshotRepo = "http://104.197.230.53:8081/nexus/content/repositories/snapshots/"

// Dependencies
// ------------

ext {
  // Shortcuts for libraries we are using
  libraries = [
    // General
    guava: 'com.google.guava:guava:19.0',
    jsr305: 'com.google.code.findbugs:jsr305:3.0.0',
    autovalue: 'com.google.auto.value:auto-value:1.1',
    cglib: 'cglib:cglib:3.1',
    guice: 'com.google.inject:guice:4.0',
    commonsLang: 'org.apache.commons:commons-lang3:3.4',
    commonsCli: 'commons-cli:commons-cli:1.3',
    snakeyaml: 'org.yaml:snakeyaml:1.16',
    gax: 'com.google.api:gax:0.0.8',

    // Gapi
    // TODO(cbao): Use released version instead of snapshot.
    toolsFx: 'io.gapi:gapi-tools-framework:0.0.3-SNAPSHOT',

    // Testing
    junit: 'junit:junit:4.11',
    mockito: 'org.mockito:mockito-core:1.10.19',
    truth: 'com.google.truth:truth:0.27',
    toolsFxTesting: 'io.gapi:gapi-tools-framework:0.0.0-SNAPSHOT:testing',

    // Protobuf
    protobuf: 'com.google.protobuf:protobuf-java:3.0.0-beta-2',
    protoc:  'com.google.protobuf:protoc:3.0.0-beta-2',
    protobufGradlePlugin: 'com.google.protobuf:protobuf-gradle-plugin:0.7.2-SNAPSHOT',

    // JSON
    jackson: 'com.fasterxml.jackson.core:jackson-databind:2.7.0',

    // Formatter
    javaFomatter: 'com.google.googlejavaformat:google-java-format:0.1-alpha'
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    // For 0.7.2-SNAPSHOT of protobuf gradle plugin. This should be removed once
    // this version is releaed.
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
  maven {
    // Private maven repo.
    url privateSnapshotRepo
  }
}

dependencies {
  compile libraries.guava,
    libraries.autovalue,
    libraries.cglib,
    libraries.commonsCli,
    libraries.commonsLang,
    libraries.gax,
    libraries.guice,
    libraries.jackson,
    libraries.javaFomatter,
    libraries.jsr305,
    libraries.protobuf,
    libraries.snakeyaml,
    libraries.toolsFx,
    libraries.toolsFxTesting

  testCompile libraries.junit,
    libraries.mockito,
    libraries.truth,
    libraries.toolsFxTesting
}

task discoJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
  archiveName = "discoGen-${version}.jar"
  manifest {
    attributes "Main-Class": "com.google.api.codegen.DiscoveryFragmentGeneratorTool"
  }
  from sourceSets.main.output
  configurations = [ project.configurations.runtime ]
}

// Source jar
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}
artifacts {
  archives sourcesJar
}

// Protobuf
// --------

sourceSets {
  main {
    proto {
      // Include proto sources for GAPIC generator config.
      srcDir "src/main/proto"
    }
    java {
      // Include location where proto plugin puts generated sources.
      srcDir "${buildDir}/generated/source/proto/main/java"
    }
  }
}

protobuf {
  protoc {
    artifact = libraries.protoc
  }
}

// Test data
// ---------

sourceSets {
  test {
    resources {
      // Include all resources from testdata folders.
      srcDir 'src/test/java'
      include '**/testdata/**'
    }
    resources {
      // Include protos of core platform and toolkit,
      // as some tests depend on this.
      srcDir "${projectDir}/modules/googleapis"
      include '**/*.proto'
    }
  }
}

task setupProtocEnvironment << {
  test.setEnvironment(PROTOC_COMPILER: project.protobuf.tools.protoc.path)
}

test.dependsOn setupProtocEnvironment

task showRuntimeClassPath << {
  println sourceSets.main.runtimeClasspath.asPath
}

// Test Logging
// ============
test {
  testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

// Eclipse Annotation Processing
// -----------------------------

// TODO(wrwg): figure whether there is direct support for this in eclipse plugin,
// and use that instead.

ext {
  eclipseAptFolder = '.apt_generated'
  eclipseSettingsDir = file('.settings')
}

configurations {
  codeGeneration
}

dependencies {
  codeGeneration libraries.autovalue, libraries.jsr305
  compile libraries.autovalue, libraries.jsr305
}

compileJava.classpath += configurations.codeGeneration

eclipse {
  jdt.file.withProperties {
    it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
  }
}

tasks.eclipseJdt {
  doFirst {
    def aptPrefs =
        file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs")
    aptPrefs.parentFile.mkdirs()

    aptPrefs.text = """\
        eclipse.preferences.version=1
        org.eclipse.jdt.apt.aptEnabled=true
        org.eclipse.jdt.apt.genSrcDir=${eclipseAptFolder}
        org.eclipse.jdt.apt.reconcileEnabled=true
        """.stripIndent()

    file('.factorypath').withWriter {
      new groovy.xml.MarkupBuilder(it).'factorypath' {
        project.configurations.codeGeneration.each { dep->
          factorypathentry(
            kind:'EXTJAR',
            id:dep.absolutePath,
            enabled:true,
            runInBatchMode:false)
        }
      }
    }
  }
}

tasks.cleanEclipseJdt {
  doFirst {
    delete file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs"),
      file('.factorypath')
  }
}

if (project.hasProperty('privateOssrhUsername') && project.hasProperty('privateOssrhPassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        snapshotRepository(url: privateSnapshotRepo) {
          authentication(userName: privateOssrhUsername, password: privateOssrhPassword)
        }

        pom.project {
          name 'Gapi Tools'
          packaging 'jar'
          description 'Google API tools frameworks.'
          url 'http://www.googleapis.com'

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
        }
      }
    }
  }
} else {
  logger.warn("The uploadArchives task was skipped. The privateOssrhUsername "
    + "and privateOssrhPassword properties need to be set correctly in "
    + "your ~/.gradle/gradle.properties file in order to upload archives.")
}

allprojects {
  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked"
    }
  }
}

// Task to run CodeGeneratorTool
// =============================
//
// Command line args can be passed to the tool as a comma-separated list:
//   ./gradlew runVGen '-Pclargs=--arg1=val1,--arg2=val2,--arg3=val3'
task runVGen(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.google.api.codegen.CodeGeneratorTool'
  if (project.hasProperty('clargs')) {
    args = clargs.split(',').toList()
  }
}

// Task to run SynchronizerTool
// =============================
//
// Command line args can be passed to the tool as a comma-separated list:
//   ./gradlew runSynchronizer '-Pclargs=--arg1=val1,--arg2=val2,--arg3=val3'
task runSynchronizer(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.google.api.codegen.SynchronizerTool'
  if (project.hasProperty('clargs')) {
    args = clargs.split(',').toList()
  }
}

// Task to display the cache path of GRPC Java plugin
task showGrpcJavaPluginPath << {
  DependencyResolver resolver = new DependencyResolver(project)
  println 'output: ' + resolver.resolveExecutable(
    'io.grpc:protoc-gen-grpc-java:0.12.0')
}

// Task to display the cache path of protobuf
task showProtobufPath() << {
  DependencyResolver resolver = new DependencyResolver(project)
  println 'output: ' + resolver.extractArchive(
    'com.google.protobuf:protobuf-java:3.0.0-beta-2');
}

// Task to display the cache path of Google Java formatter
task showJavaFormatterPath << {
  DependencyResolver resolver = new DependencyResolver(project)
  println 'output: ' + resolver.locateArchive(
    'com.google.googlejavaformat:google-java-format:0.1-alpha')
}

// Task to run ConfigGeneratorTool
// =============================
//
// Command line args can be passed to the tool as a comma-separated list:
//   ./gradlew runConfigGen '-Pclargs=--arg1=val1,--arg2=val2,--arg3=val3'
task runConfigGen(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.google.api.codegen.config.ConfigGeneratorTool'
  if (project.hasProperty('clargs')) {
    args = clargs.split(',').toList()
  }
}

// Task to run DiscoveryFragmentGeneratorTool
// =================================================================
task runDiscoGen(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.google.api.codegen.DiscoveryFragmentGeneratorTool'
  if (project.hasProperty('clargs')) {
    args = clargs.split(',').toList()
  }
}

task runDiscoBatch(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'com.google.api.codegen.DiscoveryFragmentGeneratorBatch'
  if (project.hasProperty('clargs')) {
    args = clargs.split(',').toList()
  }
}

task verifyLicense << {
  def licenseText = new File(rootProject.rootDir, 'license-header-javadoc.txt').text
  def srcFiles = []
  sourceSets
      .collectMany{it.allJava.getSrcDirs()}
      .each{it.eachFileRecurse(FileType.FILES, {srcFiles << it})}
  srcFiles = srcFiles
      .findAll{!it.path.contains("/generated/") && it.path.endsWith(".java")}
      .findAll{!it.text.startsWith(licenseText)}
  if (srcFiles.asList().size() > 0) {
    srcFiles.each({println 'missing license: ' + it})
    throw new IllegalStateException("Above files do not have licenses")
  }
}
test.dependsOn verifyLicense

googleJavaFormat {
  toolVersion '1.0'
}
tasks.googleJavaFormat {
  exclude '.apt_generated/**'
  exclude 'bin/**'
  exclude 'build/**'
  exclude 'vgen/build/**'
  exclude 'vgen/.apt_generated/**'
}
tasks.verifyGoogleJavaFormat {
  exclude '.apt_generated/**'
  exclude 'bin/**'
  exclude 'build/**'
  exclude 'vgen/build/**'
  exclude 'vgen/.apt_generated/**'
}
test.dependsOn verifyGoogleJavaFormat
